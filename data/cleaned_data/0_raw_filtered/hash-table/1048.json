{
    "id": 1048,
    "title": "Longest String Chain",
    "title_slug": "longest-string-chain",
    "backend_id": 1129,
    "content": "<div><p>Given a list of words, each word consists of English lowercase letters.</p>\n\n<p>Let's say <code>word1</code> is a predecessor of <code>word2</code>&nbsp;if and only if we can add exactly one letter anywhere in <code>word1</code> to make it equal to <code>word2</code>.&nbsp; For example,&nbsp;<code>\"abc\"</code>&nbsp;is a predecessor of <code>\"abac\"</code>.</p>\n\n<p>A <em>word chain&nbsp;</em>is a sequence of words <code>[word_1, word_2, ..., word_k]</code>&nbsp;with <code>k &gt;= 1</code>,&nbsp;where <code>word_1</code> is a predecessor of <code>word_2</code>, <code>word_2</code> is a predecessor of <code>word_3</code>, and so on.</p>\n\n<p>Return the longest possible length of a word chain with words chosen from the given list of <code>words</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre><strong>Input:</strong> words = [\"a\",\"b\",\"ba\",\"bca\",\"bda\",\"bdca\"]\n<strong>Output:</strong> 4\n<strong>Explanation</strong>: One of the longest word chain is \"a\",\"ba\",\"bda\",\"bdca\".\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre><strong>Input:</strong> words = [\"xbc\",\"pcxbcf\",\"xb\",\"cxbc\",\"pcxbc\"]\n<strong>Output:</strong> 5\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 16</code></li>\n\t<li><code>words[i]</code> only consists of English lowercase letters.</li>\n</ul>\n</div>"
}