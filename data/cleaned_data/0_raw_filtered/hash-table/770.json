{
    "id": 770,
    "title": "Basic Calculator IV",
    "title_slug": "basic-calculator-iv",
    "backend_id": 781,
    "content": "<div><p>Given an <code>expression</code>&nbsp;such as <code>expression = \"e + 8 - a + 5\"</code> and an evaluation map such as <code>{\"e\": 1}</code> (given in terms of <code>evalvars = [\"e\"]</code> and <code>evalints = [1]</code>), return a list of tokens representing the simplified expression, such as <code>[\"-1*a\",\"14\"]</code></p>\n\n<ul>\n\t<li>An expression alternates chunks and symbols, with a space separating each chunk and symbol.</li>\n\t<li>A chunk is either an expression in parentheses, a variable, or a non-negative integer.</li>\n\t<li>A variable is a string of lowercase letters (not including digits.) Note that variables can be multiple letters, and note that variables never have a leading coefficient or unary operator like <code>\"2x\"</code> or <code>\"-x\"</code>.</li>\n</ul>\n\n<p>Expressions are evaluated in the usual order: brackets first, then multiplication, then addition and subtraction. For example, <code>expression = \"1 + 2 * 3\"</code> has an answer of <code>[\"7\"]</code>.</p>\n\n<p>The format of the output is as follows:</p>\n\n<ul>\n\t<li>For each term of free variables with non-zero coefficient, we write the free variables within a term in sorted order lexicographically. For example, we would never write a term like <code>\"b*a*c\"</code>, only <code>\"a*b*c\"</code>.</li>\n\t<li>Terms have degree equal to the number of free variables being multiplied, counting multiplicity. (For example, <code>\"a*a*b*c\"</code> has degree 4.) We write the largest degree terms of our answer first, breaking ties by lexicographic order ignoring the leading coefficient of the term.</li>\n\t<li>The leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.)&nbsp; A leading coefficient of 1 is still printed.</li>\n\t<li>An example of a well formatted answer is <code>[\"-2*a*a*a\", \"3*a*a*b\", \"3*b*b\", \"4*a\", \"5*c\", \"-6\"]</code>&nbsp;</li>\n\t<li>Terms (including constant terms) with coefficient 0 are not included.&nbsp; For example, an expression of \"0\" has an output of [].</li>\n</ul>\n\n<p><strong>Examples:</strong></p>\n\n<pre><strong>Input:</strong> expression = \"e + 8 - a + 5\", evalvars = [\"e\"], evalints = [1]\n<strong>Output:</strong> [\"-1*a\",\"14\"]\n\n<strong>Input:</strong> expression = \"e - 8 + temperature - pressure\",\nevalvars = [\"e\", \"temperature\"], evalints = [1, 12]\n<strong>Output:</strong> [\"-1*pressure\",\"5\"]\n\n<strong>Input:</strong> expression = \"(e + 8) * (e - 8)\", evalvars = [], evalints = []\n<strong>Output:</strong> [\"1*e*e\",\"-64\"]\n\n<strong>Input:</strong> expression = \"7 - 7\", evalvars = [], evalints = []\n<strong>Output:</strong> []\n\n<strong>Input:</strong> expression = \"a * b * c + b * a * c * 4\", evalvars = [], evalints = []\n<strong>Output:</strong> [\"5*a*b*c\"]\n\n<strong>Input:</strong> expression = \"((a - b) * (b - c) + (c - a)) * ((a - b) + (b - c) * (c - a))\",\nevalvars = [], evalints = []\n<strong>Output:</strong> [\"-1*a*a*b*b\",\"2*a*a*b*c\",\"-1*a*a*c*c\",\"1*a*b*b*b\",\"-1*a*b*b*c\",\"-1*a*b*c*c\",\"1*a*c*c*c\",\"-1*b*b*b*c\",\"2*b*b*c*c\",\"-1*b*c*c*c\",\"2*a*a*b\",\"-2*a*a*c\",\"-2*a*b*b\",\"2*a*c*c\",\"1*b*b*b\",\"-1*b*b*c\",\"1*b*c*c\",\"-1*c*c*c\",\"-1*a*a\",\"1*a*b\",\"1*a*c\",\"-1*b*c\"]\n</pre>\n\n<p><strong>Note:</strong></p>\n\n<ol>\n\t<li><code>expression</code> will have length in range <code>[1, 250]</code>.</li>\n\t<li><code>evalvars, evalints</code> will have equal lengths in range <code>[0, 100]</code>.</li>\n</ol>\n</div>"
}