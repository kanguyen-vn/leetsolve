{
    "id": 1190,
    "title": "Reverse Substrings Between Each Pair of Parentheses",
    "title_slug": "reverse-substrings-between-each-pair-of-parentheses",
    "backend_id": 1298,
    "content": "<div><p>You are given a string <code>s</code> that consists of lower case English letters and brackets.&nbsp;</p>\n\n<p>Reverse the strings&nbsp;in each&nbsp;pair of matching parentheses, starting&nbsp;from the innermost one.</p>\n\n<p>Your result should <strong>not</strong> contain any brackets.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre><strong>Input:</strong> s = \"(abcd)\"\n<strong>Output:</strong> \"dcba\"\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre><strong>Input:</strong> s = \"(u(love)i)\"\n<strong>Output:</strong> \"iloveu\"\n<strong>Explanation:</strong>&nbsp;The substring \"love\" is reversed first, then the whole string is reversed.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre><strong>Input:</strong> s = \"(ed(et(oc))el)\"\n<strong>Output:</strong> \"leetcode\"\n<strong>Explanation:</strong>&nbsp;First, we reverse the substring \"oc\", then \"etco\", and finally, the whole string.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre><strong>Input:</strong> s = \"a(bcdefghijkl(mno)p)q\"\n<strong>Output:</strong> \"apmnolkjihgfedcbq\"\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 2000</code></li>\n\t<li><code>s</code> only contains lower case English characters and parentheses.</li>\n\t<li>It's guaranteed that all parentheses are balanced.</li>\n</ul>\n</div>"
}