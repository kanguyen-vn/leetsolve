{
    "id": 847,
    "title": "Shortest Path Visiting All Nodes",
    "title_slug": "shortest-path-visiting-all-nodes",
    "backend_id": 877,
    "content": "<div><p>An undirected, connected graph of N nodes (labeled&nbsp;<code>0, 1, 2, ..., N-1</code>) is given as <code>graph</code>.</p>\n\n<p><code>graph.length = N</code>, and <code>j != i</code>&nbsp;is in the list&nbsp;<code>graph[i]</code>&nbsp;exactly once, if and only if nodes <code>i</code> and <code>j</code> are connected.</p>\n\n<p>Return the length of the shortest path that visits every node. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>Example 1:</strong></p>\n\n<pre><strong>Input: </strong>[[1,2,3],[0],[0],[0]]\n<strong>Output: </strong>4\n<strong>Explanation</strong>: One possible path is [1,0,2,0,3]</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre><strong>Input: </strong>[[1],[0,2,4],[1,3,4],[2],[1,2]]\n<strong>Output: </strong>4\n<strong>Explanation</strong>: One possible path is [0,1,4,2,3]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>Note:</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= graph.length &lt;= 12</code></li>\n\t<li><code>0 &lt;= graph[i].length &lt;&nbsp;graph.length</code></li>\n</ol>\n</div>"
}