{
    "id": 10,
    "title": "Regular Expression Matching",
    "title_slug": "regular-expression-matching",
    "backend_id": 10,
    "content": "<div><p>Given an input string (<code>s</code>) and a pattern (<code>p</code>), implement regular expression matching with support for <code>'.'</code> and <code>'*'</code> where:<code>&nbsp;</code></p>\n\n<ul>\n\t<li><code>'.'</code> Matches any single character.\u200b\u200b\u200b\u200b</li>\n\t<li><code>'*'</code> Matches zero or more of the preceding element.</li>\n</ul>\n\n<p>The matching should cover the <strong>entire</strong> input string (not partial).</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre><strong>Input:</strong> s = \"aa\", p = \"a\"\n<strong>Output:</strong> false\n<strong>Explanation:</strong> \"a\" does not match the entire string \"aa\".\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre><strong>Input:</strong> s = \"aa\", p = \"a*\"\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;'*' means zero or more of the preceding&nbsp;element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre><strong>Input:</strong> s = \"ab\", p = \".*\"\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;\".*\" means \"zero or more (*) of any character (.)\".\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre><strong>Input:</strong> s = \"aab\", p = \"c*a*b\"\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;c can be repeated 0 times, a can be repeated 1 time. Therefore, it matches \"aab\".\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre><strong>Input:</strong> s = \"mississippi\", p = \"mis*is*p*.\"\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length&nbsp;&lt;= 20</code></li>\n\t<li><code>0 &lt;= p.length&nbsp;&lt;= 30</code></li>\n\t<li><code>s</code> contains only lowercase English letters.</li>\n\t<li><code>p</code> contains only lowercase English letters, <code>'.'</code>, and&nbsp;<code>'*'</code>.</li>\n\t<li>It is guaranteed for each appearance of the character <code>'*'</code>, there will be a previous valid character to match.</li>\n</ul>\n</div>"
}