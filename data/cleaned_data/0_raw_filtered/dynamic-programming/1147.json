{
    "id": 1147,
    "title": "Longest Chunked Palindrome Decomposition",
    "title_slug": "longest-chunked-palindrome-decomposition",
    "backend_id": 1251,
    "content": "<div><p>Return the largest possible <code>k</code>&nbsp;such that there exists&nbsp;<code>a_1, a_2, ..., a_k</code>&nbsp;such that:</p>\n\n<ul>\n\t<li>Each <code>a_i</code> is a non-empty string;</li>\n\t<li>Their concatenation <code>a_1 + a_2 + ... + a_k</code> is equal to <code>text</code>;</li>\n\t<li>For all <code>1 &lt;= i &lt;= k</code>,&nbsp;&nbsp;<code>a_i = a_{k+1 - i}</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre><strong>Input:</strong> text = \"ghiabcdefhelloadamhelloabcdefghi\"\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> We can split the string on \"(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)\".\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre><strong>Input:</strong> text = \"merchant\"\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We can split the string on \"(merchant)\".\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre><strong>Input:</strong> text = \"antaprezatepzapreanta\"\n<strong>Output:</strong> 11\n<strong>Explanation:</strong> We can split the string on \"(a)(nt)(a)(pre)(za)(tpe)(za)(pre)(a)(nt)(a)\".\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre><strong>Input:</strong> text = \"aaa\"\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We can split the string on \"(a)(a)(a)\".\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>text</code> consists only of lowercase English characters.</li>\n\t<li><code>1 &lt;= text.length &lt;= 1000</code></li>\n</ul></div>"
}