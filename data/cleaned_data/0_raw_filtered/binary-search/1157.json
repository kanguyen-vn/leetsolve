{
    "id": 1157,
    "title": "Online Majority Element In Subarray",
    "title_slug": "online-majority-element-in-subarray",
    "backend_id": 1262,
    "content": "<div><p>Implementing the class <code>MajorityChecker</code>, which has the following API:</p>\n\n<ul>\n\t<li><code>MajorityChecker(int[] arr)</code> constructs an instance of MajorityChecker with the given array <code>arr</code>;</li>\n\t<li><code>int query(int left, int right, int threshold)</code>&nbsp;has arguments&nbsp;such that:\n\t<ul>\n\t\t<li><code>0 &lt;= left&nbsp;&lt;= right&nbsp;&lt; arr.length</code> representing a subarray of <code>arr</code>;</li>\n\t\t<li><code>2 * threshold &gt; right - left + 1</code>, ie. the threshold is always a strict majority of the length of&nbsp;the subarray</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Each&nbsp;<code>query(...)</code> returns the element in <code>arr[left], arr[left+1], ..., arr[right]</code> that occurs at least <code>threshold</code> times, or <code>-1</code> if no such element exists.</p>\n\n<p>&nbsp;</p>\n\n<p><strong>Example:</strong></p>\n\n<pre>MajorityChecker majorityChecker = new MajorityChecker([1,1,2,2,1,1]);\nmajorityChecker.query(0,5,4); // returns 1\nmajorityChecker.query(0,3,3); // returns -1\nmajorityChecker.query(2,3,2); // returns 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;=&nbsp;20000</code></li>\n\t<li><code>1 &lt;= arr[i]&nbsp;&lt;=&nbsp;20000</code></li>\n\t<li>For each query, <code>0 &lt;= left &lt;= right &lt; len(arr)</code></li>\n\t<li>For each query, <code>2 * threshold &gt; right - left + 1</code></li>\n\t<li>The number of queries is at most <code>10000</code></li>\n</ul></div>"
}