[
    {
        "id": 10,
        "title": "regular expression matching",
        "content": "give input string pattern implement regular expression match support match single character match zero precede element match cover entire input string partial contain lowercase english letter contain lowercase english letter guarantee appearance character previous valid character match",
        "label": "backtracking"
    },
    {
        "id": 1000,
        "title": "minimum cost to merge stones",
        "content": "pile stone arrange row th pile stone move consist merge exactly consecutive pile one pile cost move equal total number stone pile find minimum cost merge pile stone one pile impossible return",
        "label": "dynamic-programming"
    },
    {
        "id": 1012,
        "title": "numbers with repeated digits",
        "content": "give positive integer return number positive integer less equal least repeat digit",
        "label": "dynamic-programming"
    },
    {
        "id": 1024,
        "title": "video stitching",
        "content": "give series video clip sport event last second video clip overlap varied length video clip interval start time end time cut clip segment freely example clip cut segment return minimum number clip need cut clips segment cover entire sporting event task impossible return",
        "label": "dynamic-programming"
    },
    {
        "id": 1025,
        "title": "divisor game",
        "content": "alice bob take turn play game alice start first initially number chalkboard player 's turn player make move consist choosing replace number chalkboard also player make move lose game return alice win game assume player play optimally",
        "label": "dynamic-programming"
    },
    {
        "id": 1027,
        "title": "longest arithmetic subsequence",
        "content": "give array integer return length long arithmetic subsequence recall subsequence list sequence arithmetic value",
        "label": "dynamic-programming"
    },
    {
        "id": 1039,
        "title": "minimum score triangulation of polygon",
        "content": "give consider convex side polygon vertex label clockwise order suppose triangulate polygon triangle triangle value triangle product label vertex total score triangulation sum value triangle triangulation return small possible total score achieve triangulation polygon",
        "label": "dynamic-programming"
    },
    {
        "id": 1043,
        "title": "partition array for maximum sum",
        "content": "give integer array partition array contiguous subarrays length partition subarray value change become maximum value subarray return large sum give array partition",
        "label": "dynamic-programming"
    },
    {
        "id": 1048,
        "title": "longest string chain",
        "content": "give list word word consist english lowercase letter let 's say predecessor add exactly one letter anywhere make equal example predecessor word chain sequence word predecessor predecessor return long possible length word chain word choose give list consist english lowercase letter",
        "label": "hash-table"
    },
    {
        "id": 1049,
        "title": "last stone weight ii",
        "content": "collection rock rock positive integer weight turn choose two rock smash together suppose stone weight result smash stone totally destroy stone weight totally destroy stone weight new weight end stone leave return small possible weight stone weight stone leave",
        "label": "dynamic-programming"
    },
    {
        "id": 1074,
        "title": "number of submatrices that sum to target",
        "content": "give return number non empty submatrices sum submatrix set cell two submatrices different coordinate different example",
        "label": "dynamic-programming"
    },
    {
        "id": 1092,
        "title": "shortest common supersequence",
        "content": "give two string return short string subsequence multiple answer exist may return string subsequence string delete number character possibly character choose anywhere result string",
        "label": "dynamic-programming"
    },
    {
        "id": 1105,
        "title": "filling bookcase shelves",
        "content": "sequence th book thickness height want place book order onto bookcase shelf total width choose book place shelf sum thickness build another level shelf bookcase total height bookcase increase maximum height book put repeat process book place note step process order book place order give sequence book example order list book might place first second book onto first shelf third book second shelf fourth fifth book last shelf return minimum possible height total bookshelf place shelf manner",
        "label": "dynamic-programming"
    },
    {
        "id": 1125,
        "title": "smallest sufficient team",
        "content": "project list require skill list th person contain list skill person consider sufficient team set people every require skill least one person team skill represent team index person example represent people skill return sufficient team small possible size represent index person may return answer order guarantee answer exist element respectively distinct lowercase english letter every skill skill guarantee sufficient team exist",
        "label": "dynamic-programming"
    },
    {
        "id": 1130,
        "title": "minimum cost tree from leaf values",
        "content": "give array positive integer consider binary tree node either child value correspond value leaf order traversal tree recall node leaf child value non leaf node equal product large leaf value leave right subtree respectively among possible binary tree consider return small possible sum value non leaf node guarantee sum fit bit integer guarantee answer fit bit signed integer ie less",
        "label": "stack"
    },
    {
        "id": 1139,
        "title": "largest 1-bordered square",
        "content": "give 2d return number element large square subgrid border subgrid n't exist",
        "label": "dynamic-programming"
    },
    {
        "id": 1140,
        "title": "stone game ii",
        "content": "alice bob continue game pile stone number pile arrange row pile positive integer number stone objective game end stone alice bob take turn alice start first initially player 's turn player take stone first remain pile set game continue stone take assume alice bob play optimally return maximum number stone alice get",
        "label": "dynamic-programming"
    },
    {
        "id": 1143,
        "title": "longest common subsequence",
        "content": "give two string return length long common subsequence subsequence string new string generate original string character none delete without change relative order remain character eg ace subsequence abcde aec common subsequence two string subsequence common string common subsequence return input string consist lowercase english character",
        "label": "dynamic-programming"
    },
    {
        "id": 1147,
        "title": "longest chunked palindrome decomposition",
        "content": "return large possible exist non empty string concatenation equal consist lowercase english character",
        "label": "dynamic-programming"
    },
    {
        "id": 115,
        "title": "distinct subsequences",
        "content": "give two string return number distinct subsequence equal string 's subsequence new string form original string delete none character without disturb relative position remain character subsequence 's guarantee answer fit bit sign integer consist english letter",
        "label": "dynamic-programming"
    },
    {
        "id": 1155,
        "title": "number of dice rolls with target sum",
        "content": "dice die face numbered return number possible way total way modulo roll dice sum face number equal",
        "label": "dynamic-programming"
    },
    {
        "id": 1186,
        "title": "maximum subarray sum with one deletion",
        "content": "give array integer return maximum sum non empty subarray contiguous element one element deletion word want choose subarray optionally delete one element still least one element leave sum remain element maximum possible note subarray need non empty delete one element",
        "label": "dynamic-programming"
    },
    {
        "id": 1187,
        "title": "make array strictly increasing",
        "content": "give two integer array return minimum number operation possibly zero need make strictly increase one operation choose two index assignment way make strictly increase return",
        "label": "dynamic-programming"
    },
    {
        "id": 1191,
        "title": "k-concatenation maximum sum",
        "content": "give integer array integer modify array repeat time example modify array return maximum sub array sum modify array note length sub array sum case answer large return answer modulo",
        "label": "dynamic-programming"
    },
    {
        "id": 120,
        "title": "triangle",
        "content": "give triangle find minimum path sum top bottom step may move adjacent number row example give follow triangle minimum path sum top bottom",
        "label": "dynamic-programming"
    },
    {
        "id": 121,
        "title": "best time to buy and sell stock",
        "content": "say array element price give stock day permit complete one transaction buy one sell one share stock design algorithm find maximum profit note sell stock buy one",
        "label": "dynamic-programming"
    },
    {
        "id": 1218,
        "title": "longest arithmetic subsequence of given difference",
        "content": "give integer array integer return length long subsequence arithmetic sequence difference adjacent element subsequence equal",
        "label": "dynamic-programming"
    },
    {
        "id": 1220,
        "title": "count vowels permutation",
        "content": "give integer task count many string length form follow rule character low case vowel vowel may follow vowel may follow vowel may follow another vowel may follow vowel may follow since answer may large return modulo",
        "label": "dynamic-programming"
    },
    {
        "id": 1223,
        "title": "dice roll simulation",
        "content": "die simulator generate random number roll introduce constraint generator roll number indexed consecutive time give array integer integer return number distinct sequence obtain exact roll two sequence consider different least one element differ since answer may large return modulo",
        "label": "dynamic-programming"
    },
    {
        "id": 1227,
        "title": "airplane seat assignment probability",
        "content": "passenger board airplane exactly seat first passenger lose ticket pick seat randomly rest passenger take seat still available pick seat randomly find seat occupied probability th person get seat",
        "label": "dynamic-programming"
    },
    {
        "id": 123,
        "title": "best time to buy and sell stock iii",
        "content": "say array element price give stock day design algorithm find maximum profit may complete two transaction",
        "label": "dynamic-programming"
    },
    {
        "id": 1235,
        "title": "maximum profit in job scheduling",
        "content": "job every job schedule do obtaining profit 're give array need output maximum profit take job subset overlapping time range choose job end time able start another job start time",
        "label": "binary-search"
    },
    {
        "id": 1240,
        "title": "tiling a rectangle with the fewest squares",
        "content": "give rectangle size find minimum number integer side square tile rectangle",
        "label": "backtracking"
    },
    {
        "id": 1262,
        "title": "greatest sum divisible by three",
        "content": "give array integer need find maximum possible sum element array divisible three",
        "label": "dynamic-programming"
    },
    {
        "id": 1269,
        "title": "number of ways to stay in the same place after some steps",
        "content": "pointer index array size step move position leave position right array stay place pointer place outside array time give two integer return number way pointer still index exactly step since answer may large return modulo",
        "label": "dynamic-programming"
    },
    {
        "id": 1277,
        "title": "count square submatrices with all ones",
        "content": "give matrix one zero return many square submatrices one",
        "label": "dynamic-programming"
    },
    {
        "id": 1278,
        "title": "palindrome partitioning iii",
        "content": "give string contain lowercase letter integer need first change character lowercase english letter divide non empty disjoint substring substring palindrome return minimal number character need change divide string contain lowercase english letter",
        "label": "dynamic-programming"
    },
    {
        "id": 1289,
        "title": "minimum falling path sum ii",
        "content": "give square grid integer fall path non zero shifts choice exactly one element row two element choose adjacent row column return minimum sum fall path non zero shift",
        "label": "dynamic-programming"
    },
    {
        "id": 1301,
        "title": "number of paths with max score",
        "content": "give square character move board start bottom right square mark character need reach top leave square marked character rest square label either numeric character obstacle one move go leave leave diagonally obstacle return list two integer first integer maximum sum numeric character collect second number path take get maximum sum take modulo case path return",
        "label": "dynamic-programming"
    },
    {
        "id": 1312,
        "title": "minimum insertion steps to make a string palindrome",
        "content": "give string one step insert character index string return minimum number step make palindrome palindrome string one read backward well forward character low case english letter",
        "label": "dynamic-programming"
    },
    {
        "id": 1314,
        "title": "matrix block sum",
        "content": "give matrix integer return matrix sum element valid position matrix",
        "label": "dynamic-programming"
    },
    {
        "id": 132,
        "title": "palindrome partitioning ii",
        "content": "give string partition every substring partition palindrome return minimum cut need palindrome partitioning consist low case english letter",
        "label": "dynamic-programming"
    },
    {
        "id": 1320,
        "title": "minimum distance to type a word using two fingers",
        "content": "keyboard layout show xy plane english uppercase letter locate coordinate example letter locate coordinate letter locate coordinate letter locate coordinate letter locate coordinate give string return minimum total distance type string use two finger distance coordinate x1 y1 x2 y2 |x1 x2| |y1 y2| note initial position two finger consider free n't count towards total distance also two finger start first letter first two letter english uppercase letter",
        "label": "dynamic-programming"
    },
    {
        "id": 1326,
        "title": "minimum number of taps to open to water a garden",
        "content": "one dimensional garden axis garden start point end point length garden tap locate point garden give integer integer array length indexed mean tap water area open return minimum number tap open water whole garden garden water return",
        "label": "greedy"
    },
    {
        "id": 1335,
        "title": "minimum difficulty of a job schedule",
        "content": "want schedule list job day job dependent work job finish job finish least one task every day difficulty job schedule sum difficulty day day difficulty day maximum difficulty job do day give array integer integer difficulty job return minimum difficulty job schedule find schedule job return",
        "label": "dynamic-programming"
    },
    {
        "id": 1339,
        "title": "maximum product of splitted binary tree",
        "content": "give binary tree split binary tree two subtrees remove edge product sum subtrees maximize since answer may large return modulo tree node least node node 's value",
        "label": "depth-first-search"
    },
    {
        "id": 1340,
        "title": "jump game v",
        "content": "give array integer integer one step jump index index addition jump index index index formally choose index array start jumping return maximum number index visit notice jump outside array time",
        "label": "dynamic-programming"
    },
    {
        "id": 1349,
        "title": "maximum students taking exam",
        "content": "give matrix represent seat distribution classroom seat break denoted character otherwise denoted character student see answer sit next left right upper leave upper right see answer student sit directly front behind return maximum number student take exam together without cheat possible student must place seat good condition contain character",
        "label": "dynamic-programming"
    },
    {
        "id": 1359,
        "title": "count all valid pickup and delivery options",
        "content": "give order order consist pickup delivery service count valid pickup delivery possible sequence delivery always pickup since answer may large return modulo",
        "label": "dynamic-programming"
    },
    {
        "id": 1363,
        "title": "largest multiple of three",
        "content": "give integer array return large multiple three form concatenate give digit order since answer may fit integer data type return answer string answer return empty string return answer must contain unnecessary lead zero",
        "label": "dynamic-programming"
    },
    {
        "id": 1367,
        "title": "linked list in binary tree",
        "content": "give binary tree link list first node return true element link list start correspond downward path connect binary tree otherwise return false context downward path mean path start node go downwards node link list binary tree give link list contain node give binary tree contain node",
        "label": "dynamic-programming"
    },
    {
        "id": 1372,
        "title": "longest zigzag path in a binary tree",
        "content": "give binary tree zigzag path binary tree define follow choose node binary tree direction right leave current direction right move right child current node otherwise move leave child change direction right leave right left repeat second third step ca n't move tree zigzag length define number node visit single node length return long zigzag path contain tree tree node node 's value",
        "label": "dynamic-programming"
    },
    {
        "id": 1373,
        "title": "maximum sum bst in binary tree",
        "content": "give binary tree task return maximum sum key sub tree also binary search tree bst assume bst define follow leave subtree node contain node key less node 's key right subtree node contain node key great node 's key left right subtrees must also binary search tree give binary tree node node 's value",
        "label": "dynamic-programming"
    },
    {
        "id": 1388,
        "title": "pizza with 3n slices",
        "content": "pizza 3n slice vary size friend take slice pizza follow pick pizza slice friend alice pick next slice anti clockwise direction pick friend bob pick next slice clockwise direction pick repeat slice pizzas size pizza slice represent circular array clockwise direction return maximum possible sum slice size",
        "label": "dynamic-programming"
    },
    {
        "id": 139,
        "title": "word break",
        "content": "give non empty string dictionary worddict contain list non empty word determine segment space separate sequence one dictionary word",
        "label": "dynamic-programming"
    },
    {
        "id": 1397,
        "title": "find all good strings",
        "content": "give string size string return number good string good string size alphabetically great equal alphabetically small equal contain string substring since answer huge number return modulo string consist lowercase english letter",
        "label": "dynamic-programming"
    },
    {
        "id": 140,
        "title": "word break ii",
        "content": "give non empty string dictionary worddict contain list non empty word add space construct sentence word valid dictionary word return possible sentence",
        "label": "backtracking"
    },
    {
        "id": 1402,
        "title": "reducing dishes",
        "content": "chef collect data level dish chef cook dish unit time like time coefficient dish define time take cook dish include previous dish multiply satisfaction level return maximum sum like time coefficient chef obtain dish preparation dish prepare order chef discard dish get maximum value",
        "label": "dynamic-programming"
    },
    {
        "id": 1405,
        "title": "longest happy string",
        "content": "string call happy string substring give three integer return string satisfy follow condition happy long possible contain occurrence letter occurrence letter occurrence letter contain letter string return empty string",
        "label": "greedy"
    },
    {
        "id": 1406,
        "title": "stone game iii",
        "content": "alice bob continue game pile stone several stone arrange row stone associate value integer give array alice bob take turn alice start first player 's turn player take stone first remain stone row score player sum value stone take score player initially objective game end high score winner player high score could tie game continue stone take assume alice bob play optimally return alice alice win bob bob win tie end game score",
        "label": "dynamic-programming"
    },
    {
        "id": 1411,
        "title": "number of ways to paint n \u00d7 3 grid",
        "content": "size want paint cell grid exactly one three colour red yellow green make sure two adjacent cell colour two cell share vertical horizontal side colour give number row grid return number way paint answer may grow large answer must compute modulo",
        "label": "dynamic-programming"
    },
    {
        "id": 1416,
        "title": "restore the array",
        "content": "program suppose print array integer program forget print whitespaces array print string digit know integer array range lead zero array give string integer multiple way restore array return number possible array print string use mention program number way could large return modulo consist digits n't contain leading zero",
        "label": "dynamic-programming"
    },
    {
        "id": 1420,
        "title": "build array where you can find the maximum exactly k comparisons",
        "content": "give three integer consider follow algorithm find maximum element array positive integer build array arr follow property exactly integer apply mention algorithm value equal return number way build array mention condition answer may grow large answer must compute modulo",
        "label": "dynamic-programming"
    },
    {
        "id": 1423,
        "title": "maximum points you can obtain from cards",
        "content": "several card arrange row card associate number point point give integer array one step take one card begin end row take exactly card score sum point card take give integer array integer return maximum score obtain",
        "label": "dynamic-programming"
    },
    {
        "id": 1425,
        "title": "constrained subsequence sum",
        "content": "give integer array integer return maximum sum non empty subsequence array every two consecutive integer subsequence condition satisfy subsequence array obtain delete number element zero array leave remain element original order",
        "label": "dynamic-programming"
    },
    {
        "id": 1434,
        "title": "number of ways to wear different hats to each other",
        "content": "people type hat label give list list integer list hat prefer person return number way people wear different hat since answer may large return modulo contain list unique integer",
        "label": "dynamic-programming"
    },
    {
        "id": 1444,
        "title": "number of ways of cutting a pizza",
        "content": "give rectangular pizza represent matrix contain follow character apple empty cell give integer cut pizza piece use cut cut choose direction vertical horizontal choose cut position cell boundary cut pizza two piece cut pizza vertically give left part pizza person cut pizza horizontally give upper part pizza person give last piece pizza last person return number way cut pizza piece contain least one apple since answer huge number return modulo consist character",
        "label": "dynamic-programming"
    },
    {
        "id": 1449,
        "title": "form largest integer with digits that add up to target",
        "content": "give array integer integer return maximum integer paint follow rule cost paint digit i+1 give indexed total cost use must equal integer digit since answer may large return string way paint integer give condition return",
        "label": "dynamic-programming"
    },
    {
        "id": 1458,
        "title": "max dot product of two subsequences",
        "content": "give two array return maximum dot product non empty subsequence nums1 nums2 length subsequence array new array form original array delete none character without disturb relative position remain character ie subsequence",
        "label": "dynamic-programming"
    },
    {
        "id": 1463,
        "title": "cherry pickup ii",
        "content": "give matrix represent field cherry cell represent number cherry collect two robot collect cherry robot locate top left corner robot locate top right corner col grid return maximum number cherry collection use robot follow rule cell robot move cell i+1 i+1 i+1 j+1 robot pass cell pick cherry cell become empty cell robot stay cell one take cherry robot move outside grid moment robot reach bottom row",
        "label": "dynamic-programming"
    },
    {
        "id": 1473,
        "title": "paint house iii",
        "content": "row house small city house must paint one color label house paint last summer paint neighborhood maximal group continuous house paint color example house contain neighborhood give array matrix integer color house house paint yet cost paint house color return minimum cost painting remain house way exactly neighborhood possible return",
        "label": "dynamic-programming"
    },
    {
        "id": 1477,
        "title": "find two non-overlapping sub-arrays each with target sum",
        "content": "give array integer integer find two non overlap sub array sum equal multiple answer find answer sum length two sub array minimum return minimum sum length two require sub array return find two sub array",
        "label": "dynamic-programming"
    },
    {
        "id": 1478,
        "title": "allocate mailboxes",
        "content": "give array integer location ith house along street task allocate mailbox street return minimum total distance house near mailbox answer guarantee fit bit sign integer array contain unique integer",
        "label": "dynamic-programming"
    },
    {
        "id": 1483,
        "title": "kth ancestor of a tree node",
        "content": "give tree node number form parent array parent node root tree node implement function return th ancestor give ancestor return th ancestor tree node th node path node root indicate root node query",
        "label": "dynamic-programming"
    },
    {
        "id": 1504,
        "title": "count submatrices with all ones",
        "content": "give matrix one zero return many submatrices one",
        "label": "dynamic-programming"
    },
    {
        "id": 1510,
        "title": "stone game iv",
        "content": "alice bob take turn play game alice start first initially stone pile player 's turn player make move consist remove non zero square number stone pile also player make move lose game give positive integer return alice win game otherwise return assume player play optimally",
        "label": "dynamic-programming"
    },
    {
        "id": 152,
        "title": "maximum product subarray",
        "content": "give integer array find contiguous subarray within array contain least one number large product",
        "label": "dynamic-programming"
    },
    {
        "id": 1531,
        "title": "string compression ii",
        "content": "run length encode string compression method work replace consecutive identical character repeat time concatenation character number mark count character length run example compress string replace replace thus compress string become notice problem add single character give string integer need delete character run length encode version minimum length find minimum length run length encode version delete character contain lowercase english letter",
        "label": "dynamic-programming"
    },
    {
        "id": 1537,
        "title": "get the maximum score",
        "content": "give two sorted array distinct integer valid path define follow choose array nums1 nums2 traverse index traverse current array leave right read value present allow change path array one repeat value consider valid path score define sum uniques value valid path return maximum score obtain possible valid path since answer may large return modulo strictly increase",
        "label": "dynamic-programming"
    },
    {
        "id": 1546,
        "title": "maximum number of non-overlapping subarrays with sum equals target",
        "content": "give array integer return maximum number non empty non overlap subarrays sum value subarray equal",
        "label": "dynamic-programming"
    },
    {
        "id": 1547,
        "title": "minimum cost to cut a stick",
        "content": "give wooden stick length unit stick label example stick length label follow give integer array denote position perform cut perform cut order change order cut wish cost one cut length stick cut total cost sum cost cut cut stick split two small stick sum length length stick cut please refer first example well explanation return minimum total cost cut integer array distinct",
        "label": "dynamic-programming"
    },
    {
        "id": 1553,
        "title": "minimum number of days to eat n oranges",
        "content": "orange kitchen decide eat orange every day follow eat one orange number remain orange divisible eat orange number remain orange divisible eat orange choose one action per day return minimum number day eat orange",
        "label": "dynamic-programming"
    },
    {
        "id": 1563,
        "title": "stone game v",
        "content": "several stone arrange row stone associate value integer give array round game alice divide row two non empty row leave row right row bob calculate value row sum value stone row bob throw away row maximum value alice 's score increase value remain row value two row equal bob let alice decide row thrown away next round start remain row game end one stone remain alice 's initially zero return maximum score alice obtain",
        "label": "dynamic-programming"
    },
    {
        "id": 1569,
        "title": "number of ways to reorder array to get same bst",
        "content": "give array represent permutation integer go construct binary search tree bst insert element order initially empty bst find number different way reorder construct bst identical form original array example give root leave child right child array also yield bst yield different bst return number way reorder bst form identical original bst form since answer may large return modulo integer distinct",
        "label": "dynamic-programming"
    },
    {
        "id": 1575,
        "title": "count all possible routes",
        "content": "give array distinct positive integer location represent position city also give integer represent start city end city initial amount fuel respectively step city pick city move city move city city reduce amount fuel please notice denote absolute value notice become negative point time allow visit city include return count possible route since answer may large return modulo integer distinct",
        "label": "dynamic-programming"
    },
    {
        "id": 1594,
        "title": "maximum non negative product in a matrix",
        "content": "give matrix initially locate top leave corner step move right matrix among possible path start top left corner end bottom right corner find path maximum non negative product product path product integer grid cell visit along path return maximum non negative product modulo maximum product negative return notice modulo perform get maximum product",
        "label": "greedy"
    },
    {
        "id": 1595,
        "title": "minimum cost to connect two groups of points",
        "content": "give two group point first group point second group point connection two point give matrix cost connect point first group point second group group connect point group connect one point opposite group word point first group must connect least one point second group point second group must connect least one point first group return minimum cost take connect two group",
        "label": "dynamic-programming"
    },
    {
        "id": 1601,
        "title": "maximum number of achievable transfer requests",
        "content": "building number building number employee 's transfer season employee want change building reside give array represent employee 's request transfer building building building full list request achievable building net change employee transfer zero mean number employee leave equal number employee move example two employee leave build one leave build one leave building two employee move build one employee move build one employee move building return maximum number achievable request",
        "label": "dynamic-programming"
    },
    {
        "id": 1611,
        "title": "minimum one bit operations to make integers zero",
        "content": "give integer must transform use follow operation number time change rightmost bit binary representation change bit binary representation bit set bit set return minimum number operation transform",
        "label": "dynamic-programming"
    },
    {
        "id": 1621,
        "title": "number of sets of k non-overlapping line segments",
        "content": "give point plane point find number way draw exactly non overlap line segment segment cover two point endpoint segment must integral coordinate line segment cover point allow share endpoint return number way draw non overlap line segment since number huge return modulo",
        "label": "dynamic-programming"
    },
    {
        "id": 1626,
        "title": "best team with no conflicts",
        "content": "manager basketball team upcoming tournament want choose team high overall score score team sum score player team however basketball team allow conflict conflict exist young player strictly high score old player conflict occur player age give two list represent score age player respectively return high overall score possible basketball team",
        "label": "dynamic-programming"
    },
    {
        "id": 1639,
        "title": "number of ways to form a target string given a dictionary",
        "content": "give list string length string task form use give follow rule form leave right form character index choose character string use character string longer use character string word character leave index become unusuable every string repeat process form string notice use multiple character string provided condition meet return number way form since answer may large return modulo string length contain lowercase english letter",
        "label": "dynamic-programming"
    },
    {
        "id": 1641,
        "title": "count sorted vowel strings",
        "content": "give integer return number string length consist vowel lexicographically sort string lexicographically sort valid come alphabet",
        "label": "backtracking"
    },
    {
        "id": 1643,
        "title": "kth smallest instructions",
        "content": "bob stand cell want reach travel right go help bob provide instruction reach instruction represent string character either mean move horizontally go right mean move vertically go multiple instruction lead bob example valid instruction however bob picky bob lucky number want lexicographically small instruction lead indexed give integer array integer return lexicographically small instruction take bob denote choose",
        "label": "dynamic-programming"
    },
    {
        "id": 1654,
        "title": "minimum jumps to reach home",
        "content": "certain bug 's home axis position help get position bug jump accord follow rule jump exactly position forward right jump exactly position backward leave jump backward twice row jump position bug may jump forward beyond home jump position number negative integer give array integer mean bug jump position integer return minimum number jump need bug reach home possible sequence jump land bug position return element distinct position forbidden",
        "label": "breadth-first-search"
    },
    {
        "id": 1655,
        "title": "distribute repeating integers",
        "content": "give array integer unique value array also give array customer order quantity amount integer customer order determine possible distribute customer get exactly integer integer customer get equal every customer satisfy return possible distribute accord condition unique value",
        "label": "backtracking"
    },
    {
        "id": 1659,
        "title": "maximize grid happiness",
        "content": "give four integer grid two type people introvert extrovert introvert extrovert decide many people want live grid assign one grid cell note people live grid happiness person calculate follow introvert start happiness lose happiness neighbor introvert extrovert extrovert start happiness gain happiness neighbor introvert extrovert neighbor live directly adjacent cell north east south west person 's cell grid happiness sum person 's happiness return maximum possible grid happiness",
        "label": "backtracking"
    },
    {
        "id": 174,
        "title": "dungeon game",
        "content": "demon capture princess imprison bottom right corner dungeon dungeon consist room lay 2d grid valiant knight initially position top left room must fight way dungeon rescue princess knight initial health point represent positive integer point health point drop die immediately room guard demon knight lose health negative integer upon enter room room either empty 's contain magic orbs increase knight 's health positive integer order reach princess quickly possible knight decide move rightward downward step write function determine knight 's minimum initial health able rescue princess example give dungeon initial health knight must least follow optimal path",
        "label": "binary-search"
    },
    {
        "id": 188,
        "title": "best time to buy and sell stock iv",
        "content": "give integer array price give stock day design algorithm find maximum profit may complete transaction notice may engage multiple transaction simultaneously must sell stock buy",
        "label": "dynamic-programming"
    },
    {
        "id": 198,
        "title": "house robber",
        "content": "professional robber planning rob house along street house certain amount money stash constraint stop rob adjacent house security system connect automatically contact police two adjacent house break night give list non negative integer represent amount money house determine maximum amount money rob tonight without alert police",
        "label": "dynamic-programming"
    },
    {
        "id": 213,
        "title": "house robber ii",
        "content": "professional robber planning rob house along street house certain amount money stash house place arranged circle mean first house neighbor last one meanwhile adjacent house security system connect automatically contact police two adjacent house break night give list non negative integer represent amount money house return maximum amount money rob tonight without alert police",
        "label": "dynamic-programming"
    },
    {
        "id": 221,
        "title": "maximal square",
        "content": "give 2d binary matrix fill 's 's find large square contain 's return area",
        "label": "dynamic-programming"
    },
    {
        "id": 264,
        "title": "ugly number ii",
        "content": "write program find th ugly number ugly number positive number whose prime factor include",
        "label": "dynamic-programming"
    },
    {
        "id": 279,
        "title": "perfect squares",
        "content": "give positive integer find least number perfect square number example sum",
        "label": "breadth-first-search"
    },
    {
        "id": 300,
        "title": "longest increasing subsequence",
        "content": "give integer array return length long strictly increase subsequence subsequence sequence derive array deleting element without change order remain element example subsequence array",
        "label": "binary-search"
    },
    {
        "id": 303,
        "title": "range sum query - immutable",
        "content": "give integer array find sum element index inclusive implement class initialize object integer array return sum element array range inclusive call make",
        "label": "dynamic-programming"
    },
    {
        "id": 304,
        "title": "range sum query 2d - immutable",
        "content": "give 2d matrix matrix find sum element inside rectangle define upper leave corner row1 col1 low right corner row2 col2",
        "label": "dynamic-programming"
    },
    {
        "id": 309,
        "title": "best time to buy and sell stock with cooldown",
        "content": "say array element price give stock day design algorithm find maximum profit may complete many transaction like ie buy one sell one share stock multiple time follow restriction may engage multiple transaction time ie must sell stock buy sell stock buy stock next day ie cooldown day",
        "label": "dynamic-programming"
    },
    {
        "id": 312,
        "title": "burst balloons",
        "content": "give balloon index balloon paint number represent array ask burst balloon burst balloon get coin adjacent index burst become adjacent find maximum coin collect burst balloon wisely",
        "label": "dynamic-programming"
    },
    {
        "id": 32,
        "title": "longest valid parentheses",
        "content": "give string contain character find length long valid well form parenthesis substring",
        "label": "dynamic-programming"
    },
    {
        "id": 321,
        "title": "create maximum number",
        "content": "give two array length digit represent two number create maximum number length digits two relative order digit array must preserve return array digit",
        "label": "greedy"
    },
    {
        "id": 322,
        "title": "coin change",
        "content": "give coin different denomination total amount money amount write function compute few number coin need make amount amount money make combination coin return may assume infinite number kind coin",
        "label": "dynamic-programming"
    },
    {
        "id": 337,
        "title": "house robber iii",
        "content": "thief find new place thievery one entrance area call root besides root house one one parent house tour smart thief realize house place form binary tree automatically contact police two directly link house broken night determine maximum amount money thief rob tonight without alert police",
        "label": "depth-first-search"
    },
    {
        "id": 338,
        "title": "counting bits",
        "content": "give non negative integer number num every number range num calculate number 's binary representation return array",
        "label": "dynamic-programming"
    },
    {
        "id": 343,
        "title": "integer break",
        "content": "give positive integer break sum least two positive integer maximize product integer return maximum product get",
        "label": "dynamic-programming"
    },
    {
        "id": 354,
        "title": "russian doll envelopes",
        "content": "number envelope widths height give pair integer one envelope fit another width height one envelope great width height envelope maximum number envelope russian doll put one inside",
        "label": "binary-search"
    },
    {
        "id": 357,
        "title": "count numbers with unique digits",
        "content": "give non negative integer count number unique digit",
        "label": "backtracking"
    },
    {
        "id": 363,
        "title": "max sum of rectangle no larger than k",
        "content": "give non empty 2d matrix matrix integer find max sum rectangle matrix sum large",
        "label": "binary-search"
    },
    {
        "id": 368,
        "title": "largest divisible subset",
        "content": "give set distinct positive integer find large subset every pair si sj element subset satisfy si sj sj si multiple solution return subset fine",
        "label": "dynamic-programming"
    },
    {
        "id": 375,
        "title": "guess number higher or lower ii",
        "content": "play guess game game work follow pick number guess number guess right number win game guess wrong number tell whether number pick high low continue guess every time guess wrong number pay dollar run money lose game give particular return minimum amount money need guarantee win regardless number pick",
        "label": "dynamic-programming"
    },
    {
        "id": 376,
        "title": "wiggle subsequence",
        "content": "sequence number call wiggle sequence difference successive number strictly alternate positive negative first difference one exist may either positive negative sequence few two element trivially wiggle sequence example wiggle sequence difference alternately positive negative contrast wiggle sequence first first two difference positive second last difference zero give sequence integer return length long subsequence wiggle sequence subsequence obtain delete number element eventually also zero original sequence leave remain element original order",
        "label": "greedy"
    },
    {
        "id": 377,
        "title": "combination sum iv",
        "content": "give integer array positive number duplicate find number possible combination add positive integer target",
        "label": "dynamic-programming"
    },
    {
        "id": 392,
        "title": "is subsequence",
        "content": "give string string check subsequence subsequence string new string form original string delete none character without disturb relative position remain character ie subsequence",
        "label": "binary-search"
    },
    {
        "id": 403,
        "title": "frog jump",
        "content": "frog cross river river divide unit unit may may exist stone frog jump stone must jump water give list stone position unit sort ascend order determine frog able cross river land last stone initially frog first stone assume first jump must unit frog 's last jump unit next jump must either unit note frog jump forward direction",
        "label": "dynamic-programming"
    },
    {
        "id": 410,
        "title": "split array largest sum",
        "content": "give array consist non negative integer integer split array non empty continuous subarrays write algorithm minimize large sum among subarrays",
        "label": "binary-search"
    },
    {
        "id": 413,
        "title": "arithmetic slices",
        "content": "sequence number call arithmetic consist least three element difference two consecutive element example arithmetic sequence follow sequence arithmetic zero indexed array consist number give slice array pair integer slice array call arithmetic sequence arithmetic particular mean function return number arithmetic slice array",
        "label": "dynamic-programming"
    },
    {
        "id": 416,
        "title": "partition equal subset sum",
        "content": "give non empty array contain positive integer find array partition two subset sum element subset equal",
        "label": "dynamic-programming"
    },
    {
        "id": 44,
        "title": "wildcard matching",
        "content": "give input string pattern implement wildcard pattern match support match single character match sequence character include empty sequence match cover entire input string partial contain lowercase english letter contain lowercase english letter",
        "label": "backtracking"
    },
    {
        "id": 446,
        "title": "arithmetic slices ii - subsequence",
        "content": "sequence number call arithmetic consist least three element difference two consecutive element example arithmetic sequence follow sequence arithmetic zero indexed array consist number give subsequence slice array sequence integer p0 p1 pk p0 p1 pk subsequence slice p0 p1 pk array call arithmetic sequence p0 p1 pk pk arithmetic particular mean function return number arithmetic subsequence slice array input contain integer every integer range output guarantee less",
        "label": "dynamic-programming"
    },
    {
        "id": 464,
        "title": "can i win",
        "content": "game two player take turn add run total integer player first cause run total reach exceed win change game player use integer example two player might take turn draw common pool number without replacement reach total give two integer maxchoosableinteger desiredtotal return first player move force win otherwise return assume player play optimally",
        "label": "dynamic-programming"
    },
    {
        "id": 466,
        "title": "count the repetitions",
        "content": "define string consist connect string example abcabcabc hand define string s1 obtain string s2 remove character s2 become s1 example abc obtain abdbec base definition obtain acbbe give two non empty string s1 s2 character long two integer n1 n2 consider string s1 s2 find maximum integer obtain",
        "label": "dynamic-programming"
    },
    {
        "id": 467,
        "title": "unique substrings in wraparound string",
        "content": "consider string infinite wraparound string abcdefghijklmnopqrstuvwxyz look like zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd another string job find many unique non empty substring present particular input string need output number different non empty substring string",
        "label": "dynamic-programming"
    },
    {
        "id": 472,
        "title": "concatenated words",
        "content": "give list word without duplicate please write program return concatenate word give list word concatenate word define string comprise entirely least two short word give array",
        "label": "depth-first-search"
    },
    {
        "id": 474,
        "title": "ones and zeroes",
        "content": "give array binary string two integer return size large subset 's 's subset set subset set element also element consist digit",
        "label": "dynamic-programming"
    },
    {
        "id": 486,
        "title": "predict the winner",
        "content": "give array score non negative integer player pick one number either end array follow player player time player pick number number available next player continue score choose player maximum score win give array score predict whether player winner assume player play maximize score length array score give array non negative integer exceed score player equal player still winner",
        "label": "dynamic-programming"
    },
    {
        "id": 494,
        "title": "target sum",
        "content": "give list non negative integer a1 a2 target symbol integer choose one new symbol find many way assign symbol make sum integer equal target length give array positive exceed sum element give array exceed output answer guarantee fitted bit integer",
        "label": "depth-first-search"
    },
    {
        "id": 5,
        "title": "longest palindromic substring",
        "content": "give string return long palindromic substring consist digit english letter low case upper case",
        "label": "dynamic-programming"
    },
    {
        "id": 514,
        "title": "freedom trail",
        "content": "video game fallout quest road freedom require player reach metal dial call freedom trail ring use dial spell specific keyword order open door give string ring represent code engrave outer ring another string key represent keyword need spell need find minimum number step order spell character keyword initially first character ring align direction need spell character string key one one rotate ring clockwise anticlockwise make character string key align direction press center button stage rotate ring spell key character key rotate ring clockwise anticlockwise one place count step final purpose rotation align one string ring 's character direction character must equal character key character key align direction need press center button spell also count step pressing could begin spell next character key next stage otherwise 've finish spelling",
        "label": "depth-first-search"
    },
    {
        "id": 516,
        "title": "longest palindromic subsequence",
        "content": "give string find long palindromic subsequence 's length may assume maximum length output one possible long palindromic subsequence bbbb output one possible long palindromic subsequence bb consist lowercase english letter",
        "label": "dynamic-programming"
    },
    {
        "id": 517,
        "title": "super washing machines",
        "content": "super wash machine line initially wash machine dress empty move could choose wash machine pass one dress wash machine one adjacent wash machine time give integer array represent number dress wash machine leave right line find minimum number move make wash machine number dress possible return example1 example2 example3",
        "label": "dynamic-programming"
    },
    {
        "id": 523,
        "title": "continuous subarray sum",
        "content": "give list non negative number target integer write function check array continuous subarray size least sums multiple sum also integer length array wo n't exceed may assume sum number range sign bit integer",
        "label": "dynamic-programming"
    },
    {
        "id": 53,
        "title": "maximum subarray",
        "content": "give integer array find contiguous subarray contain least one number large sum return sum",
        "label": "dynamic-programming"
    },
    {
        "id": 546,
        "title": "remove boxes",
        "content": "give several box different color represent different positive number may experience several round remove box box leave time choose continuous box color compose box remove get point find maximum point get",
        "label": "depth-first-search"
    },
    {
        "id": 552,
        "title": "student attendance record ii",
        "content": "give positive integer return number possible attendance record length regard rewardable answer may large return mod student attendance record string contain follow three character absent late present record regard rewardable n't contain one absent two continuous late",
        "label": "dynamic-programming"
    },
    {
        "id": 576,
        "title": "out of boundary paths",
        "content": "grid ball give start coordinate ball move ball adjacent cell cross grid boundary four direction leave right however move time find number path move ball grid boundary answer may large return mod",
        "label": "depth-first-search"
    },
    {
        "id": 600,
        "title": "non-negative integers without consecutive ones",
        "content": "give positive integer find number non negative integer less equal whose binary representation contain consecutive one",
        "label": "dynamic-programming"
    },
    {
        "id": 62,
        "title": "unique paths",
        "content": "robot locate top left corner grid mark 'start diagram robot move either right point time robot try reach bottom right corner grid mark 'finish diagram many possible unique path 's guarantee answer less equal",
        "label": "dynamic-programming"
    },
    {
        "id": 629,
        "title": "k inverse pairs array",
        "content": "give two integer find many different array consist number exactly inverse pair define inverse pair follow element array 's inverse pair otherwise 's since answer may large answer modulo",
        "label": "dynamic-programming"
    },
    {
        "id": 63,
        "title": "unique paths ii",
        "content": "robot locate top left corner grid mark 'start diagram robot move either right point time robot try reach bottom right corner grid mark 'finish diagram consider obstacle add grid many unique path would obstacle space mark respectively grid",
        "label": "dynamic-programming"
    },
    {
        "id": 638,
        "title": "shopping offers",
        "content": "leetcode store kinds item sell item price however special offer special offer consist one different kind item sale price give item 's price set special offer number need buy item job output low price pay exactly certain item give could make optimal use special offer special offer represent form array last number represent price need pay special offer number represent many specific item could get buy offer could use special offer many time want",
        "label": "depth-first-search"
    },
    {
        "id": 639,
        "title": "decode ways ii",
        "content": "message contain letter encode number use follow map way beyond encoded string also contain character treat one number give encoded message contain digit character return total number way decode also since answer may large return output mod",
        "label": "dynamic-programming"
    },
    {
        "id": 64,
        "title": "minimum path sum",
        "content": "give fill non negative number find path top leave bottom right minimize sum number along path",
        "label": "dynamic-programming"
    },
    {
        "id": 646,
        "title": "maximum length of pair chain",
        "content": "give pair number every pair first number always small second number define pair follow another pair chain pair form fashion give set pair find length long chain form need n't use give pair select pair order",
        "label": "dynamic-programming"
    },
    {
        "id": 647,
        "title": "palindromic substrings",
        "content": "give string task count many palindromic substring string substring different start index end index count different substring even consist character",
        "label": "dynamic-programming"
    },
    {
        "id": 650,
        "title": "2 keys keyboard",
        "content": "initially notepad one character present perform two operation notepad step copy character present notepad partial copy allow paste character copy last time give number get exactly notepad perform minimum number step permit output minimum number step get",
        "label": "dynamic-programming"
    },
    {
        "id": 664,
        "title": "strange printer",
        "content": "strange printer follow two special requirement printer print sequence character time turn printer print new character start end place cover original exist character give string consist low english letter job count minimum number turn printer need order print hint length give string exceed",
        "label": "depth-first-search"
    },
    {
        "id": 673,
        "title": "number of longest increasing subsequence",
        "content": "give integer array return number long increase subsequence notice sequence strictly increase",
        "label": "dynamic-programming"
    },
    {
        "id": 688,
        "title": "knight probability in chessboard",
        "content": "chessboard knight start th row th column attempt make exactly move row columns indexed top left square bottom right square chess knight possible move make illustrated move two square cardinal direction one square orthogonal direction time knight move choose one eight possible move uniformly random even piece would go chessboard move knight continue move make exactly move move chessboard return probability knight remain board stop move",
        "label": "dynamic-programming"
    },
    {
        "id": 689,
        "title": "maximum sum of 3 non-overlapping subarrays",
        "content": "give array positive integer find three non overlap subarrays maximum sum subarray size want maximize sum entry return result list index represent start position interval indexed multiple answer return lexicographically small one",
        "label": "dynamic-programming"
    },
    {
        "id": 691,
        "title": "stickers to spell word",
        "content": "give different type sticker sticker lowercase english word would like spell give string cut individual letter collection sticker rearrange use sticker want infinite quantity sticker minimum number sticker need spell task impossible return input output explanation input output explanation",
        "label": "backtracking"
    },
    {
        "id": 698,
        "title": "partition to k equal sum subsets",
        "content": "give array integer positive integer find whether 's possible divide array non empty subset whose sum equal",
        "label": "dynamic-programming"
    },
    {
        "id": 70,
        "title": "climbing stairs",
        "content": "climb staircase take step reach top time either climb step many distinct way climb top",
        "label": "dynamic-programming"
    },
    {
        "id": 712,
        "title": "minimum ascii delete sum for two strings",
        "content": "give two string find low ascii sum delete character make two string equal",
        "label": "dynamic-programming"
    },
    {
        "id": 714,
        "title": "best time to buy and sell stock with transaction fee",
        "content": "give array integer th element price give stock day non negative integer represent transaction fee may complete many transaction like need pay transaction fee transaction may buy share stock time ie must sell stock share buy return maximum profit make",
        "label": "greedy"
    },
    {
        "id": 718,
        "title": "maximum length of repeated subarray",
        "content": "give two integer array return maximum length subarray appear array",
        "label": "binary-search"
    },
    {
        "id": 72,
        "title": "edit distance",
        "content": "give two string return minimum number operation require convert follow three operation permit word insert character delete character replace character consist lowercase english letter",
        "label": "dynamic-programming"
    },
    {
        "id": 730,
        "title": "count different palindromic subsequences",
        "content": "give string find number different non empty palindromic subsequence return number modulo subsequence string obtain delete character sequence palindromic equal sequence reverse two sequence different",
        "label": "dynamic-programming"
    },
    {
        "id": 740,
        "title": "delete and earn",
        "content": "give array integer perform operation array operation pick delete earn point must delete every element equal start point return maximum number point earn apply operation",
        "label": "dynamic-programming"
    },
    {
        "id": 741,
        "title": "cherry pickup",
        "content": "represent field cherry cell one three possible integer mean cell empty pas mean cell contain cherry pick pas mean cell contain thorn block way task collect maximum number cherry possible follow rule start position reach move right valid path cell cell value reach return move leave valid path cell pass path cell contain cherry pick cell become empty cell valid path cherry collect",
        "label": "dynamic-programming"
    },
    {
        "id": 746,
        "title": "min cost climbing stairs",
        "content": "staircase th step non negative cost assign indexed pay cost either climb one two step need find minimum cost reach top floor either start step index step index",
        "label": "dynamic-programming"
    },
    {
        "id": 764,
        "title": "largest plus sign",
        "content": "2d every cell contain except cell give list large axis align plus sign contain grid return order plus sign none return axis align plus sign order center along arm length go leave right make demonstrate diagram note could 0s beyond arm plus sign relevant area plus sign check example axis align plus sign order",
        "label": "dynamic-programming"
    },
    {
        "id": 787,
        "title": "cheapest flights within k stops",
        "content": "city connect flight flight start city arrive price give city flight together start city destination task find cheap price stop route output number node range node label size range format flight price flight range range duplicate flight self cycle",
        "label": "breadth-first-search"
    },
    {
        "id": 790,
        "title": "domino and tromino tiling",
        "content": "two type tile 2x1 domino shape tromino shape shape may rotate give many way tile board return answer modulo tile every square must cover tile two tiling different two directionally adjacent cell board exactly one tiling square occupied tile",
        "label": "dynamic-programming"
    },
    {
        "id": 799,
        "title": "champagne tower",
        "content": "stack glass pyramid first row glass second row glass row glass hold one cup champagne champagne pour first glass top topmost glass full excess liquid pour fall equally glass immediately leave right glass become full excess champagne fall equally leave right glass glass bottom row excess champagne fall floor example one cup champagne pour top glass full two cup champagne pour two glass second row half full three cup champagne pour two cup become full full glass total four cup champagne pour third row middle glass half full two outside glass quarter full picture pour non negative integer cup champagne return full glass row index",
        "label": "dynamic-programming"
    },
    {
        "id": 801,
        "title": "minimum swaps to make sequences increasing",
        "content": "two integer sequence non zero length allow swap element note element index position respective sequence end number swap strictly increase sequence strictly increase give return minimum number swap make sequence strictly increase guarantee give input always make possible",
        "label": "dynamic-programming"
    },
    {
        "id": 808,
        "title": "soup servings",
        "content": "two type soup type type initially ml type soup four kind operation serve ml soup ml soup serve ml soup ml soup serve ml soup ml soup serve ml soup ml soup serve soup give someone longer turn choose four operation equal probability remain volume soup enough complete operation serve much stop longer quantity type soup note operation ml 's soup use first return probability soup empty first plus half probability become empty time",
        "label": "dynamic-programming"
    },
    {
        "id": 813,
        "title": "largest sum of averages",
        "content": "partition row number adjacent non empty group score sum average group large score achieve note partition must use every number score necessarily integer",
        "label": "dynamic-programming"
    },
    {
        "id": 818,
        "title": "race car",
        "content": "car start position speed infinite number line car go negative position car drive automatically accord sequence instruction accelerate reverse get instruction car follow get instruction car follow speed positive otherwise position stay example command aar car go position speed go target position say length short sequence instruction get",
        "label": "dynamic-programming"
    },
    {
        "id": 837,
        "title": "new 21 game",
        "content": "alice play follow game loosely base card game alice start point draws number less point draw gain integer number point randomly range integer draw independent outcome equal probability alice stop draw number get point probability less point",
        "label": "dynamic-programming"
    },
    {
        "id": 838,
        "title": "push dominoes",
        "content": "domino line place domino vertically upright begin simultaneously push domino either leave right second domino fall leave push adjacent domino leave similarly domino fall right push adjacent domino stand right vertical domino domino fall side stay still due balance force purpose question consider fall domino expend additional force fall already fall domino give string represent initial state th domino push leave th domino push right th domino push return string represent final state",
        "label": "two-pointers"
    },
    {
        "id": 847,
        "title": "shortest path visiting all nodes",
        "content": "undirected connect graph node label give list exactly nodes connect return length short path visit every node may start stop node may revisit node multiple time may reuse edge",
        "label": "breadth-first-search"
    },
    {
        "id": 85,
        "title": "maximal rectangle",
        "content": "give binary fill 's 's find large rectangle contain 's return area",
        "label": "stack"
    },
    {
        "id": 87,
        "title": "scramble string",
        "content": "scramble string get string use follow algorithm length string stop length string follow split string two non empty substring random index string divide randomly decide swap two substring keep order step may become apply step recursively two substring give two string length return scramble string otherwise return consist low case english letter",
        "label": "dynamic-programming"
    },
    {
        "id": 871,
        "title": "minimum number of refueling stops",
        "content": "car travel start position destination mile east start position along way gas station represent gas station mile east start position liter gas car start infinite tank gas initially liters fuel us liter gas per mile drive car reach gas station may stop refuel transfer gas station car least number refuel stops car must make order reach destination reach destination return note car reach gas station fuel leave car still refuel car reach destination fuel leave still consider arrive",
        "label": "dynamic-programming"
    },
    {
        "id": 873,
        "title": "length of longest fibonacci subsequence",
        "content": "sequence fibonacci like give strictly increase array positive integer form sequence find length long fibonacci like subsequence one exist return recall subsequence derive another sequence delete number element include none without change order remain element example subsequence",
        "label": "dynamic-programming"
    },
    {
        "id": 877,
        "title": "stone game",
        "content": "alex lee play game pile stone even number pile arrange row pile positive integer number stone objective game end stone total number stone odd tie alex lee take turn alex start first turn player take entire pile stone either begin end row continue pile leave point person stone win assume alex lee play optimally return alex win game even odd",
        "label": "dynamic-programming"
    },
    {
        "id": 879,
        "title": "profitable schemes",
        "content": "group member list various crime could commit crime generate require member participate member participate one crime member ca n't participate another crime let 's call profitable scheme subset crime generate least profit total number member participate subset crime many scheme choose since answer may large return modulo",
        "label": "dynamic-programming"
    },
    {
        "id": 887,
        "title": "super egg drop",
        "content": "give egg access building floor egg identical function egg break drop know exist floor egg drop floor high break egg drop floor break move may take egg unbroken one drop floor goal know certainty value minimum number move need know certainty regardless initial value",
        "label": "binary-search"
    },
    {
        "id": 898,
        "title": "bitwise ors of subarrays",
        "content": "array non negative integer every contiguous subarray take bitwise element obtain result return number possible result result occur counted final answer",
        "label": "dynamic-programming"
    },
    {
        "id": 902,
        "title": "numbers at most n given digit set",
        "content": "give array write number use many time want example may write number return number positive integer generate less equal give integer digit value unique",
        "label": "dynamic-programming"
    },
    {
        "id": 903,
        "title": "valid permutations for di sequence",
        "content": "give length string character set letter stand decrease increase valid permutation permutation integer many valid permutation since answer may large return answer modulo",
        "label": "dynamic-programming"
    },
    {
        "id": 91,
        "title": "decode ways",
        "content": "message contain letter encode number use follow map give non empty string contain digit determine total number way decode answer guarantee fit bit integer contain digit may contain lead zero",
        "label": "dynamic-programming"
    },
    {
        "id": 920,
        "title": "number of music playlists",
        "content": "music player contain different song want listen necessarily different song trip create playlist every song play least song played song play return number possible playlist answer large return modulo",
        "label": "dynamic-programming"
    },
    {
        "id": 931,
        "title": "minimum falling path sum",
        "content": "give square array integer want minimum sum fall path fall path start element first row choose one element row next row 's choice must column different previous row 's column one fall path small sum answer",
        "label": "dynamic-programming"
    },
    {
        "id": 935,
        "title": "knight dialer",
        "content": "chess knight unique movement may move two square vertically one square horizontally two square horizontally one square vertically forming shape possible movement chess knight show diagaram chess knight move indicate chess diagram chess knight phone pad show knight stand numeric cell blue cell give integer return many distinct phone number length dial allow place knight numeric cell initially perform jump dial number length jump valid knight jump answer may large return answer modulo",
        "label": "dynamic-programming"
    },
    {
        "id": 940,
        "title": "distinct subsequences ii",
        "content": "give string count number distinct non empty subsequence since result may large return answer modulo",
        "label": "dynamic-programming"
    },
    {
        "id": 943,
        "title": "find the shortest superstring",
        "content": "give array string find small string contain string substring may assume string substring another string",
        "label": "dynamic-programming"
    },
    {
        "id": 95,
        "title": "unique binary search trees ii",
        "content": "give integer generate structurally unique bst 's binary search tree store value",
        "label": "dynamic-programming"
    },
    {
        "id": 956,
        "title": "tallest billboard",
        "content": "instal billboard want large height billboard two steel support one side steel support must equal height collection weld together example rod lengths weld together make support length return large possible height billboard installation support billboard return",
        "label": "dynamic-programming"
    },
    {
        "id": 96,
        "title": "unique binary search trees",
        "content": "give many structurally unique bst 's binary search tree store value",
        "label": "dynamic-programming"
    },
    {
        "id": 960,
        "title": "delete columns to make sorted iii",
        "content": "give array lowercase letter string length may choose set deletion index string delete character index example array deletion indices final array deletion suppose chose set deletion index deletion final array every element row lexicographic order clarity lexicographic order ie lexicographic order ie return minimum possible value",
        "label": "dynamic-programming"
    },
    {
        "id": 964,
        "title": "least operators to express number",
        "content": "give single positive integer write expression form operator etc either addition subtraction multiplication division example might write value write expression adhere follow convention division operator return rational number parenthesis place anywhere use usual order operation multiplication division happen addition subtraction 's allow use unary negation operator example valid expression use subtraction use negation would like write expression least number operator expression equal give return least number operator use",
        "label": "dynamic-programming"
    },
    {
        "id": 968,
        "title": "binary tree cameras",
        "content": "give binary tree install camera node tree camera node monitor parent immediate child calculate minimum number camera need monitor node tree",
        "label": "depth-first-search"
    },
    {
        "id": 97,
        "title": "interleaving string",
        "content": "give string find whether form interleaving interleave two string configuration divide non empty substring interleave",
        "label": "dynamic-programming"
    },
    {
        "id": 975,
        "title": "odd even jump",
        "content": "give integer array start index make series jump 1st 3rd 5th jump series call odd number jump 2nd 4th 6th jump series call even number jump note jump number index may jump forward index index follow way odd number jump jump jump index small possible value multiple index jump small index even numbered jump jump jump index large possible value multiple index jump small index may case index legal jump start index good start index reach end array index jump number time possibly return number good starting index",
        "label": "stack"
    },
    {
        "id": 978,
        "title": "longest turbulent subarray",
        "content": "give integer array return length maximum size turbulent subarray subarray turbulent comparison sign flip adjacent pair element subarray formally subarray say turbulent odd even even odd",
        "label": "dynamic-programming"
    },
    {
        "id": 982,
        "title": "triples with bitwise and equal to zero",
        "content": "give array integer find number triple indices represent bitwise operator",
        "label": "dynamic-programming"
    },
    {
        "id": 983,
        "title": "minimum cost for tickets",
        "content": "country popular train travel plan train travel one year advance day year travel give array day integer train ticket sell different way day pass sell dollar day pas sell dollar day pas sell dollar pass allow many day consecutive travel example get day pas day travel day day return minimum number dollar need travel every day give list",
        "label": "dynamic-programming"
    },
    {
        "id": 100,
        "title": "same tree",
        "content": "give two binary tree write function check two binary tree consider structurally identical node value",
        "label": "depth-first-search"
    },
    {
        "id": 101,
        "title": "symmetric tree",
        "content": "give binary tree check whether mirror ie symmetric around center example binary tree symmetric follow",
        "label": "breadth-first-search"
    },
    {
        "id": 1020,
        "title": "number of enclaves",
        "content": "give 2d array cell represent sea represent land move consist walk one land square directionally another land square boundary grid return number land square grid walk boundary grid number move",
        "label": "depth-first-search"
    },
    {
        "id": 1026,
        "title": "maximum difference between node and ancestor",
        "content": "give binary tree find maximum value exist different node ancestor node ancestor either child equal child ancestor number node tree range",
        "label": "depth-first-search"
    },
    {
        "id": 1028,
        "title": "recover a tree from preorder traversal",
        "content": "run preorder depth first search dfs binary tree node traversal output dash depth node output value node depth node depth immediate child depth node node one child child guarantee leave child give output traversal recover tree return number node original tree range",
        "label": "depth-first-search"
    },
    {
        "id": 1034,
        "title": "coloring a border",
        "content": "give dimensional integer value grid represent color grid square location two square belong connect component color next direction border connect component square connect component either directionally adjacent square component boundary grid first last row column give square location grid color border connect component square give return final",
        "label": "depth-first-search"
    },
    {
        "id": 104,
        "title": "maximum depth of binary tree",
        "content": "give binary tree find maximum depth maximum depth number node along long path root node farthest leaf node",
        "label": "depth-first-search"
    },
    {
        "id": 105,
        "title": "construct binary tree from preorder and inorder traversal",
        "content": "give preorder inorder traversal tree construct binary tree",
        "label": "depth-first-search"
    },
    {
        "id": 106,
        "title": "construct binary tree from inorder and postorder traversal",
        "content": "give inorder postorder traversal tree construct binary tree",
        "label": "depth-first-search"
    },
    {
        "id": 108,
        "title": "convert sorted array to binary search tree",
        "content": "give array element sort ascend order convert height balance bst problem height balance binary tree define binary tree depth two subtrees every node never differ",
        "label": "depth-first-search"
    },
    {
        "id": 1080,
        "title": "insufficient nodes in root to leaf paths",
        "content": "give binary tree consider root leaf path path root leaf leaf node child insufficient every root leaf path intersect sum strictly less delete insufficient node simultaneously return root result binary tree",
        "label": "depth-first-search"
    },
    {
        "id": 109,
        "title": "convert sorted list to binary search tree",
        "content": "give singly link list element sort ascend order convert height balance bst problem height balance binary tree define binary tree depth two subtrees every node never differ number node range",
        "label": "depth-first-search"
    },
    {
        "id": 110,
        "title": "balanced binary tree",
        "content": "give binary tree determine height balance problem height balance binary tree define number node tree range",
        "label": "depth-first-search"
    },
    {
        "id": 111,
        "title": "minimum depth of binary tree",
        "content": "give binary tree find minimum depth minimum depth number node along short path root node near leaf node",
        "label": "breadth-first-search"
    },
    {
        "id": 1110,
        "title": "delete nodes and return forest",
        "content": "give binary tree node tree distinct value delete node value leave forest disjoint union tree return root tree remain forest may return result order number node give tree node distinct value contain distinct value",
        "label": "depth-first-search"
    },
    {
        "id": 112,
        "title": "path sum",
        "content": "give binary tree sum determine tree root leaf path add value along path equal give sum",
        "label": "depth-first-search"
    },
    {
        "id": 1123,
        "title": "lowest common ancestor of deepest leaves",
        "content": "give binary tree return low common ancestor deep leaf recall node binary tree leaf child depth root tree depth node depth child low common ancestor set node node large depth every node subtree root",
        "label": "depth-first-search"
    },
    {
        "id": 113,
        "title": "path sum ii",
        "content": "give binary tree sum find root leaf path path 's sum equal give sum",
        "label": "depth-first-search"
    },
    {
        "id": 114,
        "title": "flatten binary tree to linked list",
        "content": "give binary tree flatten link list place example give follow tree flatten tree look like",
        "label": "depth-first-search"
    },
    {
        "id": 1145,
        "title": "binary tree coloring game",
        "content": "two player play turn base game binary tree give binary tree number node tree odd node distinct value initially first player name value second player name value first player color node value red second player color node value blue player take turn start first player turn player choose node color red player blue player color uncolored neighbor chosen node either leave child right child parent choose node player choose node way must pass turn player pass turn game end winner player color node second player possible choose ensure win game return possible return root binary tree node distinct node value odd",
        "label": "depth-first-search"
    },
    {
        "id": 116,
        "title": "populating next right pointers in each node",
        "content": "give perfect binary tree leaf level every parent two child binary tree follow definition populate next pointer point next right node next right node next pointer set initially next pointer set",
        "label": "breadth-first-search"
    },
    {
        "id": 117,
        "title": "populating next right pointers in each node ii",
        "content": "give binary tree populate next pointer point next right node next right node next pointer set initially next pointer set",
        "label": "depth-first-search"
    },
    {
        "id": 1192,
        "title": "critical connections in a network",
        "content": "server number connect undirected server server form network represent connection server server reach server directly indirectly network critical connection connection remove make server unable reach server return critical connection network order repeat connection",
        "label": "depth-first-search"
    },
    {
        "id": 1203,
        "title": "sort items by groups respecting dependencies",
        "content": "item belong zero one group group th item belong 's equal th item belong group item group zero index group item belong return sort list item item belong group next sorted list relation item list contain item come th item sort array leave th item return solution one solution return empty list solution contain duplicate element",
        "label": "depth-first-search"
    },
    {
        "id": 124,
        "title": "binary tree maximum path sum",
        "content": "give non empty binary tree find maximum path sum problem path define node sequence start node node tree along parent child connection path must contain least one node need go root number node tree range",
        "label": "depth-first-search"
    },
    {
        "id": 1254,
        "title": "number of closed islands",
        "content": "give 2d consist land water island maximal directionally connect group close island island totally leave top right bottom surround return number close island",
        "label": "depth-first-search"
    },
    {
        "id": 129,
        "title": "sum root to leaf numbers",
        "content": "give binary tree contain digit root leaf path could represent number example root leaf path represent number find total sum root leaf number",
        "label": "depth-first-search"
    },
    {
        "id": 130,
        "title": "surrounded regions",
        "content": "give 2d board contain letter capture region surround region capture flip surround region run function board explanation surround region border mean border board flip border connect border flip two cell connect adjacent cell connect horizontally vertically",
        "label": "breadth-first-search"
    },
    {
        "id": 1302,
        "title": "deepest leaves sum",
        "content": "give binary tree return sum value deepest leaf number node tree value node",
        "label": "depth-first-search"
    },
    {
        "id": 1315,
        "title": "sum of nodes with even-valued grandparent",
        "content": "give binary tree return sum value node even value grandparent grandparent node parent parent exist node even value grandparent return number node tree value node",
        "label": "depth-first-search"
    },
    {
        "id": 1319,
        "title": "number of operations to make network connected",
        "content": "computer number connected ethernet cable form network represent connection computer computer reach computer directly indirectly network give initial computer network extract certain cable two directly connect computer place pair disconnected computer make directly connect return minimum number time need order make computer connect 's possible return repeat connection two computer connect one cable",
        "label": "breadth-first-search"
    },
    {
        "id": 133,
        "title": "clone graph",
        "content": "give reference node connect undirected graph return deep copy clone graph node graph contain val list neighbor test case format simplicity sake node 's value node 's index index example first node second node graph represent test case use adjacency list adjacency list collection unordered list use represent finite graph list describe set neighbor node graph give node always first node must return copy give node reference clone graph unique node number node exceed repeat edge self loop graph graph connect node visit start give node",
        "label": "breadth-first-search"
    },
    {
        "id": 1339,
        "title": "maximum product of splitted binary tree",
        "content": "give binary tree split binary tree two subtrees remove edge product sum subtrees maximize since answer may large return modulo tree node least node node 's value",
        "label": "dynamic-programming"
    },
    {
        "id": 1376,
        "title": "time needed to inform all employees",
        "content": "company employee unique id employee head company one employee one direct manager give array direct manager employee also 's guarantee subordination relationship tree structure head company want inform employee company urgent piece news inform direct subordinate inform subordinate employee know urgent news employee need minute inform direct subordinate informtime minute direct subordinate start spread news return number minute need inform employee urgent news employee subordinate guarantee employee inform",
        "label": "depth-first-search"
    },
    {
        "id": 1377,
        "title": "frog position after t seconds",
        "content": "give undirected tree consist vertex number frog start jump vertex one second frog jump current vertex another unvisited vertex directly connect frog jump back visit vertex case frog jump several vertex jump randomly one probability otherwise frog jump unvisited vertex jump forever vertex edge undirected tree give array mean exist edge connect vertex return probability second frog vertex answer within actual value accept correct",
        "label": "depth-first-search"
    },
    {
        "id": 1391,
        "title": "check if there is a valid path in a grid",
        "content": "give cell represent street street mean street connect leave cell right cell mean street connect upper cell lower cell mean street connect leave cell lower cell mean street connect right cell lower cell mean street connect leave cell upper cell mean street connect right cell upper cell initially start street upper leave cell valid path grid path start upper leave cell end bottom right cell path follow street notice allow change street return true valid path grid false otherwise",
        "label": "breadth-first-search"
    },
    {
        "id": 1443,
        "title": "minimum time to collect all apples in a tree",
        "content": "give undirected tree consist vertex number apple vertex spend second walk one edge tree return minimum time second spend collect apple tree start vertex come back vertex edge undirected tree give array mean exist edge connect vertex additionally boolean array mean vertex apple otherwise apple",
        "label": "depth-first-search"
    },
    {
        "id": 1448,
        "title": "count good nodes in binary tree",
        "content": "give binary tree node tree name good path root node value great return number good node binary tree number node binary tree range node 's value",
        "label": "depth-first-search"
    },
    {
        "id": 1457,
        "title": "pseudo-palindromic paths in a binary tree",
        "content": "give binary tree node value digit path binary tree say pseudo palindromic least one permutation node value path palindrome return number pseudo palindromic path go root node leaf node give binary tree node node value digit",
        "label": "depth-first-search"
    },
    {
        "id": 1466,
        "title": "reorder routes to make all paths lead to the city zero",
        "content": "city number road one way travel two different city network form tree last year ministry transport decide orient road one direction narrow road represent represent road city year big event capital city many people want travel city task consist reorient road city visit city return minimum number edge change 's guarantee city reach city reorder",
        "label": "depth-first-search"
    },
    {
        "id": 1489,
        "title": "find critical and pseudo-critical edges in minimum spanning tree",
        "content": "give weight undirected connected graph vertex number array represent bidirectional weight edge node minimum span tree mst subset graph 's edge connect vertex without cycle minimum possible total edge weight find critical pseudo critical edge give graph 's minimum spanning tree mst mst edge whose deletion graph would cause mst weight increase call critical edge hand pseudo critical edge appear mst note return index edge order pair distinct",
        "label": "depth-first-search"
    },
    {
        "id": 1519,
        "title": "number of nodes in the sub-tree with the same label",
        "content": "give tree connect undirected graph cycle consist node number exactly root tree node node tree label low case character give string node number label array give form mean edge node tree return array size number node subtree node label node subtree tree tree consist node descendant node consist low case english letter",
        "label": "breadth-first-search"
    },
    {
        "id": 1530,
        "title": "number of good leaf nodes pairs",
        "content": "give binary tree integer pair two different leaf node binary tree say good length short path less equal return number good leaf node pair tree number node range node 's value",
        "label": "depth-first-search"
    },
    {
        "id": 1559,
        "title": "detect cycles in 2d grid",
        "content": "give 2d array character size need find exists cycle consist value cycle path length grid start end cell give cell move one cell adjacent one four direction leave right value current cell also move cell visit last move example cycle invalid visit last visited cell return cycle value exist otherwise return consist lowercase english letter",
        "label": "depth-first-search"
    },
    {
        "id": 1625,
        "title": "lexicographically smallest string after applying operations",
        "content": "give string even length consist digit two integer apply either follow two operation number time order add odd index index digit post cycle back example become rotate right position example become return lexicographically small string obtain applying operation number time string lexicographically small string length first position differ string letter appear early alphabet correspond letter example lexicographically small first position differ third letter come even consist digit",
        "label": "breadth-first-search"
    },
    {
        "id": 1631,
        "title": "path with minimum effort",
        "content": "hiker prepare upcoming hike give 2d array size represent height cell situate top left cell hope travel bottom right cell indexed move leave right wish find route require minimum effort route 's effort maximum absolute difference height two consecutive cell route return minimum effort require travel top leave cell bottom right cell",
        "label": "binary-search"
    },
    {
        "id": 199,
        "title": "binary tree right side view",
        "content": "give binary tree imagine stand right side return value node see ordered top bottom",
        "label": "breadth-first-search"
    },
    {
        "id": 200,
        "title": "number of islands",
        "content": "give 2d map land water return number island island surround water form connect adjacent land horizontally vertically may assume four edge grid surrounded water",
        "label": "breadth-first-search"
    },
    {
        "id": 207,
        "title": "course schedule",
        "content": "total course take label course may prerequisites example take course first take course express pair give total number course list prerequisite pair possible finish course input prerequisite graph represent list edge adjacency matrix read graph represent may assume duplicate edge input prerequisite",
        "label": "breadth-first-search"
    },
    {
        "id": 210,
        "title": "course schedule ii",
        "content": "total course take label course may example mean must take course course give total number course list pair return order course take finish course many valid answer return impossible finish course return empty array pair distinct",
        "label": "breadth-first-search"
    },
    {
        "id": 257,
        "title": "binary tree paths",
        "content": "give binary tree return root leaf path",
        "label": "depth-first-search"
    },
    {
        "id": 301,
        "title": "remove invalid parentheses",
        "content": "remove minimum number invalid parenthesis order make input string valid return possible result",
        "label": "breadth-first-search"
    },
    {
        "id": 329,
        "title": "longest increasing path in a matrix",
        "content": "give integer matrix find length long increase path cell either move four direction leave right may move diagonally move outside boundary wrap around allow",
        "label": "depth-first-search"
    },
    {
        "id": 332,
        "title": "reconstruct itinerary",
        "content": "give list airline ticket represent pairs departure arrival airport reconstruct itinerary order ticket belong man depart thus itinerary must begin",
        "label": "depth-first-search"
    },
    {
        "id": 337,
        "title": "house robber iii",
        "content": "thief find new place thievery one entrance area call root besides root house one one parent house tour smart thief realize house place form binary tree automatically contact police two directly link house broken night determine maximum amount money thief rob tonight without alert police",
        "label": "dynamic-programming"
    },
    {
        "id": 394,
        "title": "decode string",
        "content": "give encode string return decode string encode rule encoded_string inside square bracket repeat exactly time note guarantee positive integer may assume input string always valid extra white space square bracket well form etc furthermore may assume original data contain digits digit repeat number example wo n't input like consist lowercase english letter digit square bracket guarantee valid input integer range",
        "label": "stack"
    },
    {
        "id": 417,
        "title": "pacific atlantic water flow",
        "content": "give matrix non negative integer represent height unit cell continent pacific ocean touch leave top edge matrix atlantic ocean touch right bottom edge water flow four direction leave right cell another one height equal low find list grid coordinate water flow pacific atlantic ocean",
        "label": "breadth-first-search"
    },
    {
        "id": 430,
        "title": "flatten a multilevel doubly linked list",
        "content": "give doubly link list addition next previous pointer could child pointer may may point separate doubly link list child list may one child produce multilevel data structure show example flatten list node appear single level doubly link list give head first level list multilevel link list represent test case use multilevel link list example serialization level follow serialize level together add null level signify node connect upper node previous level serialization become merge serialization level remove trail null obtain number node exceed",
        "label": "depth-first-search"
    },
    {
        "id": 472,
        "title": "concatenated words",
        "content": "give list word without duplicate please write program return concatenate word give list word concatenate word define string comprise entirely least two short word give array",
        "label": "dynamic-programming"
    },
    {
        "id": 473,
        "title": "matchsticks to square",
        "content": "remember story little match girl know exactly matchsticks little match girl please find way make one square use matchstick break stick link matchstick must use exactly one time input several matchstick girl represent stick length output either true false represent whether could make one square use matchstick little match girl",
        "label": "depth-first-search"
    },
    {
        "id": 488,
        "title": "zuma game",
        "content": "think zuma game row ball table color red yellow blue green white also several ball hand time may choose ball hand insert row include leftmost place rightmost place group ball color touch remove ball keep ball remove find minimal ball insert remove ball table remove ball output may assume initial row ball table consecutive ball color input string non empty contain character",
        "label": "depth-first-search"
    },
    {
        "id": 491,
        "title": "increasing subsequences",
        "content": "give integer array task find different possible increase subsequence give array length increase subsequence least length give array exceed range integer give array give array may contain duplicate two equal integer also consider special case increase sequence",
        "label": "depth-first-search"
    },
    {
        "id": 494,
        "title": "target sum",
        "content": "give list non negative integer a1 a2 target symbol integer choose one new symbol find many way assign symbol make sum integer equal target length give array positive exceed sum element give array exceed output answer guarantee fitted bit integer",
        "label": "dynamic-programming"
    },
    {
        "id": 513,
        "title": "find bottom left tree value",
        "content": "give binary tree find leftmost value last row tree",
        "label": "breadth-first-search"
    },
    {
        "id": 514,
        "title": "freedom trail",
        "content": "video game fallout quest road freedom require player reach metal dial call freedom trail ring use dial spell specific keyword order open door give string ring represent code engrave outer ring another string key represent keyword need spell need find minimum number step order spell character keyword initially first character ring align direction need spell character string key one one rotate ring clockwise anticlockwise make character string key align direction press center button stage rotate ring spell key character key rotate ring clockwise anticlockwise one place count step final purpose rotation align one string ring 's character direction character must equal character key character key align direction need press center button spell also count step pressing could begin spell next character key next stage otherwise 've finish spelling",
        "label": "dynamic-programming"
    },
    {
        "id": 515,
        "title": "find largest value in each tree row",
        "content": "give binary tree return array large value row tree indexed number node tree range",
        "label": "breadth-first-search"
    },
    {
        "id": 529,
        "title": "minesweeper",
        "content": "let 's play minesweeper game wikipedia online game give 2d char matrix represent game board 'm represent unrevealed mine represent unrevealed empty square represent reveal blank square adjacent leave right diagonal mine digit represent many mine adjacent reveal square finally represent revealed mine give next click position row column index among unrevealed square 'm return board reveal position accord follow rule mine 'm revealed game change empty square adjacent mine reveal change reveal blank adjacent unrevealed square reveal recursively empty square least one adjacent mine reveal change digit represent number adjacent mine return board square reveal",
        "label": "breadth-first-search"
    },
    {
        "id": 542,
        "title": "01 matrix",
        "content": "give matrix consist find distance near cell distance two adjacent cell",
        "label": "breadth-first-search"
    },
    {
        "id": 546,
        "title": "remove boxes",
        "content": "give several box different color represent different positive number may experience several round remove box box leave time choose continuous box color compose box remove get point find maximum point get",
        "label": "dynamic-programming"
    },
    {
        "id": 547,
        "title": "friend circles",
        "content": "student class friend friendship transitive nature example direct friend direct friend indirect friend define friend circle group student direct indirect friend give matrix represent friend relationship student class ith jth student direct friend otherwise output total number friend circle among student",
        "label": "depth-first-search"
    },
    {
        "id": 559,
        "title": "maximum depth of n-ary tree",
        "content": "give ary tree find maximum depth maximum depth number node along long path root node farthest leaf node nary tree input serialization represent level order traversal group child separate null value see example depth ary tree less equal total number node",
        "label": "breadth-first-search"
    },
    {
        "id": 563,
        "title": "binary tree tilt",
        "content": "give binary tree return sum every tree node 's tilt tilt tree node absolute difference sum leave subtree node value right subtree node value node leave child sum leave subtree node value treat rule similar node right child number node tree range",
        "label": "depth-first-search"
    },
    {
        "id": 576,
        "title": "out of boundary paths",
        "content": "grid ball give start coordinate ball move ball adjacent cell cross grid boundary four direction leave right however move time find number path move ball grid boundary answer may large return mod",
        "label": "dynamic-programming"
    },
    {
        "id": 638,
        "title": "shopping offers",
        "content": "leetcode store kinds item sell item price however special offer special offer consist one different kind item sale price give item 's price set special offer number need buy item job output low price pay exactly certain item give could make optimal use special offer special offer represent form array last number represent price need pay special offer number represent many specific item could get buy offer could use special offer many time want",
        "label": "dynamic-programming"
    },
    {
        "id": 664,
        "title": "strange printer",
        "content": "strange printer follow two special requirement printer print sequence character time turn printer print new character start end place cover original exist character give string consist low english letter job count minimum number turn printer need order print hint length give string exceed",
        "label": "dynamic-programming"
    },
    {
        "id": 679,
        "title": "24 game",
        "content": "card contain number need judge whether could operate get value",
        "label": "depth-first-search"
    },
    {
        "id": 685,
        "title": "redundant connection ii",
        "content": "problem root tree direct graph exactly one node root node descendant node plus every node exactly one parent except root node parent give input direct graph start root tree node distinct value one additional direct edge add add edge two different vertex choose edge already exist result graph give 2d array element pair represent direct edge connect node parent child return edge remove result graph root tree node multiple answer return answer occurs last give 2d array",
        "label": "depth-first-search"
    },
    {
        "id": 690,
        "title": "employee importance",
        "content": "give data structure employee information include employee 's unique id importance value direct subordinate id example employee leader employee employee leader employee importance value respectively employee data structure like employee employee note although employee also subordinate employee relationship direct give employee information company employee id need return total importance value employee subordinate",
        "label": "breadth-first-search"
    },
    {
        "id": 695,
        "title": "max area of island",
        "content": "give non empty 2d array 's 's island group 's represent land connect directionally horizontal vertical may assume four edge grid surrounded water find maximum area island give 2d array island maximum area give grid return note answer island must connect directionally give grid return",
        "label": "depth-first-search"
    },
    {
        "id": 721,
        "title": "accounts merge",
        "content": "give list element list string first element name rest element email represent email account would like merge account two account definitely belong person email common account note even two account name may belong different people people could name person number account initially account definitely name merge account return account follow format first element account name rest element emails sort order account return order",
        "label": "depth-first-search"
    },
    {
        "id": 733,
        "title": "flood fill",
        "content": "represent array integer integer represent pixel value image give coordinate represent start pixel row column flood fill pixel value flood fill image perform flood fill consider start pixel plus pixel connect directionally start pixel color start pixel plus pixel connect directionally pixel also color start pixel replace color aforementioned pixel newcolor end return modify image",
        "label": "depth-first-search"
    },
    {
        "id": 743,
        "title": "network delay time",
        "content": "network node label give list travel time direct edge source node target node time take signal travel source target send signal certain node long take node receive signal impossible return",
        "label": "breadth-first-search"
    },
    {
        "id": 749,
        "title": "contain virus",
        "content": "virus spread rapidly task quarantine infect area instal wall world model array cell represent uninfected cell represent cell contaminate virus wall one wall instal two directionally adjacent cell share boundary every night virus spread neighbor cell four direction unless block wall resource limit day install wall around one region affect area continuous block infect cell threaten uninfected cell follow night never tie save day number wall require world become fully infected return number wall use",
        "label": "depth-first-search"
    },
    {
        "id": 753,
        "title": "cracking the safe",
        "content": "box protect password password sequence digit digit one first digit enter password last digit enter automatically match correct password example assume correct password type box open correct password match suffix enter password return password minimum length guarantee open box point enter",
        "label": "depth-first-search"
    },
    {
        "id": 756,
        "title": "pyramid transition matrix",
        "content": "stack block form pyramid block color one letter string allow place color block top two adjacent block color allow triple start bottom row represent single string also start list allow triple allow triple represent string length return true build pyramid way top otherwise false string length range length range letter string choose set",
        "label": "depth-first-search"
    },
    {
        "id": 778,
        "title": "swim in rising water",
        "content": "square represent elevation point rain start fall time depth water everywhere swim square another directionally adjacent square elevation square individually swim infinite distance zero time course must stay within boundary grid swim start top left square least time reach bottom right square",
        "label": "binary-search"
    },
    {
        "id": 785,
        "title": "is graph bipartite?",
        "content": "give undirected return bipartite recall graph bipartite split set node two independent subset every edge graph one node another node graph give follow form list index edge node exist node integer self edge parallel edge contain n't contain element twice value unique graph guarantee undirected",
        "label": "breadth-first-search"
    },
    {
        "id": 797,
        "title": "all paths from source to target",
        "content": "give direct acyclic graph dag node label find possible paths node node return order graph give follow list node visit node direct edge node node self loop input graph guarantee dag",
        "label": "backtracking"
    },
    {
        "id": 802,
        "title": "find eventual safe states",
        "content": "direct graph start node every turn walk along direct edge graph reach node terminal outgoing direct edge stop say start node eventually safe must eventually walk terminal node specifically exist natural number choice walk must stop terminal node less step node eventually safe return array sort order direct graph node label length graph give follow form list label direct edge graph",
        "label": "depth-first-search"
    },
    {
        "id": 827,
        "title": "making a large island",
        "content": "2d grid change one size large island island directionally connect group",
        "label": "depth-first-search"
    },
    {
        "id": 834,
        "title": "sum of distances in tree",
        "content": "undirected connect tree node label give th edge connect node together return list sum distance node node",
        "label": "depth-first-search"
    },
    {
        "id": 839,
        "title": "similar string groups",
        "content": "two string similar swap two letter different position equal also two string similar equal example similar swap position similar similar together form two connect group similarity notice group even though similar formally group word group similar least one word group give list string every string anagram every string many group consist lowercase letter word length anagram",
        "label": "depth-first-search"
    },
    {
        "id": 841,
        "title": "keys and rooms",
        "content": "room start room room distinct number room may key access next room formally room list key key integer key open room number initially room start lock except room walk back forth room freely return enter every room",
        "label": "depth-first-search"
    },
    {
        "id": 851,
        "title": "loud and rich",
        "content": "group people label person different amount money different level quietness convenience 'll call person label simply person 'll say person definitely money person note may subset valid observation also 'll say person quietness return least quiet person person small value among people definitely equal money person",
        "label": "depth-first-search"
    },
    {
        "id": 863,
        "title": "all nodes distance k in binary tree",
        "content": "give binary tree root node node integer value return list value node distance node answer return order",
        "label": "breadth-first-search"
    },
    {
        "id": 872,
        "title": "leaf-similar trees",
        "content": "consider leaf binary tree leave right order value leave form leaf value sequence example give tree leaf value sequence two binary tree consider leaf similar leaf value sequence return two give tree head node leaf similar number node tree range give tree value range",
        "label": "depth-first-search"
    },
    {
        "id": 886,
        "title": "possible bipartition",
        "content": "give set people number would like split everyone two group size person may dislike people go group formally mean allow put people number group return possible split everyone two group way exist",
        "label": "depth-first-search"
    },
    {
        "id": 897,
        "title": "increasing order search tree",
        "content": "give binary search tree rearrange tree order leftmost node tree root tree every node leave child one right child number node give tree range",
        "label": "depth-first-search"
    },
    {
        "id": 924,
        "title": "minimize malware spread",
        "content": "network node node directly connect another node node initially infect malware whenever two node directly connect least one two node infect malware node infect malware spread malware continue node infect manner suppose final number node infect malware entire network spread malware stop remove one node initial list return node remove would minimize multiple node could remove minimize return node small index note node remove list infect node may still infect later result malware spread",
        "label": "depth-first-search"
    },
    {
        "id": 928,
        "title": "minimize malware spread ii",
        "content": "problem minimize malware spread difference bolded network node node directly connect another node node initially infect malware whenever two node directly connect least one two node infect malware node infect malware spread malware continue node infect manner suppose final number node infect malware entire network spread malware stop remove one node initial list completely remove connection node node return node remove would minimize multiple node could remove minimize return node small index",
        "label": "depth-first-search"
    },
    {
        "id": 934,
        "title": "shortest bridge",
        "content": "give 2d binary array two island island directionally connect group connect may change connect two island together form island return small number must flip guarantee answer least",
        "label": "breadth-first-search"
    },
    {
        "id": 938,
        "title": "range sum of bst",
        "content": "give node binary search tree return sum value node value range number node tree range unique",
        "label": "depth-first-search"
    },
    {
        "id": 947,
        "title": "most stones removed with same row or column",
        "content": "2d plane place stone integer coordinate point coordinate point may one stone move consist remove stone share column row another stone grid large possible number move make",
        "label": "depth-first-search"
    },
    {
        "id": 959,
        "title": "regions cut by slashes",
        "content": "composed square square consist blank space character divide square contiguous region note backslash character escape represent return number region",
        "label": "depth-first-search"
    },
    {
        "id": 967,
        "title": "numbers with same consecutive differences",
        "content": "return non negative integer length absolute difference every two consecutive digit note every number answer must lead zero except number example one leading zero invalid valid may return answer order",
        "label": "breadth-first-search"
    },
    {
        "id": 968,
        "title": "binary tree cameras",
        "content": "give binary tree install camera node tree camera node monitor parent immediate child calculate minimum number camera need monitor node tree",
        "label": "dynamic-programming"
    },
    {
        "id": 971,
        "title": "flip binary tree to match preorder traversal",
        "content": "give binary tree node node different value node binary tree flip swap leave child right child node consider sequence value report preorder traversal start root call sequence value voyage tree recall preorder traversal node mean report current node 's value preorder traverse leave child preorder traverse right child goal flip least number node tree voyage tree match give return list value node flip may return answer order return list",
        "label": "depth-first-search"
    },
    {
        "id": 979,
        "title": "distribute coins in binary tree",
        "content": "give binary tree node tree coin coin total one move may choose two adjacent node move one coin one node another move may parent child child parent return number move require make every node exactly one coin",
        "label": "depth-first-search"
    },
    {
        "id": 98,
        "title": "validate binary search tree",
        "content": "give binary tree determine valid binary search tree bst assume bst define follow leave subtree node contain node key less node 's key right subtree node contain node key great node 's key left right subtrees must also binary search tree",
        "label": "depth-first-search"
    },
    {
        "id": 980,
        "title": "unique paths iii",
        "content": "dimensional type square represent start square exactly one start square represent end square exactly one end square represent empty square walk represent obstacle walk return number directional walk start square end square walk every non obstacle square exactly",
        "label": "backtracking"
    },
    {
        "id": 988,
        "title": "smallest string starting from leaf",
        "content": "give binary tree node value represent letter value represent value represent find lexicographically small string start leaf tree end root reminder shorter prefix string lexicographically small example lexicographically small leaf node node child",
        "label": "depth-first-search"
    },
    {
        "id": 99,
        "title": "recover binary search tree",
        "content": "give binary search tree bst exactly two node tree swap mistake recover tree without change structure",
        "label": "depth-first-search"
    },
    {
        "id": 1,
        "title": "two sum",
        "content": "give array integer integer return index two number add may assume input would exactly one solution may use element twice return answer order one valid answer exist",
        "label": "hash-table"
    },
    {
        "id": 1001,
        "title": "grid illumination",
        "content": "give size cell grid lamp initially turn also give array lamp position indicate lamp turn lamp turn illuminate cell cell row column diagonal finally give query array query determine whether illuminated answer query turn lamp adjacent lamp exist lamp adjacent cell share either side corner return array integer lamp query illuminate lamp",
        "label": "hash-table"
    },
    {
        "id": 1002,
        "title": "find common characters",
        "content": "give array string make lowercase letter return list character show string within list include duplicate example character occur time string time need include character three time final answer may return answer order",
        "label": "hash-table"
    },
    {
        "id": 1044,
        "title": "longest duplicate substring",
        "content": "give string consider duplicate substring contiguous substring occur time occurrence may overlap return duplicate substring long possible length duplicate substring answer",
        "label": "binary-search"
    },
    {
        "id": 1048,
        "title": "longest string chain",
        "content": "give list word word consist english lowercase letter let 's say predecessor add exactly one letter anywhere make equal example predecessor word chain sequence word predecessor predecessor return long possible length word chain word choose give list consist english lowercase letter",
        "label": "dynamic-programming"
    },
    {
        "id": 1072,
        "title": "flip columns for maximum number of equal rows",
        "content": "give consist may choose number column matrix flip every cell column flip cell change value cell return maximum number row value equal number flip",
        "label": "hash-table"
    },
    {
        "id": 1078,
        "title": "occurrences after bigram",
        "content": "give word consider occurrence form come immediately come immediately occurrence add answer return answer",
        "label": "hash-table"
    },
    {
        "id": 1090,
        "title": "largest values from labels",
        "content": "set item th item value label choose subset item every label number item label return large possible sum subset",
        "label": "greedy"
    },
    {
        "id": 1138,
        "title": "alphabet board path",
        "content": "alphabet board start position correspond character show diagram may make follow move move position one row position exist board move position one row position exist board move position leave one column position exist board move position right one column position exist board add character current position answer position exist board position letter return sequence move make answer equal minimum number move may return path consist english lowercase letter",
        "label": "hash-table"
    },
    {
        "id": 1160,
        "title": "find words that can be formed by characters",
        "content": "give array string string string good form character character use return sum length good string string contain lowercase english letter",
        "label": "hash-table"
    },
    {
        "id": 1178,
        "title": "number of valid words for each puzzle",
        "content": "respect give string valid following condition satisfy contain first letter letter letter example puzzle abcdefg valid word face cabbage baggage invalid word beef n't include base include n't puzzle return array number word give word list valid respect puzzle english lowercase letter n't contain repeated character",
        "label": "hash-table"
    },
    {
        "id": 1189,
        "title": "maximum number of balloons",
        "content": "give string want use character form many instance word balloon possible use character return maximum number instance form consist low case english letter",
        "label": "hash-table"
    },
    {
        "id": 1207,
        "title": "unique number of occurrences",
        "content": "give array integer write function return number occurrences value array unique",
        "label": "hash-table"
    },
    {
        "id": 1224,
        "title": "maximum equal frequency",
        "content": "give array positive integer return long possible length array prefix possible remove exactly one element prefix every number appear number occurrence remove one element remain element 's still consider every appeared number number ocurrences",
        "label": "hash-table"
    },
    {
        "id": 1261,
        "title": "find elements in a contaminated binary tree",
        "content": "give binary tree follow rule binary tree contaminate mean change need first recover binary tree implement class initialize object contamined binary tree need recover first return value exist recover binary tree height binary tree less equal total number node total call",
        "label": "hash-table"
    },
    {
        "id": 1311,
        "title": "get watched videos by your friends",
        "content": "people person unique id give array contain list watch videos list friend respectively person level video watch videos friend level video watch videos friend friend general level video watch videos people shortest path exactly equal give video return list video order frequency increase videos frequency order alphabetically least great contain contain",
        "label": "breadth-first-search"
    },
    {
        "id": 136,
        "title": "single number",
        "content": "give non empty array integer every element appear twice except one find single one",
        "label": "hash-table"
    },
    {
        "id": 1365,
        "title": "how many numbers are smaller than the current number",
        "content": "give array find many number array small count number valid return answer array",
        "label": "hash-table"
    },
    {
        "id": 138,
        "title": "copy list with random pointer",
        "content": "link list give node contain additional random pointer could point node list null return deep copy list link list represent input output list node node represent pair integer represent index node range random pointer point point node null point node link list number node exceed",
        "label": "hash-table"
    },
    {
        "id": 1418,
        "title": "display table of food orders in a restaurant",
        "content": "give array represent order customer do restaurant specifically name customer table customer sit item customer order return restaurant 's display table display table table whose row entry denote many food item table order first column table number remain columns correspond food item alphabetical order first row header whose first column table follow names food item note customer name part table additionally row sort numerically increase order consist lowercase uppercase english letter space character valid integer",
        "label": "hash-table"
    },
    {
        "id": 1487,
        "title": "making file names unique",
        "content": "give array string size create folder file system minute create folder name since two file name enter folder name previously use system suffix addition name form small positive integer obtain name remain unique return array string length actual name system assign folder create consist low case english letter digit round bracket",
        "label": "hash-table"
    },
    {
        "id": 1488,
        "title": "avoid flood in the city",
        "content": "country infinite number lake initially lakes empty rain lake lake become full water rain lake full water flood goal avoid flood lake give integer array mean rain lake mean rain day choose one lake day dry return array lake choose dry day multiple valid answer return impossible avoid flood return empty array notice chose dry full lake become empty chose dry empty lake nothing change see example",
        "label": "hash-table"
    },
    {
        "id": 149,
        "title": "max points on a line",
        "content": "give point 2d plane find maximum number point lie straight line note input type change april please reset default code definition get new method signature",
        "label": "hash-table"
    },
    {
        "id": 1512,
        "title": "number of good pairs",
        "content": "give array integer pair call good return number good pair",
        "label": "hash-table"
    },
    {
        "id": 1539,
        "title": "kth missing positive number",
        "content": "give array positive integer sort strictly increase order integer find positive integer miss array",
        "label": "hash-table"
    },
    {
        "id": 1577,
        "title": "number of ways where square of number is equal to product of two numbers",
        "content": "give two arrays integer return number triplet form type type follow rule type triplet type triplet",
        "label": "hash-table"
    },
    {
        "id": 1590,
        "title": "make sum divisible by p",
        "content": "give array positive integer remove small subarray possibly empty sum remain element divisible allow remove whole array return length small subarray need remove 's impossible subarray define contiguous block element array",
        "label": "binary-search"
    },
    {
        "id": 1638,
        "title": "count substrings that differ by one character",
        "content": "give two string find number way choose non empty substring replace single character different character result substring substring word find number substring differ substring exactly one character example underlined substring differ valid way return number substring satisfy condition substring contiguous sequence character within string consist lowercase english letter",
        "label": "hash-table"
    },
    {
        "id": 166,
        "title": "fraction to recurring decimal",
        "content": "give two integer represent fraction return fraction string format fractional part repeat enclose repeat part parenthesis multiple answer possible return guarantee length answer string less give input",
        "label": "hash-table"
    },
    {
        "id": 18,
        "title": "4sum",
        "content": "give array integer integer element find unique quadruplet array give sum notice solution set must contain duplicate quadruplet",
        "label": "two-pointers"
    },
    {
        "id": 187,
        "title": "repeated dna sequences",
        "content": "dna compose series nucleotide abbreviate example study dna sometimes useful identify repeat sequence within dna write function find letter long sequence substring occur dna molecule",
        "label": "hash-table"
    },
    {
        "id": 202,
        "title": "happy number",
        "content": "write algorithm determine number happy happy number number define follow process start positive integer replace number sum square digits repeat process number equal stay loops endlessly cycle include number process end happy number return true happy number false",
        "label": "hash-table"
    },
    {
        "id": 204,
        "title": "count primes",
        "content": "count number prime number less non negative number",
        "label": "hash-table"
    },
    {
        "id": 205,
        "title": "isomorphic strings",
        "content": "give two string determine isomorphic two string isomorphic character replace get occurrence character must replace another character preserve order character two character may map character character may map",
        "label": "hash-table"
    },
    {
        "id": 217,
        "title": "contains duplicate",
        "content": "give array integer find array contain duplicate function return true value appear least twice array return false every element distinct",
        "label": "hash-table"
    },
    {
        "id": 219,
        "title": "contains duplicate ii",
        "content": "give array integer integer find whether two distinct index array nums nums absolute difference",
        "label": "hash-table"
    },
    {
        "id": 242,
        "title": "valid anagram",
        "content": "give two string write function determine anagram",
        "label": "hash-table"
    },
    {
        "id": 274,
        "title": "h-index",
        "content": "give array citation citation non negative integer researcher write function compute researcher 's index accord definition index wikipedia scientist index paper least citation paper citation",
        "label": "hash-table"
    },
    {
        "id": 290,
        "title": "word pattern",
        "content": "give string find follow pattern follow mean full match bijection letter non empty word contain low case english letter contain low case english letter space contain lead trail space word separate single space",
        "label": "hash-table"
    },
    {
        "id": 299,
        "title": "bulls and cows",
        "content": "play bull cow game friend write secret number ask friend guess number friend make guess provide hint follow info number bull digits guess correct position number cow digit guess secret number locate wrong position specifically non bull digit guess could rearrange become bull give secret number friend 's guess return hint friend 's guess hint format number bull number cow note may contain duplicate digit consist digit",
        "label": "hash-table"
    },
    {
        "id": 3,
        "title": "longest substring without repeating characters",
        "content": "give string find length long substring without repeat character consist english letter digit symbol space",
        "label": "two-pointers"
    },
    {
        "id": 30,
        "title": "substring with concatenation of all words",
        "content": "give string array string length return start index substring concatenation word exactly order without intervene character return answer order consist low case english letter consist low case english letter",
        "label": "two-pointers"
    },
    {
        "id": 336,
        "title": "palindrome pairs",
        "content": "give list unique word return pair distinct index give list concatenation two word palindrome consist low case english letter",
        "label": "hash-table"
    },
    {
        "id": 347,
        "title": "top k frequent elements",
        "content": "give non empty array integer return frequent element",
        "label": "hash-table"
    },
    {
        "id": 349,
        "title": "intersection of two arrays",
        "content": "give two array write function compute intersection",
        "label": "two-pointers"
    },
    {
        "id": 350,
        "title": "intersection of two arrays ii",
        "content": "give two array write function compute intersection",
        "label": "two-pointers"
    },
    {
        "id": 355,
        "title": "design twitter",
        "content": "design simplify version twitter user post tweet follow unfollow another user able see recent tweet user 's news feed design support follow method posttweet userid tweetid compose new tweet getnewsfeed userid retrieve recent tweet id user 's news feed item news feed must post user user follow user tweet must order recent least recent follow followerid followeeid follower follow followee unfollow followerid followeeid follower unfollows followee",
        "label": "hash-table"
    },
    {
        "id": 36,
        "title": "valid sudoku",
        "content": "determine sudoku board valid fill cell need validate accord follow rule row must contain digit without repetition column must contain digit without repetition nine sub box grid must contain digit without repetition",
        "label": "hash-table"
    },
    {
        "id": 37,
        "title": "sudoku solver",
        "content": "write program solve sudoku puzzle fill empty cell sudoku solution must satisfy follow rule digit must occur exactly row digit must occur exactly column digit must occur exactly sub box grid character indicate empty cell digit guarantee input board one solution",
        "label": "backtracking"
    },
    {
        "id": 380,
        "title": "insert delete getrandom o(1)",
        "content": "implement class insert item set present return item present otherwise remove item set present return item present otherwise return random element current set element 's guarantee least one element exist method call element must probability return",
        "label": "hash-table"
    },
    {
        "id": 381,
        "title": "insert delete getrandom o(1) - duplicates allowed",
        "content": "design data structure support follow operation average time",
        "label": "hash-table"
    },
    {
        "id": 387,
        "title": "first unique character in a string",
        "content": "give string find first non repeat character return index n't exist return example",
        "label": "hash-table"
    },
    {
        "id": 389,
        "title": "find the difference",
        "content": "give two string string generate random shuffle string add one letter random position return letter add consist low case english letter",
        "label": "hash-table"
    },
    {
        "id": 409,
        "title": "longest palindrome",
        "content": "give string consist lowercase uppercase letter return length long palindrome build letter letter case sensitive example consider palindrome consits low case upper case english letter",
        "label": "hash-table"
    },
    {
        "id": 438,
        "title": "find all anagrams in a string",
        "content": "give string non empty string find start index 's anagram string consist lowercase english letter length string large order output matter",
        "label": "hash-table"
    },
    {
        "id": 447,
        "title": "number of boomerangs",
        "content": "give plane distinct boomerang tuple point distance equal distance order tuple matter return number boomerang point unique",
        "label": "hash-table"
    },
    {
        "id": 451,
        "title": "sort characters by frequency",
        "content": "give string sort decrease order base frequency character",
        "label": "hash-table"
    },
    {
        "id": 454,
        "title": "4sum ii",
        "content": "give four list integer value compute many tuples zero make problem bit easy length integer range result guaranteed",
        "label": "binary-search"
    },
    {
        "id": 463,
        "title": "island perimeter",
        "content": "give represent map represent land represent water grid cell connect horizontally vertically diagonally completely surrounded water exactly one island one connect land cell island n't lakes meaning water inside n't connected water around island one cell square side length grid rectangular width height n't exceed determine perimeter island",
        "label": "hash-table"
    },
    {
        "id": 49,
        "title": "group anagrams",
        "content": "give array string group anagram together return answer order anagram word phrase form rearrange letter different word phrase typically use original letter exactly consist low case english letter",
        "label": "hash-table"
    },
    {
        "id": 500,
        "title": "keyboard row",
        "content": "give list word return word type use letter alphabet one row 's american keyboard like image",
        "label": "hash-table"
    },
    {
        "id": 508,
        "title": "most frequent subtree sum",
        "content": "give root tree ask find frequent subtree sum subtree sum node define sum node value form subtree root node include node frequent subtree sum value tie return value high frequency order example input return since value happen return order example input return since happen twice however occur",
        "label": "hash-table"
    },
    {
        "id": 525,
        "title": "contiguous array",
        "content": "give binary array find maximum length contiguous subarray equal number",
        "label": "hash-table"
    },
    {
        "id": 535,
        "title": "encode and decode tinyurl",
        "content": "tinyurl url shorten service enter url return short url design method tinyurl service restriction encode decode algorithm work need ensure url encode tiny url tiny url decode original url",
        "label": "hash-table"
    },
    {
        "id": 554,
        "title": "brick wall",
        "content": "brick wall front wall rectangular several row brick brick height different width want draw vertical line top bottom cross least brick brick wall represent list row row list integer represent width brick row leave right line go edge brick brick consider cross need find draw line cross least brick return number cross brick draw line along one two vertical edge wall case line obviously cross brick",
        "label": "hash-table"
    },
    {
        "id": 560,
        "title": "subarray sum equals k",
        "content": "give array integer integer return total number continuous subarrays whose sum equal",
        "label": "hash-table"
    },
    {
        "id": 575,
        "title": "distribute candies",
        "content": "alice candy candy type alice notice started gain weight visit doctor doctor advise alice eat candy always even alice like candy much want eat maximum number different type candy give integer array length return maximum number different type candy eat achieve doctor 's advice even",
        "label": "hash-table"
    },
    {
        "id": 594,
        "title": "longest harmonious subsequence",
        "content": "define harmonious array array difference maximum value minimum value exactly give integer array return length long harmonious subsequence among possible subsequence subsequence array sequence derive array deleting element without change order remain element",
        "label": "hash-table"
    },
    {
        "id": 599,
        "title": "minimum index sum of two lists",
        "content": "suppose andy doris want choose restaurant dinner list favorite restaurant represent string need help find common interest least list index sum choice tie answer output order requirement could assume always exist answer consist space english letter sting unique sting unique",
        "label": "hash-table"
    },
    {
        "id": 609,
        "title": "find duplicate file in system",
        "content": "give list directory info include directory path file content directory need find group duplicate file file system term path group duplicate file consist least two file exactly content single directory info string input list follow format mean file content respectively directory note mean directory root directory output list group duplicate file path group contain file path file content file path string follow format",
        "label": "hash-table"
    },
    {
        "id": 632,
        "title": "smallest range covering elements from k lists",
        "content": "list sort integer non decrease order find small range include least one number list define range small range sort non decrease order",
        "label": "two-pointers"
    },
    {
        "id": 645,
        "title": "set mismatch",
        "content": "set originally contain number unfortunately due data error one number set get duplicated another number set result repetition one number loss another number give array represent data status set error task firstly find number occurs twice find number miss return form array",
        "label": "hash-table"
    },
    {
        "id": 648,
        "title": "replace words",
        "content": "english concept call root follow word form another long word let 's call word successor example root follow successor word form new word give consist many root consist word separate space replace successor sentence root forming successor replace one root replace root short length return replacement consist low case letter consist low case letter space number word range length word range two consecutive word separate exactly one space lead trail space",
        "label": "hash-table"
    },
    {
        "id": 676,
        "title": "implement magic dictionary",
        "content": "design data structure initialized list different word provide string determine change exactly one character string match word data structure implement class initialize object set data structure array distinct string return change exactly one character match string data structure otherwise return consist low case english letter string distinct consist low case english letter call call make",
        "label": "hash-table"
    },
    {
        "id": 690,
        "title": "employee importance",
        "content": "give data structure employee information include employee 's unique id importance value direct subordinate id example employee leader employee employee leader employee importance value respectively employee data structure like employee employee note although employee also subordinate employee relationship direct give employee information company employee id need return total importance value employee subordinate",
        "label": "breadth-first-search"
    },
    {
        "id": 692,
        "title": "top k frequent words",
        "content": "give non empty list word return frequent element answer sort frequency high lowest two word frequency word lower alphabetical order come first",
        "label": "hash-table"
    },
    {
        "id": 705,
        "title": "design hashset",
        "content": "design hashset without use build hash table library specific design include function insert value hashset return whether value exist hashset remove value hashset value exist hashset nothing",
        "label": "hash-table"
    },
    {
        "id": 706,
        "title": "design hashmap",
        "content": "design hashmap without use build hash table library specific design include function insert key value pair hashmap value already exist hashmap update value return value specify key map map contain map key remove map value key map contain map key",
        "label": "hash-table"
    },
    {
        "id": 710,
        "title": "random pick with blacklist",
        "content": "give blacklist contain unique integer write function return uniform random integer optimize minimize call system",
        "label": "binary-search"
    },
    {
        "id": 718,
        "title": "maximum length of repeated subarray",
        "content": "give two integer array return maximum length subarray appear array",
        "label": "binary-search"
    },
    {
        "id": 720,
        "title": "longest word in dictionary",
        "content": "give list string represent english dictionary find long word build one character time word one possible answer return long word small lexicographical order answer return empty string",
        "label": "hash-table"
    },
    {
        "id": 726,
        "title": "number of atoms",
        "content": "give chemical give string return count atom atomic element always start uppercase character zero lowercase letter represent name one digits represent element 's count may follow count great count digit follow example h2o h2o2 possible h1o2 impossible two formula concatenate together produce another formula example h2o2he3mg4 also formula formula place parenthesis count optionally add also formula example h2o2 h2o2 formula give return count element string follow form first name sort order follow count count follow second name sort order follow count count consist english letter digit always valid",
        "label": "stack"
    },
    {
        "id": 739,
        "title": "daily temperatures",
        "content": "give list daily temperature return list day input tell many day would wait warm temperature future day possible put instead example give list temperature output",
        "label": "stack"
    },
    {
        "id": 748,
        "title": "shortest completing word",
        "content": "give string array string find short completing word complete word word contain letter ignore number space treat letter case insensitive letter appear must appear word number time example contain letter ignore case twice possible completing word return short completing word guarantee answer exist multiple short completing word return first one occurs contain digits letter uppercase lowercase space consist low case english letter",
        "label": "hash-table"
    },
    {
        "id": 76,
        "title": "minimum window substring",
        "content": "give two string return minimum window contain character window cover character return empty string note window guarantee always one unique minimum window consist english letter",
        "label": "two-pointers"
    },
    {
        "id": 770,
        "title": "basic calculator iv",
        "content": "give evaluation map give term return list token represent simplified expression expression alternate chunk symbol space separate chunk symbol chunk either expression parentheses variable non negative integer variable string lowercase letter include digit note variable multiple letter note variable never lead coefficient unary operator like expression evaluate usual order bracket first multiplication addition subtraction example answer format output follow term free variable non zero coefficient write free variable within term sort order lexicographically example would never write term like term degree equal number free variable multiply count multiplicity example degree write large degree term answer first break tie lexicographic order ignore leading coefficient term lead coefficient term place directly leave asterisk separate variable exist lead coefficient still print example well format answer term include constant term coefficient include example expression output example",
        "label": "stack"
    },
    {
        "id": 771,
        "title": "jewels and stones",
        "content": "'re give string represent type stone jewel represent stone character type stone want know many stone also jewel letter guarantee distinct character letter letter case sensitive consider different type stone",
        "label": "hash-table"
    },
    {
        "id": 781,
        "title": "rabbits in forest",
        "content": "forest rabbit color subset rabbit possibly tell many rabbit color place array return minimum number rabbit could forest",
        "label": "hash-table"
    },
    {
        "id": 811,
        "title": "subdomain visit count",
        "content": "website domain like discus leetcode com consist various subdomains top level com next level leetcode com low level discus leetcode com visit domain like discus leetcode com also visit parent domain leetcode com com implicitly call count pair domain count represent number visit domain receive follow space follow address example count pair domain might discuss leetcode com give list count pair domain would like list count pair domain format input order explicitly count number visit subdomain",
        "label": "hash-table"
    },
    {
        "id": 85,
        "title": "maximal rectangle",
        "content": "give binary fill 's 's find large rectangle contain 's return area",
        "label": "stack"
    },
    {
        "id": 884,
        "title": "uncommon words from two sentences",
        "content": "give two sentence sentence string space separate word word consist lowercase letter word uncommon appear exactly one sentence appear sentence return list uncommon word may return list order",
        "label": "hash-table"
    },
    {
        "id": 895,
        "title": "maximum frequency stack",
        "content": "implement class simulate operation stack like data structure two function push integer onto stack remove return frequent element stack tie frequent element element close top stack remove return",
        "label": "stack"
    },
    {
        "id": 930,
        "title": "binary subarrays with sum",
        "content": "array many non empty subarrays sum",
        "label": "two-pointers"
    },
    {
        "id": 939,
        "title": "minimum area rectangle",
        "content": "give set point xy plane determine minimum area rectangle form point side parallel ax n't rectangle return",
        "label": "hash-table"
    },
    {
        "id": 94,
        "title": "binary tree inorder traversal",
        "content": "give binary tree return inorder traversal node value number node tree range",
        "label": "stack"
    },
    {
        "id": 953,
        "title": "verifying an alien dictionary",
        "content": "alien language surprisingly also use english lowercase letter possibly different alphabet permutation lowercase letter give sequence write alien language alphabet return give sorted lexicographicaly alien language character english lowercase letter",
        "label": "hash-table"
    },
    {
        "id": 954,
        "title": "array of doubled pairs",
        "content": "give array integer even length return possible reorder every even",
        "label": "hash-table"
    },
    {
        "id": 957,
        "title": "prison cells after n days",
        "content": "prison cell row cell either occupy vacant day whether cell occupy vacant change accord follow rule cell two adjacent neighbor occupy vacant cell become occupy otherwise become vacant note prison row first last cell row ca n't two adjacent neighbor describe current state prison follow way th cell occupy else give initial state prison return state prison day change describe",
        "label": "hash-table"
    },
    {
        "id": 961,
        "title": "n-repeated element in size 2n array",
        "content": "array size unique element exactly one element repeat time return element repeat time",
        "label": "hash-table"
    },
    {
        "id": 966,
        "title": "vowel spellchecker",
        "content": "give want implement spellchecker convert query word correct word give word spell checker handle two category spell mistake capitalization query match word wordlist case insensitive query word return case case wordlist example example example vowel error replace vowel query word vowel individually match word wordlist case insensitive query word return case match wordlist example example match example match addition spell checker operate follow precedence rule query exactly match word wordlist case sensitive return word back query match word capitlization return first match wordlist query match word vowel error return first match wordlist query match wordlist return empty string give return list word correct word",
        "label": "hash-table"
    },
    {
        "id": 970,
        "title": "powerful integers",
        "content": "give two positive integer integer powerful equal integer return list powerful integer value less equal may return answer order answer value occur",
        "label": "hash-table"
    },
    {
        "id": 974,
        "title": "subarray sums divisible by k",
        "content": "give array integer return number contiguous non empty subarrays sum divisible",
        "label": "hash-table"
    },
    {
        "id": 981,
        "title": "time based key-value store",
        "content": "create timebased key value store class support two operation store along give return value call previously multiple value return one large value return empty string",
        "label": "binary-search"
    },
    {
        "id": 987,
        "title": "vertical order traversal of a binary tree",
        "content": "give binary tree return vertical order traversal node value node position leave right child respectively position run vertical line whenever vertical line touch node report value node order top bottom decrease coordinate two node position value node report first value small return list non empty report order coordinate every report list value node",
        "label": "hash-table"
    },
    {
        "id": 992,
        "title": "subarrays with k different integers",
        "content": "give array positive integer call contiguous necessarily distinct subarray good number different integer subarray exactly example different integer return number good subarrays",
        "label": "two-pointers"
    },
    {
        "id": 1005,
        "title": "maximize sum of array after k negations",
        "content": "give array integer must modify array follow way choose replace repeat process time total may choose index multiple time return large possible sum array modify way",
        "label": "greedy"
    },
    {
        "id": 1007,
        "title": "minimum domino rotations for equal row",
        "content": "row domino represent top bottom half domino domino tile two number one half tile may rotate domino swap value return minimum number rotation value value do return",
        "label": "greedy"
    },
    {
        "id": 1029,
        "title": "two city scheduling",
        "content": "company plan interview people give array cost fly person city cost fly person city return minimum cost fly every person city exactly people arrive city even",
        "label": "greedy"
    },
    {
        "id": 1046,
        "title": "last stone weight",
        "content": "collection stone stone positive integer weight turn choose two heavy stone smash together suppose stone weight result smash stone totally destroy stone weight totally destroy stone weight new weight end stone leave return weight stone stone leave",
        "label": "greedy"
    },
    {
        "id": 1053,
        "title": "previous permutation with one swap",
        "content": "give array positive integer necessarily distinct return lexicographically large permutation small make one swap swap exchange position two number do return array",
        "label": "greedy"
    },
    {
        "id": 1081,
        "title": "smallest subsequence of distinct characters",
        "content": "return lexicographically small subsequence contain distinct character exactly",
        "label": "stack"
    },
    {
        "id": 1090,
        "title": "largest values from labels",
        "content": "set item th item value label choose subset item every label number item label return large possible sum subset",
        "label": "hash-table"
    },
    {
        "id": 1094,
        "title": "car pooling",
        "content": "drive vehicle empty seat initially available passenger vehicle drive east ie turn around drive west give list contain information th trip number passenger must pick location pick drop location give number kilometer due east vehicle 's initial location return possible pick drop passenger give trip",
        "label": "greedy"
    },
    {
        "id": 1111,
        "title": "maximum nesting depth of two valid parentheses strings",
        "content": "string valid parenthesis string denoted vps consist character empty string write concatenated vps 's write vps similarly define nest depth vps follow vps 's vps example vps 's nesting depth vps 's give vps split two disjoint subsequence vps 's choose minimum possible value return array length encode choice part else note even though multiple answer may exist may return",
        "label": "binary-search"
    },
    {
        "id": 1217,
        "title": "minimum cost to move chips to the same position",
        "content": "chip position chip need move chip position one step change position chip return minimum cost need move chip position",
        "label": "greedy"
    },
    {
        "id": 122,
        "title": "best time to buy and sell stock ii",
        "content": "say array element price give stock day design algorithm find maximum profit may complete many transaction like buy one sell one share stock multiple time",
        "label": "greedy"
    },
    {
        "id": 1221,
        "title": "split a string in balanced strings",
        "content": "balance string equal quantity character give balance string split maximum amount balance string return maximum amount splitted balanced string",
        "label": "greedy"
    },
    {
        "id": 1247,
        "title": "minimum swaps to make strings equal",
        "content": "give two string equal length consist letter task make two string equal swap two character belong different string mean swap return minimum number swap require make equal return impossible contain",
        "label": "greedy"
    },
    {
        "id": 1253,
        "title": "reconstruct a 2-row binary matrix",
        "content": "give follow detail matrix column row matrix binary matrix mean element matrix sum element th upper row give sum element st low row give sum element th column index give integer array length task reconstruct matrix return integer array one valid solution accept valid solution exist return empty array",
        "label": "greedy"
    },
    {
        "id": 1276,
        "title": "number of burgers with no waste of ingredients",
        "content": "give two integer ingredient different burger follow jumbo burger tomato slice cheese slice small burger tomato slice cheese slice return number remain equal number remain equal possible make remain equal return",
        "label": "greedy"
    },
    {
        "id": 1282,
        "title": "group the people given the group size they belong to",
        "content": "people split unknown number group person label unique id give integer array size group person example person must group size return list group person group size person appear exactly one group every person must group multiple answer return guarantee least one valid solution give input",
        "label": "greedy"
    },
    {
        "id": 1288,
        "title": "remove covered intervals",
        "content": "give list remove interval cover another interval list interval cover interval return number remain interval interval unique",
        "label": "greedy"
    },
    {
        "id": 1296,
        "title": "divide array in sets of k consecutive numbers",
        "content": "give array integer positive integer find whether 's possible divide array set consecutive number return possible otherwise return",
        "label": "greedy"
    },
    {
        "id": 1326,
        "title": "minimum number of taps to open to water a garden",
        "content": "one dimensional garden axis garden start point end point length garden tap locate point garden give integer integer array length indexed mean tap water area open return minimum number tap open water whole garden garden water return",
        "label": "dynamic-programming"
    },
    {
        "id": 1338,
        "title": "reduce array size to the half",
        "content": "give array choose set integer remove occurrence integer array return minimum size set least half integer array remove even",
        "label": "greedy"
    },
    {
        "id": 134,
        "title": "gas station",
        "content": "gas station along circular route amount gas station car unlimited gas tank cost gas travel station next station i+1 begin journey empty tank one gas station return start gas station 's index travel around circuit clockwise direction otherwise return",
        "label": "greedy"
    },
    {
        "id": 135,
        "title": "candy",
        "content": "child stand line child assign rating value give candy child subject follow requirement child must least one candy child higher rating get candy neighbor minimum candy must give",
        "label": "greedy"
    },
    {
        "id": 1353,
        "title": "maximum number of events that can be attended",
        "content": "give array every event start end attend event day notice attend one event time return maximum number event attend",
        "label": "greedy"
    },
    {
        "id": 1354,
        "title": "construct target array with multiple sums",
        "content": "give array integer start array consist 's may perform follow procedure let sum element currently array choose index set value index may repeat procedure many time need return true possible construct array otherwise return false",
        "label": "greedy"
    },
    {
        "id": 1383,
        "title": "maximum performance of a team",
        "content": "engineer number two array represent speed efficiency th engineer respectively return maximum performance team compose engineer since answer huge number return modulo performance team sum engineer speed multiply minimum efficiency among engineer",
        "label": "greedy"
    },
    {
        "id": 1386,
        "title": "cinema seat allocation",
        "content": "cinema row seat number ten seat row label show figure give array contain number seat already reserve example mean seat locate row label already reserve return maximum number four person group assign cinema seat four person group occupy four adjacent seat one single row seat across aisle consider adjacent exceptional case aisle split four person group case aisle split four person group middle mean two people side distinct",
        "label": "greedy"
    },
    {
        "id": 1400,
        "title": "construct k palindrome strings",
        "content": "give string integer construct non empty palindrome string use character return true use character construct palindrome string false otherwise character low case english letter",
        "label": "greedy"
    },
    {
        "id": 1403,
        "title": "minimum subsequence in non-increasing order",
        "content": "give array obtain subsequence array whose sum elements strictly great sum non include element subsequence multiple solution return subsequence minimum size still exist multiple solution return subsequence maximum total sum element subsequence array obtain erase possibly zero element array note solution give constraint guarantee unique also return answer sort non increase order",
        "label": "greedy"
    },
    {
        "id": 1405,
        "title": "longest happy string",
        "content": "string call happy string substring give three integer return string satisfy follow condition happy long possible contain occurrence letter occurrence letter occurrence letter contain letter string return empty string",
        "label": "dynamic-programming"
    },
    {
        "id": 1414,
        "title": "find the minimum number of fibonacci numbers whose sum is k",
        "content": "give integer return minimum number fibonacci number whose sum equal fibonacci number use multiple time fibonacci number define guaranteed give constraint always find fibonacci number sum",
        "label": "greedy"
    },
    {
        "id": 1433,
        "title": "check if a string can break another string",
        "content": "give two string size check permutation string break permutation string vice versa word break vice versa string break string size alphabetical order string consist lowercase english letter",
        "label": "greedy"
    },
    {
        "id": 1497,
        "title": "check if array pairs are divisible by k",
        "content": "give array integer even length integer want divide array exactly pair sum pair divisible return true find way false otherwise even",
        "label": "greedy"
    },
    {
        "id": 1505,
        "title": "minimum possible integer after at most k adjacent swaps on digits",
        "content": "give string represent digit large integer integer allow swap two adjacent digit integer time return minimum integer obtain also string contain digits n't leading zero",
        "label": "greedy"
    },
    {
        "id": 1518,
        "title": "water bottles",
        "content": "give full water bottle exchange empty water bottle one full water bottle operation drink full water bottle turn empty bottle return maximum number water bottle drink",
        "label": "greedy"
    },
    {
        "id": 1520,
        "title": "maximum number of non-overlapping substrings",
        "content": "give string lowercase letter need find maximum number non empty substring meet following condition substring overlap two substring either true substring contain certain character must also contain occurrence find maximum number substring meet condition multiple solution number substring return one minimum total length show exist unique solution minimum total length notice return substring order contain lowercase english letter",
        "label": "greedy"
    },
    {
        "id": 1536,
        "title": "minimum swaps to arrange a binary grid",
        "content": "give binary one step choose two adjacent row grid swap grid say valid cell main diagonal zero return minimum number step need make grid valid grid valid main diagonal grid diagonal start cell end cell",
        "label": "greedy"
    },
    {
        "id": 1540,
        "title": "can convert string in k moves",
        "content": "give two string goal convert move less move choose index index choose previous move shift character index time nothing shift character mean replace next letter alphabet wrap around become shift character mean apply shift operation time remember index pick return 's possible convert move otherwise return contain lowercase english letter",
        "label": "greedy"
    },
    {
        "id": 1558,
        "title": "minimum numbers of function calls to make target array",
        "content": "task form integer array initial array zero size return minimum number function call make answer guarantee fit bit sign integer",
        "label": "greedy"
    },
    {
        "id": 1567,
        "title": "maximum length of subarray with positive product",
        "content": "give array integer find maximum length subarray product element positive subarray array consecutive sequence zero value take array return maximum length subarray positive product",
        "label": "greedy"
    },
    {
        "id": 1568,
        "title": "minimum number of days to disconnect island",
        "content": "give 2d consist land water island maximal directionally horizontal vertical connect group grid say connect exactly one island otherwise say disconnect one day allow change single land cell water cell return minimum number day disconnect grid",
        "label": "greedy"
    },
    {
        "id": 1578,
        "title": "minimum deletion cost to avoid repeating letters",
        "content": "give string array integer cost delete character return minimum cost deletion two identical letter next notice delete chosen character time word delete character cost delete character change contain lowercase english letter",
        "label": "greedy"
    },
    {
        "id": 1585,
        "title": "check if string is transformable with substring sort operations",
        "content": "give two string want transform string string use follow operation number time choose non empty substring sort place character ascend order example apply operation underline substring result return possible transform string string otherwise return substring contiguous sequence character within string contain digit",
        "label": "greedy"
    },
    {
        "id": 1589,
        "title": "maximum sum obtained of any permutation",
        "content": "array integer array request ask sum indexed return maximum total sum request among permutation since answer may large return modulo",
        "label": "greedy"
    },
    {
        "id": 1591,
        "title": "strange printer ii",
        "content": "strange printer follow two special requirement turn printer print solid rectangular pattern single color grid cover exist color rectangle printer use color operation color use give matrix color position grid return possible print matrix otherwise return",
        "label": "greedy"
    },
    {
        "id": 1594,
        "title": "maximum non negative product in a matrix",
        "content": "give matrix initially locate top leave corner step move right matrix among possible path start top left corner end bottom right corner find path maximum non negative product product path product integer grid cell visit along path return maximum non negative product modulo maximum product negative return notice modulo perform get maximum product",
        "label": "dynamic-programming"
    },
    {
        "id": 1599,
        "title": "maximum profit of operating a centennial wheel",
        "content": "operator centennial wheel four gondola gondola room four people ability rotate gondola counterclockwise cost dollar give array length number new customer arrive rotation indexed mean must rotate wheel time customer arrive make customer wait room gondola customer pay dollar board gondola close ground exit gondola reach ground stop wheel time include serve customer decide stop serve customer subsequent rotation free order get customer safely note currently four customer wait wheel four board gondola rest wait next rotation return minimum number rotation need perform maximize profit scenario profit positive return",
        "label": "greedy"
    },
    {
        "id": 1605,
        "title": "find valid matrix given row and column sums",
        "content": "give two array non negative integer sum element row sum element column 2d matrix word know element matrix know sum row column find matrix non negative integer size satisfy requirement return 2d array represent matrix fulfill requirement 's guarantee least one matrix fulfill requirement exist",
        "label": "greedy"
    },
    {
        "id": 1616,
        "title": "split two strings to make palindrome",
        "content": "give two string length choose index split string index split two string split two string check form palindrome split string either allow empty example valid split return possible form palindrome string otherwise return notice denote concatenation string consist lowercase english letter",
        "label": "two-pointers"
    },
    {
        "id": 1620,
        "title": "coordinate with maximum network quality",
        "content": "give array network tower integer denote network tower location quality factor coordinate integral coordinate plane distance two coordinate euclidean distance integer denote maximum distance tower reachable tower reachable distance less equal outside distance signal become garble tower reachable signal quality tower coordinate calculate formula distance tower coordinate network quality coordinate sum signal quality reachable tower return integral coordinate network quality maximum multiple coordinate network quality return lexicographically minimum coordinate",
        "label": "greedy"
    },
    {
        "id": 1632,
        "title": "rank transform of a matrix",
        "content": "give return new matrix rank rank integer represent large element compare element calculate use follow rule rank integer start two element row column rank small possible guarantee unique give rule",
        "label": "greedy"
    },
    {
        "id": 1647,
        "title": "minimum deletions to make character frequencies unique",
        "content": "string call good two different character frequency give string return minimum number character need delete make good frequency character string number time appear string example string frequency frequency contain lowercase english letter",
        "label": "greedy"
    },
    {
        "id": 1648,
        "title": "sell diminishing-valued colored balls",
        "content": "different color ball customer want ball color customer weirdly value color ball color ball 's value number ball color currently example yellow ball customer would pay first yellow ball transaction yellow ball leave next yellow ball value value ball decrease sell customer give integer array represent number ball color initially also give integer represent total number ball customer want sell ball order return maximum total value attain selling color ball answer may large return modulo",
        "label": "greedy"
    },
    {
        "id": 1653,
        "title": "minimum deletions to make string balanced",
        "content": "give string consist character delete number character make balanced balance pair index return minimum number deletion need make balanced",
        "label": "greedy"
    },
    {
        "id": 1657,
        "title": "determine if two strings are close",
        "content": "two string consider close attain one use follow operation operation swap two exist character example operation transform every occurrence one exist character another exist character character example 's turn 's 's turn 's use operation either string many time necessary give two string return close otherwise contain lowercase english letter",
        "label": "greedy"
    },
    {
        "id": 1658,
        "title": "minimum operations to reduce x to zero",
        "content": "give integer array integer one operation either remove leftmost rightmost element array subtract value note modify array future operation return minimum number operation reduce exactly 's possible otherwise return",
        "label": "two-pointers"
    },
    {
        "id": 316,
        "title": "remove duplicate letters",
        "content": "give string remove duplicate letter every letter appear must make sure result small lexicographical order among possible result",
        "label": "stack"
    },
    {
        "id": 321,
        "title": "create maximum number",
        "content": "give two array length digit represent two number create maximum number length digits two relative order digit array must preserve return array digit",
        "label": "dynamic-programming"
    },
    {
        "id": 330,
        "title": "patching array",
        "content": "give sort positive integer array nums integer add patch element array number range inclusive form sum element array return minimum number patch require",
        "label": "greedy"
    },
    {
        "id": 376,
        "title": "wiggle subsequence",
        "content": "sequence number call wiggle sequence difference successive number strictly alternate positive negative first difference one exist may either positive negative sequence few two element trivially wiggle sequence example wiggle sequence difference alternately positive negative contrast wiggle sequence first first two difference positive second last difference zero give sequence integer return length long subsequence wiggle sequence subsequence obtain delete number element eventually also zero original sequence leave remain element original order",
        "label": "dynamic-programming"
    },
    {
        "id": 392,
        "title": "is subsequence",
        "content": "give string string check subsequence subsequence string new string form original string delete none character without disturb relative position remain character ie subsequence",
        "label": "binary-search"
    },
    {
        "id": 402,
        "title": "remove k digits",
        "content": "give non negative integer num represent string remove digit number new number small possible",
        "label": "stack"
    },
    {
        "id": 406,
        "title": "queue reconstruction by height",
        "content": "give array people attribute people queue necessarily order represent person height exactly people front height great equal reconstruct return queue represent input array return queue formatted array attribute person queue person front queue guarantee queue reconstruct",
        "label": "greedy"
    },
    {
        "id": 435,
        "title": "non-overlapping intervals",
        "content": "give collection interval find minimum number interval need remove make rest interval non overlap",
        "label": "greedy"
    },
    {
        "id": 44,
        "title": "wildcard matching",
        "content": "give input string pattern implement wildcard pattern match support match single character match sequence character include empty sequence match cover entire input string partial contain lowercase english letter contain lowercase english letter",
        "label": "backtracking"
    },
    {
        "id": 45,
        "title": "jump game ii",
        "content": "give array non negative integer initially position first index array element array represent maximum jump length position goal reach last index minimum number jump assume always reach last index",
        "label": "greedy"
    },
    {
        "id": 452,
        "title": "minimum number of arrows to burst balloons",
        "content": "spherical balloon spread two dimensional space balloon provide input start end coordinate horizontal diameter since 's horizontal coordinate n't matter hence coordinate start end diameter suffice start always small end arrow shot exactly vertically different point along axis balloon burst arrow shot limit number arrow shoot arrow shot keep travel infinitely give array return minimum number arrow must shoot burst balloon",
        "label": "greedy"
    },
    {
        "id": 455,
        "title": "assign cookies",
        "content": "assume awesome parent want give child cooky give child one cookie child greed factor minimum size cookie child content cookie size assign cookie child child content goal maximize number content child output maximum number",
        "label": "greedy"
    },
    {
        "id": 502,
        "title": "ipo",
        "content": "suppose leetcode start ipo soon order sell good price share venture capital leetcode would like work project increase capital ipo since limited resource finish distinct project ipo help leetcode design best way maximize total capital finish distinct project give several project project pure profit pi minimum capital ci need start corresponding project initially capital finish project obtain pure profit profit add total capital sum pick list distinct project give project maximize final capital output final maximize capital",
        "label": "greedy"
    },
    {
        "id": 55,
        "title": "jump game",
        "content": "give array non negative integer initially position first index array element array represent maximum jump length position determine able reach last index",
        "label": "greedy"
    },
    {
        "id": 621,
        "title": "task scheduler",
        "content": "give character array represent task cpu need letter represent different task task could do order task do one unit time unit time cpu could complete either one task idle however non negative integer represent cooldown period two task letter array must least unit time two task return least number unit time cpu take finish give task upper case english letter integer range",
        "label": "greedy"
    },
    {
        "id": 630,
        "title": "course schedule iii",
        "content": "different online course number course duration course length close day course take continuously day must finish day start day give online course represent pair task find maximal number course take",
        "label": "greedy"
    },
    {
        "id": 649,
        "title": "dota2 senate",
        "content": "world dota2 two party dota2 senate consist senator come two party senate want make decision change dota2 game vote change round base procedure round senator exercise two right senator make another senator lose right follow round senator find senator still right vote party announce victory make decision change game give string represent senator 's party belonging character 'd represent party party respectively senator size give string round base procedure start first senator last senator give order procedure last end voting senator lose right skip procedure suppose every senator smart enough play best strategy party need predict party finally announce victory make change dota2 game output",
        "label": "greedy"
    },
    {
        "id": 659,
        "title": "split array into consecutive subsequences",
        "content": "give array sort ascend order return split subsequence subsequence consist consecutive integer length least",
        "label": "greedy"
    },
    {
        "id": 714,
        "title": "best time to buy and sell stock with transaction fee",
        "content": "give array integer th element price give stock day non negative integer represent transaction fee may complete many transaction like need pay transaction fee transaction may buy share stock time ie must sell stock share buy return maximum profit make",
        "label": "dynamic-programming"
    },
    {
        "id": 738,
        "title": "monotone increasing digits",
        "content": "give non negative integer find large number less equal monotone increase digit recall integer monotone increase digit pair adjacent digit satisfy",
        "label": "greedy"
    },
    {
        "id": 757,
        "title": "set intersection size at least two",
        "content": "integer interval integer set consecutive integer include find minimum size set every integer interval intersection size least",
        "label": "greedy"
    },
    {
        "id": 763,
        "title": "partition labels",
        "content": "string lowercase english letter give want partition string many part possible letter appear one part return list integer represent size part",
        "label": "two-pointers"
    },
    {
        "id": 765,
        "title": "couples holding hands",
        "content": "couple sit 2n seat arrange row want hold hand want know minimum number swap every couple sit side side swap consist choose two people stand switch seat people seat represent integer couple number order first couple second couple last couple couple initial seat give value person initially sit th seat",
        "label": "greedy"
    },
    {
        "id": 767,
        "title": "reorganize string",
        "content": "give string check letter rearrange two character adjacent possible output possible result possible return empty string",
        "label": "greedy"
    },
    {
        "id": 842,
        "title": "split array into fibonacci sequence",
        "content": "give string digit split fibonacci like sequence formally fibonacci like sequence list non negative integer integer fit bit signed integer type andfor also note split string piece piece must extra lead zero except piece number return fibonacci like sequence split return do",
        "label": "backtracking"
    },
    {
        "id": 860,
        "title": "lemonade change",
        "content": "lemonade stand lemonade cost customer stand queue buy order one time order specify customer buy one lemonade pay either bill must provide correct change customer net transaction customer pay note n't change hand first return provide every customer correct change",
        "label": "greedy"
    },
    {
        "id": 861,
        "title": "score after flipping matrix",
        "content": "two dimensional matrix value move consist choose row column toggle value row column change make number move every row matrix interpret binary number score matrix sum number return high possible score",
        "label": "greedy"
    },
    {
        "id": 870,
        "title": "advantage shuffle",
        "content": "give two array equal size advantage respect number index return permutation maximize advantage respect",
        "label": "greedy"
    },
    {
        "id": 874,
        "title": "walking robot simulation",
        "content": "robot infinite grid start point face north robot receive one three possible type command turn leave degree turn right degree move forward unit grid square obstacle th obstacle grid point robot would try move onto robot stay previous grid square instead still continue follow rest route return square maximum euclidean distance robot origin",
        "label": "greedy"
    },
    {
        "id": 881,
        "title": "boats to save people",
        "content": "th person weight boat carry maximum weight boat carry people time provide sum weight people return minimum number boat carry every give person guarantee person carry boat",
        "label": "two-pointers"
    },
    {
        "id": 910,
        "title": "smallest range ii",
        "content": "give array integer integer need choose either add process array return small possible difference maximum value minimum value",
        "label": "greedy"
    },
    {
        "id": 921,
        "title": "minimum add to make parentheses valid",
        "content": "give string parenthesis add minimum number parenthesis position result parenthesis string valid formally parentheses string valid empty string write concatenated valid string write valid string give parenthesis string return minimum number parenthesis must add make result string valid",
        "label": "stack"
    },
    {
        "id": 927,
        "title": "three equal parts",
        "content": "give array divide array non empty part part represent binary value possible return first part second part third part three part equal binary value possible return note entire part use consider binary value represent example represent decimal also lead zero allow represent value",
        "label": "binary-search"
    },
    {
        "id": 936,
        "title": "stamping the sequence",
        "content": "want form string lowercase letter begin sequence mark also lowercase letter turn may place stamp sequence replace every letter sequence correspond letter stamp make turn example initial sequence stamp may make first turn note stamp must fully contain boundary sequence order stamp sequence possible stamp return array index leave letter stamp turn sequence possible stamp return empty array example sequence stamp could return answer correspond move also sequence possible stamp guarantee possible stamp within move answer specify number move accept contain lowercase letter",
        "label": "greedy"
    },
    {
        "id": 944,
        "title": "delete columns to make sorted",
        "content": "give array lowercase letter string length may choose set deletion index string delete character index example array deletion indices final array deletion remain column formally th column suppose chose set deletion index deletion remain column non decrease sort order return minimum possible value",
        "label": "greedy"
    },
    {
        "id": 948,
        "title": "bag of tokens",
        "content": "initial power initial score bag value token indexed goal maximize total score potentially play token one two way current power least may play token face lose power gain score current score least may play token face gain power lose score token may play order play token return large possible score achieve play number token",
        "label": "two-pointers"
    },
    {
        "id": 955,
        "title": "delete columns to make sorted ii",
        "content": "give array lowercase letter string length may choose set deletion index string delete character index example array deletion indices final array deletion suppose chose set deletion index deletion final array element lexicographic order return minimum possible value",
        "label": "greedy"
    },
    {
        "id": 984,
        "title": "string without aaa or bbb",
        "content": "give two integer return string length contain exactly letter exactly letter substring occur substring occur",
        "label": "greedy"
    },
    {
        "id": 991,
        "title": "broken calculator",
        "content": "broken calculator number show display perform two operation double multiply number display decrement subtract number display initially calculator display number return minimum number operation need display number",
        "label": "greedy"
    },
    {
        "id": 995,
        "title": "minimum number of k consecutive bit flips",
        "content": "array contain bit flip consist choose contiguous subarray length simultaneously change every subarray every subarray return minimum number bit flip require array possible return",
        "label": "greedy"
    },
    {
        "id": 1011,
        "title": "capacity to ship packages within d days",
        "content": "conveyor belt package must ship one port another within day th package conveyor belt weight day load ship package conveyor belt order give may load weight maximum weight capacity ship return least weight capacity ship result package conveyor belt ship within day",
        "label": "binary-search"
    },
    {
        "id": 1044,
        "title": "longest duplicate substring",
        "content": "give string consider duplicate substring contiguous substring occur time occurrence may overlap return duplicate substring long possible length duplicate substring answer",
        "label": "hash-table"
    },
    {
        "id": 1095,
        "title": "find in mountain array",
        "content": "problem interactive problem may recall array mountain array exist give mountain array return minimum n't exist return ca n't access mountain array directly may access array use interface return element array index index return length array submission make call judge wrong answer also solution attempt circumvent judge result disqualification",
        "label": "binary-search"
    },
    {
        "id": 1111,
        "title": "maximum nesting depth of two valid parentheses strings",
        "content": "string valid parenthesis string denoted vps consist character empty string write concatenated vps 's write vps similarly define nest depth vps follow vps 's vps example vps 's nesting depth vps 's give vps split two disjoint subsequence vps 's choose minimum possible value return array length encode choice part else note even though multiple answer may exist may return",
        "label": "greedy"
    },
    {
        "id": 1157,
        "title": "online majority element in subarray",
        "content": "implement class follow api construct instance majoritychecker give array argument represent subarray ie threshold always strict majority length subarray return element occur least time element exist query query number query",
        "label": "binary-search"
    },
    {
        "id": 1201,
        "title": "ugly number iii",
        "content": "write program find th ugly number ugly number positive integer divisible 's guarantee result range",
        "label": "binary-search"
    },
    {
        "id": 1235,
        "title": "maximum profit in job scheduling",
        "content": "job every job schedule do obtaining profit 're give array need output maximum profit take job subset overlapping time range choose job end time able start another job start time",
        "label": "dynamic-programming"
    },
    {
        "id": 1237,
        "title": "find positive integer solution for a given equation",
        "content": "give function value return positive integer pair function constantly increase function interface define like custom test purpose 're give integer target input represent one function secret internal list example 'll know two function list may return solution order 's guaranteed solution range 's also guarantee fit bit sign integer",
        "label": "binary-search"
    },
    {
        "id": 1283,
        "title": "find the smallest divisor given a threshold",
        "content": "give array integer integer choose positive integer divisor divide array sum result division find small divisor result mention less equal result division round near integer great equal element example guarantee answer",
        "label": "binary-search"
    },
    {
        "id": 1292,
        "title": "maximum side length of a square with sum less than or equal to threshold",
        "content": "give matrix integer return maximum side length square sum less equal return square",
        "label": "binary-search"
    },
    {
        "id": 1300,
        "title": "sum of mutated array closest to target",
        "content": "give integer array target value return integer change integer large give array equal sum array get close possible absolute difference case tie return minimum integer notice answer neccesarilly number",
        "label": "binary-search"
    },
    {
        "id": 1337,
        "title": "the k weakest rows in a matrix",
        "content": "give matrix one represent soldier zero represent civilian return index weak row matrix order weak strongest row weaker row number soldier row less number soldier row number soldier less soldier always stand frontier row always one may appear first zero either",
        "label": "binary-search"
    },
    {
        "id": 1351,
        "title": "count negative numbers in a sorted matrix",
        "content": "give matrix sort non increase order row wise column wise return number negative number",
        "label": "binary-search"
    },
    {
        "id": 1482,
        "title": "minimum number of days to make m bouquets",
        "content": "give integer array integer integer need make bouquet make bouquet need use adjacent flower garden garden consist flower flower bloom use exactly one bouquet return minimum number day need wait able make bouquet garden impossible make bouquet return",
        "label": "binary-search"
    },
    {
        "id": 1521,
        "title": "find a value of a mysterious function closest to target",
        "content": "winston give mysterious function integer array integer want find value make value minimum possible return minimum possible value notice call value",
        "label": "binary-search"
    },
    {
        "id": 153,
        "title": "find minimum in rotated sorted array",
        "content": "suppose array length sort ascend order rotate time example array might become rotated time rotate time notice rotate array time result array give sort rotated array return minimum element array integer unique sort rotate time",
        "label": "binary-search"
    },
    {
        "id": 154,
        "title": "find minimum in rotated sorted array ii",
        "content": "suppose array sort ascend order rotate pivot unknown beforehand might become find minimum element array may contain duplicate",
        "label": "binary-search"
    },
    {
        "id": 1552,
        "title": "magnetic force between two balls",
        "content": "universe earth rick discover special form magnetic force two ball put new invent basket rick empty basket basket morty ball need distribute ball basket minimum magnetic force two ball maximum rick state magnetic force two different ball position give integer array integer return require force integer distinct",
        "label": "binary-search"
    },
    {
        "id": 1562,
        "title": "find latest group of size m",
        "content": "give array represent permutation number binary string size initially bits set zero step assume binary string indexed bit position set give integer need find late step exist group one length group one contiguous substring extend either direction return late step exist group one length exactly group exist return integer distinct",
        "label": "binary-search"
    },
    {
        "id": 1574,
        "title": "shortest subarray to be removed to make array sorted",
        "content": "give integer array remove subarray empty remain element non decrease subarray contiguous subsequence array return length short subarray remove",
        "label": "binary-search"
    },
    {
        "id": 1590,
        "title": "make sum divisible by p",
        "content": "give array positive integer remove small subarray possibly empty sum remain element divisible allow remove whole array return length small subarray need remove 's impossible subarray define contiguous block element array",
        "label": "hash-table"
    },
    {
        "id": 162,
        "title": "find peak element",
        "content": "peak element element great neighbor give input array find peak element return index array may contain multiple peak case return index one peak fine may imagine",
        "label": "binary-search"
    },
    {
        "id": 1631,
        "title": "path with minimum effort",
        "content": "hiker prepare upcoming hike give 2d array size represent height cell situate top left cell hope travel bottom right cell indexed move leave right wish find route require minimum effort route 's effort maximum absolute difference height two consecutive cell route return minimum effort require travel top leave cell bottom right cell",
        "label": "depth-first-search"
    },
    {
        "id": 1642,
        "title": "furthest building you can reach",
        "content": "give integer array represent height building start journey build move next building possibly use brick ladder move building building indexed current building 's height great equal next building 's height need ladder brick current building 's height le next building 's height either use one ladder brick return furthest building index index reach use give ladder brick optimally",
        "label": "binary-search"
    },
    {
        "id": 1658,
        "title": "minimum operations to reduce x to zero",
        "content": "give integer array integer one operation either remove leftmost rightmost element array subtract value note modify array future operation return minimum number operation reduce exactly 's possible otherwise return",
        "label": "two-pointers"
    },
    {
        "id": 167,
        "title": "two sum ii - input array is sorted",
        "content": "give array integer already sort ascend order find two number add specific target number function twosum return index two number add target index1 must less index2",
        "label": "two-pointers"
    },
    {
        "id": 174,
        "title": "dungeon game",
        "content": "demon capture princess imprison bottom right corner dungeon dungeon consist room lay 2d grid valiant knight initially position top left room must fight way dungeon rescue princess knight initial health point represent positive integer point health point drop die immediately room guard demon knight lose health negative integer upon enter room room either empty 's contain magic orbs increase knight 's health positive integer order reach princess quickly possible knight decide move rightward downward step write function determine knight 's minimum initial health able rescue princess example give dungeon initial health knight must least follow optimal path",
        "label": "dynamic-programming"
    },
    {
        "id": 209,
        "title": "minimum size subarray sum",
        "content": "give array positive integer positive integer find minimal length contiguous subarray sum n't one return instead",
        "label": "two-pointers"
    },
    {
        "id": 222,
        "title": "count complete tree nodes",
        "content": "give complete binary tree count number node",
        "label": "binary-search"
    },
    {
        "id": 230,
        "title": "kth smallest element in a bst",
        "content": "give binary search tree write function find kth small element",
        "label": "binary-search"
    },
    {
        "id": 240,
        "title": "search a 2d matrix ii",
        "content": "write efficient algorithm search value matrix matrix follow property integer row sort ascending leave right integer column sort ascend top bottom consider follow matrix give target return give target return",
        "label": "binary-search"
    },
    {
        "id": 275,
        "title": "h-index ii",
        "content": "give array citation sort ascend order citation non negative integer researcher write function compute researcher 's index accord definition index wikipedia scientist index paper least citation paper citation",
        "label": "binary-search"
    },
    {
        "id": 278,
        "title": "first bad version",
        "content": "product manager currently lead team develop new product unfortunately late version product fail quality check since version develop base previous version version bad version also bad suppose version want find first bad one cause follow one bad give api return whether bad implement function find first bad version minimize number call api",
        "label": "binary-search"
    },
    {
        "id": 287,
        "title": "find the duplicate number",
        "content": "give array integer contain integer integer range inclusive one duplicate number return duplicate number",
        "label": "two-pointers"
    },
    {
        "id": 29,
        "title": "divide two integers",
        "content": "give two integer divide two integer without use multiplication division mod operator return quotient divide integer division truncate toward zero mean lose fractional part example",
        "label": "binary-search"
    },
    {
        "id": 300,
        "title": "longest increasing subsequence",
        "content": "give integer array return length long strictly increase subsequence subsequence sequence derive array deleting element without change order remain element example subsequence array",
        "label": "dynamic-programming"
    },
    {
        "id": 315,
        "title": "count of smaller numbers after self",
        "content": "give integer array nums return new count array count array property number small element right",
        "label": "binary-search"
    },
    {
        "id": 327,
        "title": "count of range sum",
        "content": "give integer array return number range sum lie inclusive range sum define sum element index inclusive",
        "label": "binary-search"
    },
    {
        "id": 33,
        "title": "search in rotated sorted array",
        "content": "give integer array sort ascend order integer suppose rotate pivot unknown beforehand might become found array return index otherwise return value unique guranteed rotate pivot",
        "label": "binary-search"
    },
    {
        "id": 34,
        "title": "find first and last position of element in sorted array",
        "content": "give array integer sort ascend order find start end position give value found array return",
        "label": "binary-search"
    },
    {
        "id": 349,
        "title": "intersection of two arrays",
        "content": "give two array write function compute intersection",
        "label": "two-pointers"
    },
    {
        "id": 35,
        "title": "search insert position",
        "content": "give sort array distinct integer target value return index target find return index would insert order contain distinct value sort ascend order",
        "label": "binary-search"
    },
    {
        "id": 350,
        "title": "intersection of two arrays ii",
        "content": "give two array write function compute intersection",
        "label": "two-pointers"
    },
    {
        "id": 352,
        "title": "data stream as disjoint intervals",
        "content": "give data stream input non negative integer a1 a2 summarize number see far list disjoint interval example suppose integer data stream summary",
        "label": "binary-search"
    },
    {
        "id": 354,
        "title": "russian doll envelopes",
        "content": "number envelope widths height give pair integer one envelope fit another width height one envelope great width height envelope maximum number envelope russian doll put one inside",
        "label": "dynamic-programming"
    },
    {
        "id": 363,
        "title": "max sum of rectangle no larger than k",
        "content": "give non empty 2d matrix matrix integer find max sum rectangle matrix sum large",
        "label": "dynamic-programming"
    },
    {
        "id": 367,
        "title": "valid perfect square",
        "content": "give positive integer num write function return true num perfect square else false",
        "label": "binary-search"
    },
    {
        "id": 374,
        "title": "guess number higher or lower",
        "content": "play guess game game follow pick number guess number pick every time guess wrong tell whether number pick high low guess call pre define api return possible result number pick low guess number pick high guess number pick equal guess return number pick",
        "label": "binary-search"
    },
    {
        "id": 378,
        "title": "kth smallest element in a sorted matrix",
        "content": "give matrix row column sort ascend order find kth small element matrix note kth small element sort order kth distinct element",
        "label": "binary-search"
    },
    {
        "id": 392,
        "title": "is subsequence",
        "content": "give string string check subsequence subsequence string new string form original string delete none character without disturb relative position remain character ie subsequence",
        "label": "greedy"
    },
    {
        "id": 4,
        "title": "median of two sorted arrays",
        "content": "give two sorted array size respectively return median two sort array",
        "label": "binary-search"
    },
    {
        "id": 410,
        "title": "split array largest sum",
        "content": "give array consist non negative integer integer split array non empty continuous subarrays write algorithm minimize large sum among subarrays",
        "label": "dynamic-programming"
    },
    {
        "id": 436,
        "title": "find right interval",
        "content": "give array unique right interval interval interval minimize return array right interval index interval right interval exist interval put index start point interval unique",
        "label": "binary-search"
    },
    {
        "id": 441,
        "title": "arranging coins",
        "content": "total coin want form staircase shape every th row must exactly coin give find total number full staircase row form non negative integer fit within range bit sign integer",
        "label": "binary-search"
    },
    {
        "id": 454,
        "title": "4sum ii",
        "content": "give four list integer value compute many tuples zero make problem bit easy length integer range result guaranteed",
        "label": "hash-table"
    },
    {
        "id": 475,
        "title": "heaters",
        "content": "winter come contest first job design standard heater fix warm radius warm house every house warm long house within heater 's warm radius range give position horizontal line return minimum radius standard heater heater could cover house notice follow radius standard warm radius",
        "label": "binary-search"
    },
    {
        "id": 483,
        "title": "smallest good base",
        "content": "integer call good base digit base give string represent return small good base string format",
        "label": "binary-search"
    },
    {
        "id": 493,
        "title": "reverse pairs",
        "content": "give array call important reverse pair need return number important reverse pair give array",
        "label": "binary-search"
    },
    {
        "id": 497,
        "title": "random point in non-overlapping rectangles",
        "content": "give list non overlap axis align rectangle write function randomly uniformily pick integer point space cover rectangle",
        "label": "binary-search"
    },
    {
        "id": 50,
        "title": "pow(x, n)",
        "content": "implement pow calculate raise power",
        "label": "binary-search"
    },
    {
        "id": 528,
        "title": "random pick with weight",
        "content": "give array positive integer describe weight index index need call function randomly return integer range return integer proportional weight array example probability pick index probability pick index formally probability pick index call time",
        "label": "binary-search"
    },
    {
        "id": 658,
        "title": "find k closest elements",
        "content": "give sort integer array two integer return close integer array result also sort ascend order integer closer integer absolute value element array exceed",
        "label": "binary-search"
    },
    {
        "id": 668,
        "title": "kth smallest number in multiplication table",
        "content": "nearly every one use multiplication table could find small number quickly multiplication table give height length multiplication table positive integer need return small number table",
        "label": "binary-search"
    },
    {
        "id": 69,
        "title": "sqrt(x)",
        "content": "give non negative integer compute return square root since return type integer decimal digit truncate integer part result return",
        "label": "binary-search"
    },
    {
        "id": 704,
        "title": "binary search",
        "content": "give sort ascend order integer array elements value write function search exist return index otherwise return",
        "label": "binary-search"
    },
    {
        "id": 710,
        "title": "random pick with blacklist",
        "content": "give blacklist contain unique integer write function return uniform random integer optimize minimize call system",
        "label": "hash-table"
    },
    {
        "id": 718,
        "title": "maximum length of repeated subarray",
        "content": "give two integer array return maximum length subarray appear array",
        "label": "hash-table"
    },
    {
        "id": 719,
        "title": "find k-th smallest pair distance",
        "content": "give integer array return th small distance among pair distance pair define absolute difference",
        "label": "binary-search"
    },
    {
        "id": 74,
        "title": "search a 2d matrix",
        "content": "write efficient algorithm search value matrix matrix follow property integer row sort leave right first integer row great last integer previous row",
        "label": "binary-search"
    },
    {
        "id": 744,
        "title": "find smallest letter greater than target",
        "content": "give list sort character contain lowercase letter give target letter find small element list large give target letter also wrap around example target answer example",
        "label": "binary-search"
    },
    {
        "id": 778,
        "title": "swim in rising water",
        "content": "square represent elevation point rain start fall time depth water everywhere swim square another directionally adjacent square elevation square individually swim infinite distance zero time course must stay within boundary grid swim start top left square least time reach bottom right square",
        "label": "depth-first-search"
    },
    {
        "id": 786,
        "title": "k-th smallest prime fraction",
        "content": "sort list contain plus number prime every list consider fraction th small fraction consider return answer array ints",
        "label": "binary-search"
    },
    {
        "id": 793,
        "title": "preimage size of factorial zeroes function",
        "content": "let number zero end recall convention example zero end zero end give find many non negative integer property",
        "label": "binary-search"
    },
    {
        "id": 81,
        "title": "search in rotated sorted array ii",
        "content": "suppose array sort ascend order rotate pivot unknown beforehand might become give target value search found array return otherwise return",
        "label": "binary-search"
    },
    {
        "id": 852,
        "title": "peak index in a mountain array",
        "content": "let 's call array mountain follow property hold exist give integer array arr guarantee mountain return guarantee mountain array",
        "label": "binary-search"
    },
    {
        "id": 862,
        "title": "shortest subarray with sum at least k",
        "content": "return length short non empty contiguous subarray sum least non empty subarray sum least return",
        "label": "binary-search"
    },
    {
        "id": 875,
        "title": "koko eating bananas",
        "content": "koko love eat banana pile banana th pile banana guard go come back hour koko decide banana per hour eat speed hour choose pile banana eat bananas pile pile le bananas eat instead wo n't eat bananas hour koko like eat slowly still want finish eat banana guard come back return minimum integer eat banana within hour",
        "label": "binary-search"
    },
    {
        "id": 878,
        "title": "nth magical number",
        "content": "positive integer magical divisible either return th magical number since answer may large return modulo",
        "label": "binary-search"
    },
    {
        "id": 887,
        "title": "super egg drop",
        "content": "give egg access building floor egg identical function egg break drop know exist floor egg drop floor high break egg drop floor break move may take egg unbroken one drop floor goal know certainty value minimum number move need know certainty regardless initial value",
        "label": "dynamic-programming"
    },
    {
        "id": 911,
        "title": "online election",
        "content": "election th vote cast time would like implement follow query function return number person lead election time vote cast time count towards query case tie recent vote among tied candidate win",
        "label": "binary-search"
    },
    {
        "id": 927,
        "title": "three equal parts",
        "content": "give array divide array non empty part part represent binary value possible return first part second part third part three part equal binary value possible return note entire part use consider binary value represent example represent decimal also lead zero allow represent value",
        "label": "greedy"
    },
    {
        "id": 981,
        "title": "time based key-value store",
        "content": "create timebased key value store class support two operation store along give return value call previously multiple value return one large value return empty string",
        "label": "hash-table"
    },
    {
        "id": 101,
        "title": "symmetric tree",
        "content": "give binary tree check whether mirror ie symmetric around center example binary tree symmetric follow",
        "label": "depth-first-search"
    },
    {
        "id": 102,
        "title": "binary tree level order traversal",
        "content": "give binary tree return level order traversal node value ie leave right level level example give binary tree return level order traversal",
        "label": "breadth-first-search"
    },
    {
        "id": 103,
        "title": "binary tree zigzag level order traversal",
        "content": "give binary tree return zigzag level order traversal node value ie leave right right leave next level alternate example give binary tree return zigzag level order traversal",
        "label": "stack"
    },
    {
        "id": 1036,
        "title": "escape a large maze",
        "content": "million million grid coordinate grid square start square want reach square move walk directionally adjacent square grid n't give list square return possible reach target square sequence move",
        "label": "breadth-first-search"
    },
    {
        "id": 107,
        "title": "binary tree level order traversal ii",
        "content": "give binary tree return bottom level order traversal node value ie leave right level level leaf root example give binary tree return bottom level order traversal",
        "label": "breadth-first-search"
    },
    {
        "id": 1091,
        "title": "shortest path in binary matrix",
        "content": "square grid cell either empty block clear path top leave bottom right length compose cell adjacent cell connect directionally ie different share edge corner location ie value location ie value locate empty ie return length short clear path top leave bottom right path exist return",
        "label": "breadth-first-search"
    },
    {
        "id": 111,
        "title": "minimum depth of binary tree",
        "content": "give binary tree find minimum depth minimum depth number node along short path root node near leaf node",
        "label": "depth-first-search"
    },
    {
        "id": 1129,
        "title": "shortest path with alternating colors",
        "content": "consider direct graph node label graph edge either red blue could self edge parallel edge denote red directed edge node node similarly denote blue direct edge node node return array length length short path node node edge color alternate along path path n't exist",
        "label": "breadth-first-search"
    },
    {
        "id": 116,
        "title": "populating next right pointers in each node",
        "content": "give perfect binary tree leaf level every parent two child binary tree follow definition populate next pointer point next right node next right node next pointer set initially next pointer set",
        "label": "depth-first-search"
    },
    {
        "id": 1161,
        "title": "maximum level sum of a binary tree",
        "content": "give binary tree level root level child return small level sum value node level maximal number node tree range",
        "label": "breadth-first-search"
    },
    {
        "id": 1162,
        "title": "as far from land as possible",
        "content": "give contain value represent water represent land find water cell distance near land cell maximize return distance distance use problem manhattan distance distance two cell land water exist grid return",
        "label": "breadth-first-search"
    },
    {
        "id": 1210,
        "title": "minimum moves to reach target with rotations",
        "content": "grid snake span cell start move top left corner grid empty cell represent zero blocked cell represent one snake want reach low right corner one move snake move one cell right block cell move keep horizontal vertical position snake move one cell block cell move keep horizontal vertical position snake rotate clockwise 's horizontal position two cell empty case snake move rotate counterclockwise 's vertical position two cell right empty case snake move return minimum number move reach target way reach target return guarantee snake start empty cell",
        "label": "breadth-first-search"
    },
    {
        "id": 126,
        "title": "word ladder ii",
        "content": "give two word beginword endword dictionary 's word list find short transformation sequence beginword endword one letter change time transform word must exist word list note beginword transform word",
        "label": "backtracking"
    },
    {
        "id": 1263,
        "title": "minimum moves to move a box to their target location",
        "content": "storekeeper game player push box around warehouse try get target location game represent size element wall floor box task move box target position follow rule player represent character move leave right floor empy cell floor represent character mean free cell walk wall represent character mean obstacle impossible walk one box one target cell box move adjacent free cell stand next box move direction box push player walk box return minimum number push move box target way reach target return contain character one character",
        "label": "breadth-first-search"
    },
    {
        "id": 127,
        "title": "word ladder",
        "content": "give two word beginword endword dictionary 's word list find length short transformation sequence beginword endword one letter change time transform word must exist word list",
        "label": "breadth-first-search"
    },
    {
        "id": 1284,
        "title": "minimum number of flips to convert binary matrix to zero matrix",
        "content": "give binary matrix one step choose one cell flip four neighbour exist flip changing pair cell call neighboors share one edge return minimum number step require convert zero matrix binary matrix matrix cell equal zero matrix matrix cell equal",
        "label": "breadth-first-search"
    },
    {
        "id": 1293,
        "title": "shortest path in a grid with obstacles elimination",
        "content": "give grid cell either empty obstacle one step move leave right empty cell return minimum number step walk upper leave corner low right corner give eliminate obstacle possible find walk return",
        "label": "breadth-first-search"
    },
    {
        "id": 1298,
        "title": "maximum candies you can get from boxes",
        "content": "give box box give format integer open close integer represent number candy array contain index box open key array contain index box find start box give array take candy open box use key open new box also use box find return maximum number candy get follow rule value unique value unique box contain one box",
        "label": "breadth-first-search"
    },
    {
        "id": 130,
        "title": "surrounded regions",
        "content": "give 2d board contain letter capture region surround region capture flip surround region run function board explanation surround region border mean border board flip border connect border flip two cell connect adjacent cell connect horizontally vertically",
        "label": "depth-first-search"
    },
    {
        "id": 1306,
        "title": "jump game iii",
        "content": "give array non negative integer initially position index array index jump check reach index value notice jump outside array time",
        "label": "breadth-first-search"
    },
    {
        "id": 1311,
        "title": "get watched videos by your friends",
        "content": "people person unique id give array contain list watch videos list friend respectively person level video watch videos friend level video watch videos friend friend general level video watch videos people shortest path exactly equal give video return list video order frequency increase videos frequency order alphabetically least great contain contain",
        "label": "hash-table"
    },
    {
        "id": 1319,
        "title": "number of operations to make network connected",
        "content": "computer number connected ethernet cable form network represent connection computer computer reach computer directly indirectly network give initial computer network extract certain cable two directly connect computer place pair disconnected computer make directly connect return minimum number time need order make computer connect 's possible return repeat connection two computer connect one cable",
        "label": "depth-first-search"
    },
    {
        "id": 133,
        "title": "clone graph",
        "content": "give reference node connect undirected graph return deep copy clone graph node graph contain val list neighbor test case format simplicity sake node 's value node 's index index example first node second node graph represent test case use adjacency list adjacency list collection unordered list use represent finite graph list describe set neighbor node graph give node always first node must return copy give node reference clone graph unique node number node exceed repeat edge self loop graph graph connect node visit start give node",
        "label": "depth-first-search"
    },
    {
        "id": 1345,
        "title": "jump game iv",
        "content": "give array integer initially position first index array one step jump index index return minimum number step reach last index array notice jump outside array time",
        "label": "breadth-first-search"
    },
    {
        "id": 1368,
        "title": "minimum cost to make at least one valid path in a grid",
        "content": "give cell sign point next cell visit currently cell sign mean go cell right go mean go cell leave go mean go lower cell go mean go upper cell go notice could invalid sign cell point outside initially start upper left cell valid path grid path start upper leave cell end bottom right cell follow sign grid valid path n't shortest modify sign cell modify sign cell one time return minimum cost make grid least one valid path",
        "label": "breadth-first-search"
    },
    {
        "id": 1391,
        "title": "check if there is a valid path in a grid",
        "content": "give cell represent street street mean street connect leave cell right cell mean street connect upper cell lower cell mean street connect leave cell lower cell mean street connect right cell lower cell mean street connect leave cell upper cell mean street connect right cell upper cell initially start street upper leave cell valid path grid path start upper leave cell end bottom right cell path follow street notice allow change street return true valid path grid false otherwise",
        "label": "depth-first-search"
    },
    {
        "id": 1519,
        "title": "number of nodes in the sub-tree with the same label",
        "content": "give tree connect undirected graph cycle consist node number exactly root tree node node tree label low case character give string node number label array give form mean edge node tree return array size number node subtree node label node subtree tree tree consist node descendant node consist low case english letter",
        "label": "depth-first-search"
    },
    {
        "id": 1625,
        "title": "lexicographically smallest string after applying operations",
        "content": "give string even length consist digit two integer apply either follow two operation number time order add odd index index digit post cycle back example become rotate right position example become return lexicographically small string obtain applying operation number time string lexicographically small string length first position differ string letter appear early alphabet correspond letter example lexicographically small first position differ third letter come even consist digit",
        "label": "depth-first-search"
    },
    {
        "id": 1654,
        "title": "minimum jumps to reach home",
        "content": "certain bug 's home axis position help get position bug jump accord follow rule jump exactly position forward right jump exactly position backward leave jump backward twice row jump position bug may jump forward beyond home jump position number negative integer give array integer mean bug jump position integer return minimum number jump need bug reach home possible sequence jump land bug position return element distinct position forbidden",
        "label": "dynamic-programming"
    },
    {
        "id": 199,
        "title": "binary tree right side view",
        "content": "give binary tree imagine stand right side return value node see ordered top bottom",
        "label": "depth-first-search"
    },
    {
        "id": 200,
        "title": "number of islands",
        "content": "give 2d map land water return number island island surround water form connect adjacent land horizontally vertically may assume four edge grid surrounded water",
        "label": "depth-first-search"
    },
    {
        "id": 207,
        "title": "course schedule",
        "content": "total course take label course may prerequisites example take course first take course express pair give total number course list prerequisite pair possible finish course input prerequisite graph represent list edge adjacency matrix read graph represent may assume duplicate edge input prerequisite",
        "label": "depth-first-search"
    },
    {
        "id": 210,
        "title": "course schedule ii",
        "content": "total course take label course may example mean must take course course give total number course list pair return order course take finish course many valid answer return impossible finish course return empty array pair distinct",
        "label": "depth-first-search"
    },
    {
        "id": 279,
        "title": "perfect squares",
        "content": "give positive integer find least number perfect square number example sum",
        "label": "dynamic-programming"
    },
    {
        "id": 301,
        "title": "remove invalid parentheses",
        "content": "remove minimum number invalid parenthesis order make input string valid return possible result",
        "label": "depth-first-search"
    },
    {
        "id": 310,
        "title": "minimum height trees",
        "content": "tree undirected graph two vertex connect exactly one path word connect graph without simple cycle tree give tree node label array indicate undirected edge two node tree choose node tree root select node root result tree height among possible root tree minimum height call minimum height tree mhts return list mhts root label return answer order height root tree number edge long downward path root leaf pair distinct give input guarantee tree repeat edge",
        "label": "breadth-first-search"
    },
    {
        "id": 407,
        "title": "trapping rain water ii",
        "content": "give matrix positive integer represent height unit cell 2d elevation map compute volume water able trap rain image represent elevation map rain rain water trap block total volume water trap",
        "label": "breadth-first-search"
    },
    {
        "id": 417,
        "title": "pacific atlantic water flow",
        "content": "give matrix non negative integer represent height unit cell continent pacific ocean touch leave top edge matrix atlantic ocean touch right bottom edge water flow four direction leave right cell another one height equal low find list grid coordinate water flow pacific atlantic ocean",
        "label": "depth-first-search"
    },
    {
        "id": 429,
        "title": "n-ary tree level order traversal",
        "content": "give ary tree return level order traversal node value nary tree input serialization represent level order traversal group child separate null value see example height ary tree less equal total number node",
        "label": "breadth-first-search"
    },
    {
        "id": 513,
        "title": "find bottom left tree value",
        "content": "give binary tree find leftmost value last row tree",
        "label": "depth-first-search"
    },
    {
        "id": 515,
        "title": "find largest value in each tree row",
        "content": "give binary tree return array large value row tree indexed number node tree range",
        "label": "depth-first-search"
    },
    {
        "id": 529,
        "title": "minesweeper",
        "content": "let 's play minesweeper game wikipedia online game give 2d char matrix represent game board 'm represent unrevealed mine represent unrevealed empty square represent reveal blank square adjacent leave right diagonal mine digit represent many mine adjacent reveal square finally represent revealed mine give next click position row column index among unrevealed square 'm return board reveal position accord follow rule mine 'm revealed game change empty square adjacent mine reveal change reveal blank adjacent unrevealed square reveal recursively empty square least one adjacent mine reveal change digit represent number adjacent mine return board square reveal",
        "label": "depth-first-search"
    },
    {
        "id": 542,
        "title": "01 matrix",
        "content": "give matrix consist find distance near cell distance two adjacent cell",
        "label": "depth-first-search"
    },
    {
        "id": 559,
        "title": "maximum depth of n-ary tree",
        "content": "give ary tree find maximum depth maximum depth number node along long path root node farthest leaf node nary tree input serialization represent level order traversal group child separate null value see example depth ary tree less equal total number node",
        "label": "depth-first-search"
    },
    {
        "id": 675,
        "title": "cut off trees for golf event",
        "content": "ask cut tree forest golf event forest represent non negative 2d map map represent ca n't reach represent walk represent walk positive number represent tree 's height one step walk four direction also stand point tree decide whether cut tree ask cut tree forest order tree 's height always cut tree low height first cut original place tree become grass value start point output minimum step need walk cut tree ca n't cut tree output situation guarantee two height least one tree need cut",
        "label": "breadth-first-search"
    },
    {
        "id": 690,
        "title": "employee importance",
        "content": "give data structure employee information include employee 's unique id importance value direct subordinate id example employee leader employee employee leader employee importance value respectively employee data structure like employee employee note although employee also subordinate employee relationship direct give employee information company employee id need return total importance value employee subordinate",
        "label": "hash-table"
    },
    {
        "id": 743,
        "title": "network delay time",
        "content": "network node label give list travel time direct edge source node target node time take signal travel source target send signal certain node long take node receive signal impossible return",
        "label": "depth-first-search"
    },
    {
        "id": 752,
        "title": "open the lock",
        "content": "lock front circular wheel wheel slot wheel rotate freely wrap around example turn move consist turn one wheel one slot lock initially start string represent state wheel give list dead end mean lock display cod wheel lock stop turn unable open give represent value wheel unlock lock return minimum total number turn require open lock impossible target list consist digit",
        "label": "breadth-first-search"
    },
    {
        "id": 773,
        "title": "sliding puzzle",
        "content": "2x3 tile represent integer empty square represent move consist choose directionally adjacent number swap state board solve give puzzle board return least number move require state board solve impossible state board solve return example",
        "label": "breadth-first-search"
    },
    {
        "id": 785,
        "title": "is graph bipartite?",
        "content": "give undirected return bipartite recall graph bipartite split set node two independent subset every edge graph one node another node graph give follow form list index edge node exist node integer self edge parallel edge contain n't contain element twice value unique graph guarantee undirected",
        "label": "depth-first-search"
    },
    {
        "id": 787,
        "title": "cheapest flights within k stops",
        "content": "city connect flight flight start city arrive price give city flight together start city destination task find cheap price stop route output number node range node label size range format flight price flight range range duplicate flight self cycle",
        "label": "dynamic-programming"
    },
    {
        "id": 815,
        "title": "bus routes",
        "content": "list bus route bus route th bus repeat forever example mean first bus th indexed travel sequence forever start bus stop initially bus want go bus stop travel bus least number bus must take reach destination return possible",
        "label": "breadth-first-search"
    },
    {
        "id": 847,
        "title": "shortest path visiting all nodes",
        "content": "undirected connect graph node label give list exactly nodes connect return length short path visit every node may start stop node may revisit node multiple time may reuse edge",
        "label": "dynamic-programming"
    },
    {
        "id": 854,
        "title": "k-similar strings",
        "content": "string similar non negative integer swap position two letter exactly time result string equal give two anagram return small similar",
        "label": "breadth-first-search"
    },
    {
        "id": 863,
        "title": "all nodes distance k in binary tree",
        "content": "give binary tree root node node integer value return list value node distance node answer return order",
        "label": "depth-first-search"
    },
    {
        "id": 864,
        "title": "shortest path to get all keys",
        "content": "give dimensional empty cell wall start point key lock start start point one move consist walk one space one cardinal direction walk outside grid walk wall walk key pick ca n't walk lock unless correspond key exactly one lowercase one uppercase letter first letter english alphabet grid mean exactly one key lock one lock key also letter use represent key lock choose order english alphabet return low number move acquire key 's impossible return",
        "label": "breadth-first-search"
    },
    {
        "id": 909,
        "title": "snakes and ladders",
        "content": "number write boustrophedonically start bottom leave board alternate direction row example board number write follow start square board always last row first column move start square consist follow choose destination square number provide number choice simulate result standard side die roll ie always destination regardless size board snake ladder move destination snake ladder otherwise move board square row column snake ladder destination snake ladder note take snake ladder per move destination snake ladder start another snake ladder continue move example board first move destination square finish first move continue move return least number move require reach square possible return",
        "label": "breadth-first-search"
    },
    {
        "id": 913,
        "title": "cat and mouse",
        "content": "game undirected graph play two player mouse cat alternate turn graph give follow list node edge graph mouse start node go first cat start node go second hole node player 's turn must travel along one edge graph meet example mouse node must travel node additionally allow cat travel hole node game end three way ever cat occupy node mouse cat win ever mouse reach hole mouse win ever position repeat player position previous turn player 's turn move game draw give assume player play optimally return mouse win game cat win game game draw unique mouse cat always move",
        "label": "breadth-first-search"
    },
    {
        "id": 934,
        "title": "shortest bridge",
        "content": "give 2d binary array two island island directionally connect group connect may change connect two island together form island return small number must flip guarantee answer least",
        "label": "depth-first-search"
    },
    {
        "id": 967,
        "title": "numbers with same consecutive differences",
        "content": "return non negative integer length absolute difference every two consecutive digit note every number answer must lead zero except number example one leading zero invalid valid may return answer order",
        "label": "depth-first-search"
    },
    {
        "id": 993,
        "title": "cousins in binary tree",
        "content": "binary tree root node depth child depth node depth two node binary tree cousin depth different parent give binary tree unique value value two different node tree return node correspond value cousin number node tree node unique integer value",
        "label": "breadth-first-search"
    },
    {
        "id": 994,
        "title": "rotting oranges",
        "content": "give grid cell one three value value represent empty cell value represent fresh orange value represent rotten orange every minute fresh orange adjacent directionally rotten orange become rotten return minimum number minute must elapse cell fresh orange impossible return instead",
        "label": "breadth-first-search"
    },
    {
        "id": 1004,
        "title": "max consecutive ones iii",
        "content": "give array may change value return length long contiguous subarray contain",
        "label": "two-pointers"
    },
    {
        "id": 1093,
        "title": "statistics from a large sample",
        "content": "sample integer store result array number integer sample equal return minimum maximum mean median mode sample respectively array float point number mode guarantee unique recall median sample middle element element sample sort number element odd average middle two element element sample sort number element even mode sample count represent unique answer within true value accept correct",
        "label": "two-pointers"
    },
    {
        "id": 11,
        "title": "container with most water",
        "content": "give non negative integer represent point coordinate vertical line draw two endpoint line find two line together axis form container container contain water notice may slant container",
        "label": "two-pointers"
    },
    {
        "id": 1234,
        "title": "replace the substring for balanced string",
        "content": "give string contain kind character string say balanced character appear time length string return minimum length substring replace string length make original string balance return string already balance multiple contain",
        "label": "two-pointers"
    },
    {
        "id": 1248,
        "title": "count number of nice subarrays",
        "content": "give array integer integer continuous subarray call nice odd number return number nice sub array",
        "label": "two-pointers"
    },
    {
        "id": 125,
        "title": "valid palindrome",
        "content": "give string determine palindrome consider alphanumeric character ignore case",
        "label": "two-pointers"
    },
    {
        "id": 141,
        "title": "linked list cycle",
        "content": "give head link list determine link list cycle cycle link list node list reach continuously follow pointer internally use denote index node tail 's pointer connect note pass parameter return cycle link list otherwise return number node list range valid index link list",
        "label": "two-pointers"
    },
    {
        "id": 142,
        "title": "linked list cycle ii",
        "content": "give linked list return node cycle begin cycle return cycle link list node list reach continuously follow pointer internally use denote index node tail 's pointer connect note pass parameter notice modify link list number node list range valid index link list",
        "label": "two-pointers"
    },
    {
        "id": 15,
        "title": "3sum",
        "content": "give array integer element find unique triplet array give sum zero notice solution set must contain duplicate triplet",
        "label": "two-pointers"
    },
    {
        "id": 16,
        "title": "3sum closest",
        "content": "give array integer integer find three integer sum close return sum three integer may assume input would exactly one solution",
        "label": "two-pointers"
    },
    {
        "id": 1610,
        "title": "maximum number of visible points",
        "content": "give array integer denote integral coordinate plane initially face directly east position move position rotate word change field view degree represent determine wide see give view direction let amount degree rotate counterclockwise field view inclusive range angle see set point point angle form point position immediate east direction position field view multiple point one coordinate may point location always see point regardless rotation point obstruct vision point return maximum number point see",
        "label": "two-pointers"
    },
    {
        "id": 1616,
        "title": "split two strings to make palindrome",
        "content": "give two string length choose index split string index split two string split two string check form palindrome split string either allow empty example valid split return possible form palindrome string otherwise return notice denote concatenation string consist lowercase english letter",
        "label": "greedy"
    },
    {
        "id": 1658,
        "title": "minimum operations to reduce x to zero",
        "content": "give integer array integer one operation either remove leftmost rightmost element array subtract value note modify array future operation return minimum number operation reduce exactly 's possible otherwise return",
        "label": "binary-search"
    },
    {
        "id": 167,
        "title": "two sum ii - input array is sorted",
        "content": "give array integer already sort ascend order find two number add specific target number function twosum return index two number add target index1 must less index2",
        "label": "binary-search"
    },
    {
        "id": 18,
        "title": "4sum",
        "content": "give array integer integer element find unique quadruplet array give sum notice solution set must contain duplicate quadruplet",
        "label": "hash-table"
    },
    {
        "id": 19,
        "title": "remove nth node from end of list",
        "content": "give link list remove node end list return head",
        "label": "two-pointers"
    },
    {
        "id": 209,
        "title": "minimum size subarray sum",
        "content": "give array positive integer positive integer find minimal length contiguous subarray sum n't one return instead",
        "label": "binary-search"
    },
    {
        "id": 234,
        "title": "palindrome linked list",
        "content": "give singly link list determine palindrome",
        "label": "two-pointers"
    },
    {
        "id": 26,
        "title": "remove duplicates from sorted array",
        "content": "give sort array nums remove duplicate place element appear return new length allocate extra space another array must modify input array place extra memory clarification confuse return value integer answer array note input array pass reference mean modification input array know caller well internally think sort ascend order",
        "label": "two-pointers"
    },
    {
        "id": 27,
        "title": "remove element",
        "content": "give array nums value val remove instance value place return new length allocate extra space another array must modify input array place extra memory order element change n't matter leave beyond new length clarification confuse return value integer answer array note input array pass reference mean modification input array know caller well internally think",
        "label": "two-pointers"
    },
    {
        "id": 28,
        "title": "implement strstr()",
        "content": "implement strstr return index first occurrence needle haystack part clarification return empty string great question ask interview purpose problem return empty string consistent 's strstr java 's indexof consist low case english character",
        "label": "two-pointers"
    },
    {
        "id": 283,
        "title": "move zeroes",
        "content": "give array write function move 's end maintaining relative order non zero element note must place without make copy array minimize total number operation",
        "label": "two-pointers"
    },
    {
        "id": 287,
        "title": "find the duplicate number",
        "content": "give array integer contain integer integer range inclusive one duplicate number return duplicate number",
        "label": "binary-search"
    },
    {
        "id": 3,
        "title": "longest substring without repeating characters",
        "content": "give string find length long substring without repeat character consist english letter digit symbol space",
        "label": "hash-table"
    },
    {
        "id": 30,
        "title": "substring with concatenation of all words",
        "content": "give string array string length return start index substring concatenation word exactly order without intervene character return answer order consist low case english letter consist low case english letter",
        "label": "hash-table"
    },
    {
        "id": 344,
        "title": "reverse string",
        "content": "write function revers string input string give array character allocate extra space another array must modify input array place extra memory may assume character consist printable ascii character",
        "label": "two-pointers"
    },
    {
        "id": 345,
        "title": "reverse vowels of a string",
        "content": "write function take string input reverse vowel string",
        "label": "two-pointers"
    },
    {
        "id": 349,
        "title": "intersection of two arrays",
        "content": "give two array write function compute intersection",
        "label": "binary-search"
    },
    {
        "id": 350,
        "title": "intersection of two arrays ii",
        "content": "give two array write function compute intersection",
        "label": "binary-search"
    },
    {
        "id": 42,
        "title": "trapping rain water",
        "content": "give non negative integer represent elevation map width bar compute much water trap rain",
        "label": "stack"
    },
    {
        "id": 424,
        "title": "longest repeating character replacement",
        "content": "give string consist uppercase english letter perform operation string one operation choose character string change uppercase english character find length long sub string contain repeat letter get perform operation",
        "label": "two-pointers"
    },
    {
        "id": 457,
        "title": "circular array loop",
        "content": "give circular array positive negative integer number index positive move forward step conversely 's negative move backward step since array circular may assume last element 's next element first element first element 's previous element last element determine loop cycle cycle must start end index cycle 's length furthermore movement cycle must follow single direction word cycle must consist forward backward movement",
        "label": "two-pointers"
    },
    {
        "id": 524,
        "title": "longest word in dictionary through deleting",
        "content": "give string string dictionary find long string dictionary form delete character give string one possible result return long word small lexicographical order possible result return empty string",
        "label": "two-pointers"
    },
    {
        "id": 532,
        "title": "k-diff pairs in an array",
        "content": "give array integer integer return number unique diff pair array diff pair integer pair follow true notice denote absolute value",
        "label": "two-pointers"
    },
    {
        "id": 567,
        "title": "permutation in string",
        "content": "give two string s1 s2 write function return true s2 contain permutation s1 word one first string 's permutation substring second string input string contain low case letter length give string range",
        "label": "two-pointers"
    },
    {
        "id": 61,
        "title": "rotate list",
        "content": "give link list rotate list right place number node list range",
        "label": "two-pointers"
    },
    {
        "id": 632,
        "title": "smallest range covering elements from k lists",
        "content": "list sort integer non decrease order find small range include least one number list define range small range sort non decrease order",
        "label": "hash-table"
    },
    {
        "id": 713,
        "title": "subarray product less than k",
        "content": "give array positive integer count print number contiguous subarrays product element subarray less",
        "label": "two-pointers"
    },
    {
        "id": 75,
        "title": "sort colors",
        "content": "give array object color red white blue sort place object color adjacent color order red white blue use integer represent color red white blue respectively",
        "label": "two-pointers"
    },
    {
        "id": 76,
        "title": "minimum window substring",
        "content": "give two string return minimum window contain character window cover character return empty string note window guarantee always one unique minimum window consist english letter",
        "label": "hash-table"
    },
    {
        "id": 763,
        "title": "partition labels",
        "content": "string lowercase english letter give want partition string many part possible letter appear one part return list integer represent size part",
        "label": "greedy"
    },
    {
        "id": 80,
        "title": "remove duplicates from sorted array ii",
        "content": "give sort array nums remove duplicate place duplicate appear twice return new length allocate extra space another array must modify input array place extra memory clarification confuse return value integer answer array note input array pass reference mean modification input array know caller internally think sort ascend order",
        "label": "two-pointers"
    },
    {
        "id": 826,
        "title": "most profit assigning work",
        "content": "job difficulty th job profit th job worker ability th worker mean worker complete job difficulty every worker assign one job one job complete multiple time example people attempt job pay total profit worker complete job profit profit make",
        "label": "two-pointers"
    },
    {
        "id": 828,
        "title": "count unique characters of all substrings of a given string",
        "content": "let 's define function return number unique character example unique character since appear therefore problem give string need return sum substring notice substring repeat case count repeat one since answer large return answer modulo contain upper case english letter",
        "label": "two-pointers"
    },
    {
        "id": 838,
        "title": "push dominoes",
        "content": "domino line place domino vertically upright begin simultaneously push domino either leave right second domino fall leave push adjacent domino leave similarly domino fall right push adjacent domino stand right vertical domino domino fall side stay still due balance force purpose question consider fall domino expend additional force fall already fall domino give string represent initial state th domino push leave th domino push right th domino push return string represent final state",
        "label": "dynamic-programming"
    },
    {
        "id": 844,
        "title": "backspace string compare",
        "content": "give two string return equal type empty text editor mean backspace character note backspace empty text text continue empty",
        "label": "stack"
    },
    {
        "id": 845,
        "title": "longest mountain in array",
        "content": "may recall array mountain array exist index index give integer array return length long subarray mountain return mountain subarray",
        "label": "two-pointers"
    },
    {
        "id": 86,
        "title": "partition list",
        "content": "give link list value partition node less come node great equal preserve original relative order node two partition",
        "label": "two-pointers"
    },
    {
        "id": 88,
        "title": "merge sorted array",
        "content": "give two sorted integer array nums1 nums2 merge nums2 nums1 one sort array",
        "label": "two-pointers"
    },
    {
        "id": 881,
        "title": "boats to save people",
        "content": "th person weight boat carry maximum weight boat carry people time provide sum weight people return minimum number boat carry every give person guarantee person carry boat",
        "label": "greedy"
    },
    {
        "id": 904,
        "title": "fruit into baskets",
        "content": "row tree th tree produce fruit type start tree choice repeatedly perform follow step add one piece fruit tree basket stop move next tree right current tree tree right stop note choice initial choice start tree must perform step step back step step stop two basket basket carry quantity fruit want basket carry one type fruit total amount fruit collect procedure",
        "label": "two-pointers"
    },
    {
        "id": 923,
        "title": "3sum with multiplicity",
        "content": "give integer array integer return number tuples answer large return modulo",
        "label": "two-pointers"
    },
    {
        "id": 925,
        "title": "long pressed name",
        "content": "friend type keyboard sometimes type character key might get long pressed character type time examine character keyboard return possible friend name character possibly none long pressed character lowercase letter",
        "label": "two-pointers"
    },
    {
        "id": 930,
        "title": "binary subarrays with sum",
        "content": "array many non empty subarrays sum",
        "label": "hash-table"
    },
    {
        "id": 948,
        "title": "bag of tokens",
        "content": "initial power initial score bag value token indexed goal maximize total score potentially play token one two way current power least may play token face lose power gain score current score least may play token face gain power lose score token may play order play token return large possible score achieve play number token",
        "label": "greedy"
    },
    {
        "id": 977,
        "title": "squares of a sorted array",
        "content": "give array integer sort non decrease order return array square number also sort non decreasing order sort non decrease order",
        "label": "two-pointers"
    },
    {
        "id": 986,
        "title": "interval list intersections",
        "content": "give two list close interval list interval pairwise disjoint sort order return intersection two interval list formally close interval denote set real number intersection two close interval set real number either empty represent closed interval example intersection",
        "label": "two-pointers"
    },
    {
        "id": 992,
        "title": "subarrays with k different integers",
        "content": "give array positive integer call contiguous necessarily distinct subarray good number different integer subarray exactly example different integer return number good subarrays",
        "label": "hash-table"
    },
    {
        "id": 1003,
        "title": "check if word is valid after substitutions",
        "content": "give string determine valid string valid start empty string transform perform follow operation number time insert string position formally become note may empty return valid string otherwise return consist letter",
        "label": "stack"
    },
    {
        "id": 1019,
        "title": "next greater node in linked list",
        "content": "give link list first node let 's number node list etc node may next large value small possible choice exist next large value return array integer note example input output arrays represent serialization link list head node value second node value third node value",
        "label": "stack"
    },
    {
        "id": 1021,
        "title": "remove outermost parentheses",
        "content": "valid parenthesis string either empty valid parenthesis string represent string concatenation example valid parenthesis string valid parenthesis string primitive nonempty exist way split nonempty valid parenthesis string give valid parenthesis string consider primitive decomposition primitive valid parenthesis string return remove outermost parenthesis every primitive string primitive decomposition",
        "label": "stack"
    },
    {
        "id": 103,
        "title": "binary tree zigzag level order traversal",
        "content": "give binary tree return zigzag level order traversal node value ie leave right right leave next level alternate example give binary tree return zigzag level order traversal",
        "label": "breadth-first-search"
    },
    {
        "id": 1047,
        "title": "remove all adjacent duplicates in string",
        "content": "give string lowercase letter duplicate removal consist choose two adjacent equal letter remove repeatedly make duplicate removal longer return final string duplicate removal make guarantee answer unique",
        "label": "stack"
    },
    {
        "id": 1081,
        "title": "smallest subsequence of distinct characters",
        "content": "return lexicographically small subsequence contain distinct character exactly",
        "label": "greedy"
    },
    {
        "id": 1124,
        "title": "longest well-performing interval",
        "content": "give list number hour work per day give employee day consider tiring day number hour work strictly great well perform interval interval day number tiring day strictly large number non tire day return length long well perform interval",
        "label": "stack"
    },
    {
        "id": 1130,
        "title": "minimum cost tree from leaf values",
        "content": "give array positive integer consider binary tree node either child value correspond value leaf order traversal tree recall node leaf child value non leaf node equal product large leaf value leave right subtree respectively among possible binary tree consider return small possible sum value non leaf node guarantee sum fit bit integer guarantee answer fit bit signed integer ie less",
        "label": "dynamic-programming"
    },
    {
        "id": 1190,
        "title": "reverse substrings between each pair of parentheses",
        "content": "give string consist low case english letter bracket reverse string pair match parenthesis start innermost one result contain bracket contain low case english character parenthesis 's guaranteed parenthesis balance",
        "label": "stack"
    },
    {
        "id": 1209,
        "title": "remove all adjacent duplicates in string ii",
        "content": "give string duplicate removal consist choose adjacent equal letter remove causing leave right side delete substring concatenate together repeatedly make duplicate removal longer return final string duplicate removal make guarantee answer unique contain low case english letter",
        "label": "stack"
    },
    {
        "id": 1249,
        "title": "minimum remove to make valid parentheses",
        "content": "give string lowercase english character task remove minimum number parenthesis position result parenthesis string valid return valid string formally parentheses string valid empty string contain lowercase character write concatenated valid string write valid string one lowercase english letter",
        "label": "stack"
    },
    {
        "id": 1381,
        "title": "design a stack with increment operation",
        "content": "design stack support follow operation implement class initialize object maximum number element stack nothing stack reach add top stack stack n't reach pop return top stack stack empty increment bottom element stack less element stack increment element stack call make method separately",
        "label": "stack"
    },
    {
        "id": 1410,
        "title": "html entity parser",
        "content": "html entity parser parser take html code input replace entity special character character special character entity html quotation mark entity symbol character single quote mark entity symbol character ampersand entity symbol character great sign entity symbol character less sign entity symbol character slash entity symbol character give input string html parser implement entity parser return text replace entity special character string may contain possible character ascii character",
        "label": "stack"
    },
    {
        "id": 144,
        "title": "binary tree preorder traversal",
        "content": "give binary tree return preorder traversal node value number node tree range",
        "label": "stack"
    },
    {
        "id": 1441,
        "title": "build an array with stack operations",
        "content": "give array integer iteration read number build array use follow operation push read new element begin push array pop delete last element array target array already build stop reading element guarantee target array strictly increase contain number inclusive return operation build target array guarantee answer unique strictly increase",
        "label": "stack"
    },
    {
        "id": 145,
        "title": "binary tree postorder traversal",
        "content": "give binary tree return postorder traversal node value number node tree range",
        "label": "stack"
    },
    {
        "id": 150,
        "title": "evaluate reverse polish notation",
        "content": "evaluate value arithmetic expression reverse polish notation valid operator operand may integer another expression",
        "label": "stack"
    },
    {
        "id": 1541,
        "title": "minimum insertions to balance a parentheses string",
        "content": "give parenthesis string contain character parenthesis string balanced left parenthesis must correspond two consecutive right parenthesis left parenthesis must go correspond two consecutive right parenthesis word treat openning parenthesis closing parenthesis example balance balance insert character position string balance need return minimum number insertion need make balanced consist",
        "label": "stack"
    },
    {
        "id": 1544,
        "title": "make the string great",
        "content": "give string low upper case english letter good string string n't two adjacent character low case letter letter upper case vice versa make string good choose two adjacent character make string bad remove keep string becomes good return string make good answer guarantee unique give constraint notice empty string also good contain low upper case english letter",
        "label": "stack"
    },
    {
        "id": 1598,
        "title": "crawler log folder",
        "content": "leetcode file system keep log time user perform change folder operation operation describe move parent folder current folder already main folder remain folder remain folder move child folder name folder guarantee always exist give list string operation perform user step file system start main folder operation perform return minimum number operation need go back main folder change folder operation contain lowercase english letter digit follow format describe statement folder name consist lowercase english letter digit",
        "label": "stack"
    },
    {
        "id": 173,
        "title": "binary search tree iterator",
        "content": "implement iterator binary search tree bst iterator initialize root node bst call return next small number bst",
        "label": "stack"
    },
    {
        "id": 20,
        "title": "valid parentheses",
        "content": "give string contain character determine input string valid input string valid open bracket must close type bracket open bracket must close correct order consist parenthesis",
        "label": "stack"
    },
    {
        "id": 224,
        "title": "basic calculator",
        "content": "implement basic calculator evaluate simple expression string expression string may contain open closing parenthesis plus minus sign non negative integer empty space",
        "label": "stack"
    },
    {
        "id": 225,
        "title": "implement stack using queues",
        "content": "implement last first lifo stack use two queue implement stack support function normal queue implement class push element top stack remove element top stack return return element top stack return stack empty otherwise",
        "label": "stack"
    },
    {
        "id": 227,
        "title": "basic calculator ii",
        "content": "implement basic calculator evaluate simple expression string expression string contain non negative integer operator empty space integer division truncate toward zero",
        "label": "stack"
    },
    {
        "id": 232,
        "title": "implement queue using stacks",
        "content": "implement first first fifo queue use two stack implement queue support function normal queue implement class push element back queue remove element front queue return return element front queue return queue empty otherwise",
        "label": "stack"
    },
    {
        "id": 316,
        "title": "remove duplicate letters",
        "content": "give string remove duplicate letter every letter appear must make sure result small lexicographical order among possible result",
        "label": "greedy"
    },
    {
        "id": 331,
        "title": "verify preorder serialization of a binary tree",
        "content": "one way serialize binary tree use pre order traversal encounter non null node record node 's value null node record use sentinel value example binary tree serialize string represent null node give string comma separate value verify whether correct preorder traversal serialization binary tree find algorithm without reconstruct tree comma separate value string must either integer character represent pointer may assume input format always valid example could never contain two consecutive comma",
        "label": "stack"
    },
    {
        "id": 341,
        "title": "flatten nested list iterator",
        "content": "give nested list integer implement iterator flatten element either integer list whose element may also integers list",
        "label": "stack"
    },
    {
        "id": 385,
        "title": "mini parser",
        "content": "give nested list integer represent string implement parser deserialize element either integer list whose element may also integers list",
        "label": "stack"
    },
    {
        "id": 394,
        "title": "decode string",
        "content": "give encode string return decode string encode rule encoded_string inside square bracket repeat exactly time note guarantee positive integer may assume input string always valid extra white space square bracket well form etc furthermore may assume original data contain digits digit repeat number example wo n't input like consist lowercase english letter digit square bracket guarantee valid input integer range",
        "label": "depth-first-search"
    },
    {
        "id": 402,
        "title": "remove k digits",
        "content": "give non negative integer num represent string remove digit number new number small possible",
        "label": "greedy"
    },
    {
        "id": 42,
        "title": "trapping rain water",
        "content": "give non negative integer represent elevation map width bar compute much water trap rain",
        "label": "two-pointers"
    },
    {
        "id": 456,
        "title": "132 pattern",
        "content": "give array integer pattern subsequence three integer return pattern otherwise return",
        "label": "stack"
    },
    {
        "id": 496,
        "title": "next greater element i",
        "content": "give two array without duplicate element subset find next great number 's element correspond place next great number number first great number right exist output number",
        "label": "stack"
    },
    {
        "id": 503,
        "title": "next greater element ii",
        "content": "give circular array next element last element first element array print next great number every element next great number number first great number traverse order next array mean could search circularly find next great number n't exist output number",
        "label": "stack"
    },
    {
        "id": 591,
        "title": "tag validator",
        "content": "give string represent code snippet need implement tag validator parse code return whether valid code snippet valid following rule hold code must wrap valid closed tag otherwise code invalid closed tag necessarily valid exactly follow format among start tag end tag tag_name start end tag closed tag valid tag_name tag_content valid valid contain upper case letter length range otherwise invalid valid may contain valid close tag cdata character see note1 except unmatched unmatched start end tag unmatched close tag invalid tag_name otherwise invalid start tag unmatched end tag exist tag_name vice versa however also need consider issue unbalance tag nest unmatched find subsequent find subsequent character next parsed tag_name necessarily valid cdata follow format range define character first subsequent may contain character function cdata forbid validator parse even character parse tag matter valid invalid treat regular character valid code example invalid code example",
        "label": "stack"
    },
    {
        "id": 636,
        "title": "exclusive time of functions",
        "content": "single thread cpu execute program containing function function unique id function call store call stack function call start id push onto stack function call end id pop stack function whose id top stack current function execute time function start end write log id whether start end timestamp give list represent log message format string example mean function call function id start begin timestamp mean function call function id end end timestamp note function call multiple time possibly recursively function 's exclusive time sum execution time function call program example function call twice one call execute time unit another call execute time unit exclusive time return exclusive time function array value index represent exclusive time function id two start event happen timestamp two end event happen timestamp function log log",
        "label": "stack"
    },
    {
        "id": 682,
        "title": "baseball game",
        "content": "keep score baseball game strange rule game consist several round score past round may affect future round score begin game start empty record give list string operation must apply record one follow integer record new score record new score sum previous two score guarantee always two previous score record new score double previous score guarantee always previous score invalidate previous score removing record guarantee always previous score return sum score record string represent integer range operation always least two previous score record operation always least one previous score record",
        "label": "stack"
    },
    {
        "id": 71,
        "title": "simplify path",
        "content": "give absolute path file unix style simplify word convert canonical path unix style file system period refer current directory furthermore double period move directory level note return canonical path must always begin slash must single slash two directory name last directory name exist must end trailing also canonical path must shortest string represent absolute path consist english letter digit period slash valid unix path",
        "label": "stack"
    },
    {
        "id": 726,
        "title": "number of atoms",
        "content": "give chemical give string return count atom atomic element always start uppercase character zero lowercase letter represent name one digits represent element 's count may follow count great count digit follow example h2o h2o2 possible h1o2 impossible two formula concatenate together produce another formula example h2o2he3mg4 also formula formula place parenthesis count optionally add also formula example h2o2 h2o2 formula give return count element string follow form first name sort order follow count count follow second name sort order follow count count consist english letter digit always valid",
        "label": "hash-table"
    },
    {
        "id": 735,
        "title": "asteroid collision",
        "content": "give array integer represent asteroid row asteroid absolute value represent size sign represent direction positive meaning right negative meaning leave asteroid move speed find state asteroid collision two asteroid meet small one explode size explode two asteroid move direction never meet",
        "label": "stack"
    },
    {
        "id": 739,
        "title": "daily temperatures",
        "content": "give list daily temperature return list day input tell many day would wait warm temperature future day possible put instead example give list temperature output",
        "label": "hash-table"
    },
    {
        "id": 770,
        "title": "basic calculator iv",
        "content": "give evaluation map give term return list token represent simplified expression expression alternate chunk symbol space separate chunk symbol chunk either expression parentheses variable non negative integer variable string lowercase letter include digit note variable multiple letter note variable never lead coefficient unary operator like expression evaluate usual order bracket first multiplication addition subtraction example answer format output follow term free variable non zero coefficient write free variable within term sort order lexicographically example would never write term like term degree equal number free variable multiply count multiplicity example degree write large degree term answer first break tie lexicographic order ignore leading coefficient term lead coefficient term place directly leave asterisk separate variable exist lead coefficient still print example well format answer term include constant term coefficient include example expression output example",
        "label": "hash-table"
    },
    {
        "id": 84,
        "title": "largest rectangle in histogram",
        "content": "give non negative integer represent histogram 's bar height width bar find area large rectangle histogram",
        "label": "stack"
    },
    {
        "id": 844,
        "title": "backspace string compare",
        "content": "give two string return equal type empty text editor mean backspace character note backspace empty text text continue empty",
        "label": "two-pointers"
    },
    {
        "id": 85,
        "title": "maximal rectangle",
        "content": "give binary fill 's 's find large rectangle contain 's return area",
        "label": "hash-table"
    },
    {
        "id": 856,
        "title": "score of parentheses",
        "content": "give balanced parenthesis string compute score string base follow rule score score balanced parenthesis string score balance parenthesis string",
        "label": "stack"
    },
    {
        "id": 880,
        "title": "decoded string at index",
        "content": "encoded string give find write decoded string tape encode string read one character time follow step take character read letter letter write onto tape character read digit say entire current tape repeatedly write time total encode string index find return th letter indexed decode string contain lowercase letter digits start letter 's guarantee less equal length decode string decode string guaranteed less letter",
        "label": "stack"
    },
    {
        "id": 895,
        "title": "maximum frequency stack",
        "content": "implement class simulate operation stack like data structure two function push integer onto stack remove return frequent element stack tie frequent element element close top stack remove return",
        "label": "hash-table"
    },
    {
        "id": 901,
        "title": "online stock span",
        "content": "write class collect daily price quote stock return span stock 's price current day span stock 's price today define maximum number consecutive day start today go backwards price stock less equal today 's price example price stock next day stock span would",
        "label": "stack"
    },
    {
        "id": 907,
        "title": "sum of subarray minimums",
        "content": "give array integer find sum range every contiguous subarray since answer may large return answer modulo",
        "label": "stack"
    },
    {
        "id": 921,
        "title": "minimum add to make parentheses valid",
        "content": "give string parenthesis add minimum number parenthesis position result parenthesis string valid formally parentheses string valid empty string write concatenated valid string write valid string give parenthesis string return minimum number parenthesis must add make result string valid",
        "label": "greedy"
    },
    {
        "id": 94,
        "title": "binary tree inorder traversal",
        "content": "give binary tree return inorder traversal node value number node tree range",
        "label": "hash-table"
    },
    {
        "id": 946,
        "title": "validate stack sequences",
        "content": "give two sequence distinct value return could result sequence push pop operation initially empty stack permutation distinct value",
        "label": "stack"
    },
    {
        "id": 975,
        "title": "odd even jump",
        "content": "give integer array start index make series jump 1st 3rd 5th jump series call odd number jump 2nd 4th 6th jump series call even number jump note jump number index may jump forward index index follow way odd number jump jump jump index small possible value multiple index jump small index even numbered jump jump jump index large possible value multiple index jump small index may case index legal jump start index good start index reach end array index jump number time possibly return number good starting index",
        "label": "dynamic-programming"
    },
    {
        "id": 10,
        "title": "regular expression matching",
        "content": "give input string pattern implement regular expression match support match single character match zero precede element match cover entire input string partial contain lowercase english letter contain lowercase english letter guarantee appearance character previous valid character match",
        "label": "dynamic-programming"
    },
    {
        "id": 1079,
        "title": "letter tile possibilities",
        "content": "tile one letter print return number possible non empty sequence letter make use letter print consist uppercase english letter",
        "label": "backtracking"
    },
    {
        "id": 1219,
        "title": "path with maximum gold",
        "content": "gold mine size cell mine integer represent amount gold cell empty return maximum amount gold collect condition every time locate cell collect gold cell position walk one step leave right ca n't visit cell never visit cell gold start stop collect gold position grid gold cell contain gold",
        "label": "backtracking"
    },
    {
        "id": 1239,
        "title": "maximum length of a concatenated string with unique characters",
        "content": "give array string string concatenation sub sequence unique character return maximum possible length contain low case english letter",
        "label": "backtracking"
    },
    {
        "id": 1240,
        "title": "tiling a rectangle with the fewest squares",
        "content": "give rectangle size find minimum number integer side square tile rectangle",
        "label": "dynamic-programming"
    },
    {
        "id": 126,
        "title": "word ladder ii",
        "content": "give two word beginword endword dictionary 's word list find short transformation sequence beginword endword one letter change time transform word must exist word list note beginword transform word",
        "label": "breadth-first-search"
    },
    {
        "id": 1286,
        "title": "iterator for combination",
        "content": "design iterator class constructor take string sort distinct lowercase english letter number argument function next return next combination length lexicographical order function hasnext return exist next combination function call per test 's guaranteed call function valid",
        "label": "backtracking"
    },
    {
        "id": 1291,
        "title": "sequential digits",
        "content": "integer sequential digit digit number one previous digit return sort list integer range inclusive sequential digit",
        "label": "backtracking"
    },
    {
        "id": 1307,
        "title": "verbal arithmetic puzzle",
        "content": "give equation represent leave side right side need check equation solvable following rule character decode one digit every pair different character must map different digit decode one number without lead zero sum number leave side equal number right side return equation solvable otherwise return contain upper case english letter number different character use expression",
        "label": "backtracking"
    },
    {
        "id": 131,
        "title": "palindrome partitioning",
        "content": "give string partition every substring partition palindrome return possible palindrome partitioning",
        "label": "backtracking"
    },
    {
        "id": 140,
        "title": "word break ii",
        "content": "give non empty string dictionary worddict contain list non empty word add space construct sentence word valid dictionary word return possible sentence",
        "label": "dynamic-programming"
    },
    {
        "id": 1415,
        "title": "the k-th lexicographical string of all happy strings of length n",
        "content": "happy string string consist letter set value string indexed example string abc ac abcbabcbcb happy string string aa baa ababbc happy string give two integer consider list happy string length sort lexicographical order return kth string list return empty string less happy string length",
        "label": "backtracking"
    },
    {
        "id": 1467,
        "title": "probability of a two boxes having the same number of distinct balls",
        "content": "give ball distinct color give integer array size number ball color ball shuffle uniformly random distribute first ball first box remain ball box please read explanation second example carefully please note two box consider different example two ball color two box distribution consider different distribution please read explanation first example carefully want calculate probability two box number distinct ball even answer within actual value accept correct",
        "label": "backtracking"
    },
    {
        "id": 1593,
        "title": "split a string into the max number of unique substrings",
        "content": "give string return maximum number unique substring give string split split string list non empty substring concatenation substring form original string however must split substring unique substring contiguous sequence character within string contain low case english letter",
        "label": "backtracking"
    },
    {
        "id": 1617,
        "title": "count subtrees with max distance between cities",
        "content": "city number give array size represent bidirectional edge city exist unique path pair city word city form tree subtree subset city every city reachable every city subset path pair pass city subset two subtrees different city one subtree present find number subtrees maximum distance two city subtree equal return array size element indexed number subtrees maximum distance two city equal notice distance two city number edge path pair distinct",
        "label": "backtracking"
    },
    {
        "id": 1641,
        "title": "count sorted vowel strings",
        "content": "give integer return number string length consist vowel lexicographically sort string lexicographically sort valid come alphabet",
        "label": "dynamic-programming"
    },
    {
        "id": 1655,
        "title": "distribute repeating integers",
        "content": "give array integer unique value array also give array customer order quantity amount integer customer order determine possible distribute customer get exactly integer integer customer get equal every customer satisfy return possible distribute accord condition unique value",
        "label": "dynamic-programming"
    },
    {
        "id": 1659,
        "title": "maximize grid happiness",
        "content": "give four integer grid two type people introvert extrovert introvert extrovert decide many people want live grid assign one grid cell note people live grid happiness person calculate follow introvert start happiness lose happiness neighbor introvert extrovert extrovert start happiness gain happiness neighbor introvert extrovert neighbor live directly adjacent cell north east south west person 's cell grid happiness sum person 's happiness return maximum possible grid happiness",
        "label": "dynamic-programming"
    },
    {
        "id": 17,
        "title": "letter combinations of a phone number",
        "content": "give string contain digit inclusive return possible letter combination number could represent return answer order map digit letter like telephone button give note map letter digit range",
        "label": "backtracking"
    },
    {
        "id": 211,
        "title": "design add and search words data structure",
        "content": "design data structure support add new word find string match previously add string implement class initialize object add data structure match later return string data structure match otherwise may contain dot dot match letter consist low case english letter consist low case english letter call make",
        "label": "backtracking"
    },
    {
        "id": 212,
        "title": "word search ii",
        "content": "give character list string return word board word must construct letter sequentially adjacent cell adjacent cell horizontally vertically neighbor letter cell may use word lowercase english letter consist lowercase english letter string unique",
        "label": "backtracking"
    },
    {
        "id": 216,
        "title": "combination sum iii",
        "content": "find valid combination number sum follow condition true number use number use return list possible valid combination list must contain combination twice combination may return order",
        "label": "backtracking"
    },
    {
        "id": 22,
        "title": "generate parentheses",
        "content": "give pair parentheses write function generate combination well form parenthesis",
        "label": "backtracking"
    },
    {
        "id": 306,
        "title": "additive number",
        "content": "additive number string whose digit form additive sequence valid additive sequence contain least three number except first two number subsequent number sequence must sum precede two give string contain digit write function determine 's additive number",
        "label": "backtracking"
    },
    {
        "id": 357,
        "title": "count numbers with unique digits",
        "content": "give non negative integer count number unique digit",
        "label": "dynamic-programming"
    },
    {
        "id": 37,
        "title": "sudoku solver",
        "content": "write program solve sudoku puzzle fill empty cell sudoku solution must satisfy follow rule digit must occur exactly row digit must occur exactly column digit must occur exactly sub box grid character indicate empty cell digit guarantee input board one solution",
        "label": "hash-table"
    },
    {
        "id": 39,
        "title": "combination sum",
        "content": "give array distinct integer target integer return list unique combination choose number sum may return combination order number may choose unlimited number time two combination unique frequency least one chosen number different guarantee number unique combination sum less combination give input element distinct",
        "label": "backtracking"
    },
    {
        "id": 40,
        "title": "combination sum ii",
        "content": "give collection candidate number target number find unique combination candidate number sum number may use combination",
        "label": "backtracking"
    },
    {
        "id": 401,
        "title": "binary watch",
        "content": "binary watch led top represent hour leds bottom represent minute lead represent zero one least significant bit right example binary watch read give non negative integer represent number led currently return possible time watch could represent",
        "label": "backtracking"
    },
    {
        "id": 44,
        "title": "wildcard matching",
        "content": "give input string pattern implement wildcard pattern match support match single character match sequence character include empty sequence match cover entire input string partial contain lowercase english letter contain lowercase english letter",
        "label": "greedy"
    },
    {
        "id": 46,
        "title": "permutations",
        "content": "give array distinct integer return possible permutation return answer order integer unique",
        "label": "backtracking"
    },
    {
        "id": 47,
        "title": "permutations ii",
        "content": "give collection number might contain duplicate return possible unique permutation order",
        "label": "backtracking"
    },
    {
        "id": 51,
        "title": "n-queens",
        "content": "queen puzzle problem placing queen chessboard two queen attack give integer return distinct solution queen puzzle solution contain distinct board configuration queen placement indicate queen empty space respectively",
        "label": "backtracking"
    },
    {
        "id": 52,
        "title": "n-queens ii",
        "content": "queen puzzle problem placing queen chessboard two queen attack give integer return number distinct solution queen puzzle",
        "label": "backtracking"
    },
    {
        "id": 526,
        "title": "beautiful arrangement",
        "content": "suppose integer define beautiful arrangement array construct number successfully one follow true ith position array number ith position divisible divisible number ith position give many beautiful arrangement construct",
        "label": "backtracking"
    },
    {
        "id": 60,
        "title": "permutation sequence",
        "content": "set contain total unique permutation list label permutation order get follow sequence give return permutation sequence",
        "label": "backtracking"
    },
    {
        "id": 691,
        "title": "stickers to spell word",
        "content": "give different type sticker sticker lowercase english word would like spell give string cut individual letter collection sticker rearrange use sticker want infinite quantity sticker minimum number sticker need spell task impossible return input output explanation input output explanation",
        "label": "dynamic-programming"
    },
    {
        "id": 77,
        "title": "combinations",
        "content": "give two integer return possible combination number may return answer order",
        "label": "backtracking"
    },
    {
        "id": 78,
        "title": "subsets",
        "content": "give integer array return possible subset power set solution set must contain duplicate subset",
        "label": "backtracking"
    },
    {
        "id": 784,
        "title": "letter case permutation",
        "content": "give string transform every letter individually lowercase uppercase create another string return list possible string could create return output order string length consist letter digit",
        "label": "backtracking"
    },
    {
        "id": 79,
        "title": "word search",
        "content": "give find word exist grid word construct letter sequentially adjacent cell adjacent cell horizontally vertically neighbor letter cell may use consist lowercase uppercase english letter",
        "label": "backtracking"
    },
    {
        "id": 797,
        "title": "all paths from source to target",
        "content": "give direct acyclic graph dag node label find possible paths node node return order graph give follow list node visit node direct edge node node self loop input graph guarantee dag",
        "label": "depth-first-search"
    },
    {
        "id": 842,
        "title": "split array into fibonacci sequence",
        "content": "give string digit split fibonacci like sequence formally fibonacci like sequence list non negative integer integer fit bit signed integer type andfor also note split string piece piece must extra lead zero except piece number return fibonacci like sequence split return do",
        "label": "greedy"
    },
    {
        "id": 89,
        "title": "gray code",
        "content": "gray code binary numeral system two successive value differ one bit give non negative integer represent total number bit code print sequence gray code gray code sequence must begin",
        "label": "backtracking"
    },
    {
        "id": 90,
        "title": "subsets ii",
        "content": "give collection integer might contain duplicate nums return possible subset power set",
        "label": "backtracking"
    },
    {
        "id": 93,
        "title": "restore ip addresses",
        "content": "give string contain digit return possible valid ip address obtain return order valid ip address consist exactly four integer integer separate single dot lead zero example valid ip address invalid ip address consist digit",
        "label": "backtracking"
    },
    {
        "id": 980,
        "title": "unique paths iii",
        "content": "dimensional type square represent start square exactly one start square represent end square exactly one end square represent empty square walk represent obstacle walk return number directional walk start square end square walk every non obstacle square exactly",
        "label": "depth-first-search"
    },
    {
        "id": 996,
        "title": "number of squareful arrays",
        "content": "give array non negative integer array squareful every pair adjacent element sum perfect square return number permutation squareful two permutation differ index",
        "label": "backtracking"
    }
]