{
    "id": 591,
    "title": "Tag Validator",
    "title_slug": "tag-validator",
    "backend_id": 591,
    "content": "Given a string representing a code snippet, you need to implement a tag validator to parse the code and return whether it is valid. A code snippet is valid if all the following rules hold: The code must be wrapped in a valid closed tag. Otherwise, the code is invalid. A closed tag (not necessarily valid) has exactly the following format : . Among them, is the start tag, and is the end tag. The TAG_NAME in start and end tags should be the same. A closed tag is valid if and only if the TAG_NAME and TAG_CONTENT are valid. A valid only contain upper-case letters, and has length in range [1,9]. Otherwise, the is invalid. A valid may contain other valid closed tags, cdata and any characters (see note1) EXCEPT unmatched , unmatched start and end tag, and unmatched or closed tags with invalid TAG_NAME. Otherwise, the is invalid. A start tag is unmatched if no end tag exists with the same TAG_NAME, and vice versa. However, you also need to consider the issue of unbalanced when tags are nested. A is unmatched if you cannot find a subsequent . And when you find a or , all the subsequent characters until the next should be parsed as TAG_NAME (not necessarily valid). The cdata has the following format : . The range of is defined as the characters between and the first subsequent . may contain any characters. The function of cdata is to forbid the validator to parse , so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as regular characters. Valid Code Examples: Invalid Code Examples:"
}