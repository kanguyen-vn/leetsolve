{
    "id": 1352,
    "title": "Product of the Last K Numbers",
    "title_slug": "product-of-the-last-k-numbers",
    "backend_id": 1477,
    "content": "<div><p>Implement the class <code>ProductOfNumbers</code>&nbsp;that supports two methods:</p>\n\n<p>1.<code>&nbsp;add(int num)</code></p>\n\n<ul>\n\t<li>Adds the number <code>num</code> to the back of the current list of numbers.</li>\n</ul>\n\n<p>2.<code> getProduct(int k)</code></p>\n\n<ul>\n\t<li>Returns the product of the last <code>k</code> numbers in the current list.</li>\n\t<li>You can assume that always the current list has <strong>at least</strong> <code>k</code> numbers.</li>\n</ul>\n\n<p>At any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example:</strong></p>\n\n<pre><strong>Input</strong>\n[\"ProductOfNumbers\",\"add\",\"add\",\"add\",\"add\",\"add\",\"getProduct\",\"getProduct\",\"getProduct\",\"add\",\"getProduct\"]\n[[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]\n\n<strong>Output</strong>\n[null,null,null,null,null,null,20,40,0,null,32]\n\n<strong>Explanation</strong>\nProductOfNumbers productOfNumbers = new ProductOfNumbers();\nproductOfNumbers.add(3);        // [3]\nproductOfNumbers.add(0);        // [3,0]\nproductOfNumbers.add(2);        // [3,0,2]\nproductOfNumbers.add(5);        // [3,0,2,5]\nproductOfNumbers.add(4);        // [3,0,2,5,4]\nproductOfNumbers.getProduct(2); // return 20. The product of the last 2 numbers is 5 * 4 = 20\nproductOfNumbers.getProduct(3); // return 40. The product of the last 3 numbers is 2 * 5 * 4 = 40\nproductOfNumbers.getProduct(4); // return 0. The product of the last 4 numbers is 0 * 2 * 5 * 4 = 0\nproductOfNumbers.add(8);        // [3,0,2,5,4,8]\nproductOfNumbers.getProduct(2); // return 32. The product of the last 2 numbers is 4 * 8 = 32 \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>There will be at most <code>40000</code>&nbsp;operations considering both <code>add</code> and <code>getProduct</code>.</li>\n\t<li><code>0 &lt;= num&nbsp;&lt;=&nbsp;100</code></li>\n\t<li><code>1 &lt;= k &lt;= 40000</code></li>\n</ul>\n</div>"
}