{
    "id": 722,
    "title": "Remove Comments",
    "title_slug": "remove-comments",
    "backend_id": 722,
    "content": "<div><p>Given a C++ program, remove comments from it. The program <code>source</code> is an array where <code>source[i]</code> is the <code>i</code>-th line of the source code.  This represents the result of splitting the original source code string by the newline character <code>\\n</code>.</p>\n\n<p>In C++, there are two types of comments, line comments, and block comments.</p>\n<p>\nThe string <code>//</code> denotes a line comment, which represents that it and rest of the characters to the right of it in the same line should be ignored.\n</p><p>\nThe string <code>/*</code> denotes a block comment, which represents that all characters until the next (non-overlapping) occurrence of <code>*/</code> should be ignored.  (Here, occurrences happen in reading order: line by line from left to right.)  To be clear, the string <code>/*/</code> does not yet end the block comment, as the ending would be overlapping the beginning.\n</p><p>\nThe first effective comment takes precedence over others: if the string <code>//</code> occurs in a block comment, it is ignored. Similarly, if the string <code>/*</code> occurs in a line or block comment, it is also ignored.\n</p><p>\nIf a certain line of code is empty after removing comments, you must not output that line: each string in the answer list will be non-empty.\n</p><p>\nThere will be no control characters, single quote, or double quote characters.  For example, <code>source = \"string s = \"/* Not a comment. */\";\"</code> will not be a test case.  (Also, nothing else such as defines or macros will interfere with the comments.)\n</p><p>\nIt is guaranteed that every open block comment will eventually be closed, so <code>/*</code> outside of a line or block comment always starts a new comment.\n</p><p>\nFinally, implicit newline characters can be deleted by block comments.  Please see the examples below for details.\n</p>\n\n<p>After removing the comments from the source code, return the source code in the same format.</p>\n\n<p><b>Example 1:</b><br>\n</p><pre style=\"white-space: pre-wrap\"><b>Input:</b> \nsource = [\"/*Test program */\", \"int main()\", \"{ \", \"  // variable declaration \", \"int a, b, c;\", \"/* This is a test\", \"   multiline  \", \"   comment for \", \"   testing */\", \"a = b + c;\", \"}\"]\n\nThe line by line code is visualized as below:\n/*Test program */\nint main()\n{ \n  // variable declaration \nint a, b, c;\n/* This is a test\n   multiline  \n   comment for \n   testing */\na = b + c;\n}\n\n<b>Output:</b> [\"int main()\",\"{ \",\"  \",\"int a, b, c;\",\"a = b + c;\",\"}\"]\n\nThe line by line code is visualized as below:\nint main()\n{ \n  \nint a, b, c;\na = b + c;\n}\n\n<b>Explanation:</b> \nThe string <code>/*</code> denotes a block comment, including line 1 and lines 6-9. The string <code>//</code> denotes line 4 as comments.\n</pre>\n<p></p>\n\n<p><b>Example 2:</b><br>\n</p><pre style=\"white-space: pre-wrap\"><b>Input:</b> \nsource = [\"a/*comment\", \"line\", \"more_comment*/b\"]\n<b>Output:</b> [\"ab\"]\n<b>Explanation:</b> The original source string is \"a/*comment<b>\\n</b>line<b>\\n</b>more_comment*/b\", where we have bolded the newline characters.  After deletion, the <i>implicit</i> newline characters are deleted, leaving the string \"ab\", which when delimited by newline characters becomes [\"ab\"].\n</pre>\n<p></p>\n\n<p><b>Note:</b>\n</p><li>The length of <code>source</code> is in the range <code>[1, 100]</code>.</li>\n<li>The length of <code>source[i]</code> is in the range <code>[0, 80]</code>.</li>\n<li>Every open block comment is eventually closed.</li>\n<li>There are no single-quote, double-quote, or control characters in the source code.</li>\n<p></p></div>"
}