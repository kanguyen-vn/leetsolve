{
    "id": 622,
    "title": "Design Circular Queue",
    "title_slug": "design-circular-queue",
    "backend_id": 860,
    "content": "<div><p>Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. It is also called \"Ring Buffer\".</p>\n\n<p>One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.</p>\n\n<p>Your implementation should support following operations:</p>\n\n<ul>\n\t<li><code>MyCircularQueue(k)</code>: Constructor, set the size of the queue to be k.</li>\n\t<li><code>Front</code>: Get the front item from the queue. If the queue is empty, return -1.</li>\n\t<li><code>Rear</code>: Get the last item from the queue. If the queue is empty, return -1.</li>\n\t<li><code>enQueue(value)</code>: Insert an element into the circular queue. Return true if the operation is successful.</li>\n\t<li><code>deQueue()</code>: Delete an element from the circular queue. Return true if the operation is successful.</li>\n\t<li><code>isEmpty()</code>: Checks whether the circular queue is empty or not.</li>\n\t<li><code>isFull()</code>: Checks whether the circular queue is full or not.</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>Example:</strong></p>\n\n<pre>MyCircularQueue circularQueue = new MyCircularQueue(3); // set the size to be 3\ncircularQueue.enQueue(1); &nbsp;// return true\ncircularQueue.enQueue(2); &nbsp;// return true\ncircularQueue.enQueue(3); &nbsp;// return true\ncircularQueue.enQueue(4); &nbsp;// return false, the queue is full\ncircularQueue.Rear(); &nbsp;// return 3\ncircularQueue.isFull(); &nbsp;// return true\ncircularQueue.deQueue(); &nbsp;// return true\ncircularQueue.enQueue(4); &nbsp;// return true\ncircularQueue.Rear(); &nbsp;// return 4\n</pre>\n&nbsp;\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>All values will be in the range of [0, 1000].</li>\n\t<li>The number of operations will be in the range of&nbsp;[1, 1000].</li>\n\t<li>Please do not use the built-in Queue library.</li>\n</ul>\n</div>"
}