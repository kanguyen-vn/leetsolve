{
    "id": 889,
    "title": "Construct Binary Tree from Preorder and Postorder Traversal",
    "title_slug": "construct-binary-tree-from-preorder-and-postorder-traversal",
    "backend_id": 925,
    "content": "<div><p>Return any binary tree that matches the given preorder and postorder traversals.</p>\n\n<p>Values in the traversals&nbsp;<code>pre</code> and <code>post</code>&nbsp;are distinct&nbsp;positive integers.</p>\n\n<p>&nbsp;</p>\n\n<div>\n<p><strong>Example 1:</strong></p>\n\n<pre><strong>Input: </strong>pre = <span id=\"example-input-1-1\">[1,2,4,5,3,6,7]</span>, post = <span id=\"example-input-1-2\">[4,5,2,6,7,3,1]</span>\n<strong>Output: </strong><span id=\"example-output-1\">[1,2,3,4,5,6,7]</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong><span>Note:</span></strong></p>\n\n<ul>\n\t<li><code>1 &lt;= pre.length == post.length &lt;= 30</code></li>\n\t<li><code>pre[]</code> and <code>post[]</code>&nbsp;are both permutations of <code>1, 2, ..., pre.length</code>.</li>\n\t<li>It is guaranteed an answer exists. If there exists multiple answers, you can return any of them.</li>\n</ul>\n</div>\n</div>"
}