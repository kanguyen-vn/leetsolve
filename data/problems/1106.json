{
    "id": 1106,
    "title": "Parsing A Boolean Expression",
    "title_slug": "parsing-a-boolean-expression",
    "backend_id": 1197,
    "content": "<div><p>Return the result of evaluating a given boolean <code>expression</code>, represented as a string.</p>\n\n<p>An expression can either be:</p>\n\n<ul>\n\t<li><code>\"t\"</code>, evaluating to <code>True</code>;</li>\n\t<li><code>\"f\"</code>, evaluating to <code>False</code>;</li>\n\t<li><code>\"!(expr)\"</code>, evaluating to the logical NOT of the inner expression <code>expr</code>;</li>\n\t<li><code>\"&amp;(expr1,expr2,...)\"</code>, evaluating to the logical AND of 2 or more inner expressions <code>expr1, expr2, ...</code>;</li>\n\t<li><code>\"|(expr1,expr2,...)\"</code>, evaluating to the logical OR of 2 or more inner expressions <code>expr1, expr2, ...</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre><strong>Input:</strong> expression = \"!(f)\"\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre><strong>Input:</strong> expression = \"|(f,t)\"\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre><strong>Input:</strong> expression = \"&amp;(t,f)\"\n<strong>Output:</strong> false\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre><strong>Input:</strong> expression = \"|(&amp;(t,f,t),!(t))\"\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= expression.length &lt;= 20000</code></li>\n\t<li><code>expression[i]</code>&nbsp;consists of characters in <code>{'(', ')', '&amp;', '|', '!', 't', 'f', ','}</code>.</li>\n\t<li><code>expression</code> is a valid expression representing a boolean, as given in the description.</li>\n</ul>\n</div>"
}