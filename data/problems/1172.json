{
    "id": 1172,
    "title": "Dinner Plate Stacks",
    "title_slug": "dinner-plate-stacks",
    "backend_id": 1270,
    "content": "<div><p>You have an infinite number of stacks arranged in a row and numbered (left to right) from 0, each of the stacks has the same&nbsp;maximum <code>capacity</code>.</p>\n\n<p>Implement the <code>DinnerPlates</code> class:</p>\n\n<ul>\n\t<li><code>DinnerPlates(int capacity)</code> Initializes the object with the maximum <code>capacity</code> of the stacks.</li>\n\t<li><code>void push(int val)</code>&nbsp;Pushes the given positive integer <code>val</code> into the leftmost stack with size less than <code>capacity</code>.</li>\n\t<li><code>int pop()</code>&nbsp;Returns the value at the top of the rightmost non-empty stack and removes it from that stack, and returns <code>-1</code> if all stacks are empty.</li>\n\t<li><code>int popAtStack(int index)</code>&nbsp;Returns the value at the top of the stack with the given <code>index</code> and removes it from that stack, and returns -1 if the stack with that&nbsp;given <code>index</code> is empty.</li>\n</ul>\n\n<p><strong>Example:</strong></p>\n\n<pre><b>Input: </b>\n[\"DinnerPlates\",\"push\",\"push\",\"push\",\"push\",\"push\",\"popAtStack\",\"push\",\"push\",\"popAtStack\",\"popAtStack\",\"pop\",\"pop\",\"pop\",\"pop\",\"pop\"]\n[[2],[1],[2],[3],[4],[5],[0],[20],[21],[0],[2],[],[],[],[],[]]\n<b>Output: </b>\n[null,null,null,null,null,null,2,null,null,20,21,5,4,3,1,-1]\n\n<b>Explanation: </b>\nDinnerPlates D = DinnerPlates(2);  // Initialize with capacity = 2\nD.push(1);\nD.push(2);\nD.push(3);\nD.push(4);\nD.push(5);         // The stacks are now:  2 &nbsp;4\n&nbsp;                                          1 &nbsp;3 &nbsp;5\n                                           \ufe48 \ufe48 \ufe48\nD.popAtStack(0);   // Returns 2.  The stacks are now:    &nbsp;4\n            &nbsp;                                          1 &nbsp;3 &nbsp;5\n                                                       \ufe48 \ufe48 \ufe48\nD.push(20);        // The stacks are now: 20  4\n&nbsp;                                          1 &nbsp;3 &nbsp;5\n                                           \ufe48 \ufe48 \ufe48\nD.push(21);        // The stacks are now: 20  4 21\n&nbsp;                                          1 &nbsp;3 &nbsp;5\n                                           \ufe48 \ufe48 \ufe48\nD.popAtStack(0);   // Returns 20.  The stacks are now:     4 21\n             &nbsp;                                          1 &nbsp;3 &nbsp;5\n                                                        \ufe48 \ufe48 \ufe48\nD.popAtStack(2);   // Returns 21.  The stacks are now:     4\n             &nbsp;                                          1 &nbsp;3 &nbsp;5\n                                                        \ufe48 \ufe48 \ufe48 \nD.pop()            // Returns 5.  The stacks are now:      4\n             &nbsp;                                          1 &nbsp;3 \n                                                        \ufe48 \ufe48  \nD.pop()            // Returns 4.  The stacks are now:   1 &nbsp;3 \n                                                        \ufe48 \ufe48   \nD.pop()            // Returns 3.  The stacks are now:   1 \n                                                        \ufe48   \nD.pop()            // Returns 1.  There are no stacks.\nD.pop()            // Returns -1.  There are still no stacks.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= capacity&nbsp;&lt;= 20000</code></li>\n\t<li><code>1 &lt;= val&nbsp;&lt;= 20000</code></li>\n\t<li><code>0 &lt;= index&nbsp;&lt;= 100000</code></li>\n\t<li>At most <code>200000</code>&nbsp;calls will be made to <code>push</code>, <code>pop</code>, and <code>popAtStack</code>.</li>\n</ul>\n</div>"
}