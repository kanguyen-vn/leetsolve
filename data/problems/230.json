{
    "id": 230,
    "title": "Kth Smallest Element in a BST",
    "title_slug": "kth-smallest-element-in-a-bst",
    "backend_id": 230,
    "content": "<div><p>Given a binary search tree, write a function <code>kthSmallest</code> to find the <b>k</b>th smallest element in it.</p>\n\n<p>&nbsp;</p>\n\n<p><strong>Example 1:</strong></p>\n\n<pre><strong>Input:</strong> root = [3,1,4,null,2], k = 1\n   3\n  / \\\n 1   4\n  \\\n&nbsp;  2\n<strong>Output:</strong> 1</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre><strong>Input:</strong> root = [5,3,6,2,4,null,null,1], k = 3\n       5\n      / \\\n     3   6\n    / \\\n   2   4\n  /\n 1\n<strong>Output:</strong> 3\n</pre>\n\n<p><b>Follow up:</b><br>\nWhat if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?</p>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of elements of the BST is between <code>1</code> to <code>10^4</code>.</li>\n\t<li>You may assume <code>k</code> is always valid, <code>1 \u2264 k \u2264 BST's total elements</code>.</li>\n</ul>\n</div>"
}