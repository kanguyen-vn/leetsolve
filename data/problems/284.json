{
    "id": 284,
    "title": "Peeking Iterator",
    "title_slug": "peeking-iterator",
    "backend_id": 284,
    "content": "<div><p>Given an Iterator class interface with methods: <code>next()</code> and <code>hasNext()</code>, design and implement a PeekingIterator that support the <code>peek()</code> operation -- it essentially peek() at the element that will be returned by the next call to next().</p>\n\n<p><strong>Example:</strong></p>\n\n<pre>Assume that the iterator is initialized to the beginning of the list: <strong><code>[1,2,3]</code></strong>.\n\nCall <strong><code>next()</code></strong> gets you <strong>1</strong>, the first element in the list.\nNow you call <strong><code>peek()</code></strong> and it returns <strong>2</strong>, the next element. Calling <strong><code>next()</code></strong> after that <i><b>still</b></i> return <strong>2</strong>. \nYou call <strong><code>next()</code></strong> the final time and it returns <strong>3</strong>, the last element. \nCalling <strong><code>hasNext()</code></strong> after that should return <strong>false</strong>.\n</pre>\n\n<p><b>Follow up</b>: How would you extend your design to be generic and work with all types, not just integer?</p>\n</div>"
}