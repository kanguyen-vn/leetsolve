{
    "id": 606,
    "title": "Construct String from Binary Tree",
    "title_slug": "construct-string-from-binary-tree",
    "backend_id": 606,
    "content": "<div><p>You need to construct a string consists of parenthesis and integers from a binary tree with the preorder traversing way.</p>\n\n<p>The null node needs to be represented by empty parenthesis pair \"()\". And you need to omit all the empty parenthesis pairs that don't affect the one-to-one mapping relationship between the string and the original binary tree.</p>\n\n<p><b>Example 1:</b><br>\n</p><pre><b>Input:</b> Binary tree: [1,2,3,4]\n       1\n     /   \\\n    2     3\n   /    \n  4     \n\n<b>Output:</b> \"1(2(4))(3)\"\n<br><b>Explanation:</b> Originallay it needs to be \"1(2(4)())(3()())\", <br>but you need to omit all the unnecessary empty parenthesis pairs. <br>And it will be \"1(2(4))(3)\".\n</pre>\n<p></p>\n\n<p><b>Example 2:</b><br>\n</p><pre><b>Input:</b> Binary tree: [1,2,3,null,4]\n       1\n     /   \\\n    2     3\n     \\  \n      4 \n\n<b>Output:</b> \"1(2()(4))(3)\"\n<br><b>Explanation:</b> Almost the same as the first example, <br>except we can't omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output.\n</pre>\n<p></p></div>"
}